{"version":3,"file":"index.js","sources":["../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../src/common/error.js","../src/common/constants.js","../src/common/readonly.js","../src/common/genRandId.js","../src/dependentInterface/domInterface.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../src/dependentInterface/zipInterface.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/dependentInterface/application.js","../src/classes/basic/openXmlPackage.js","../src/classes/basic/openXmlPart.js","../src/classes/basic/openXmlBinaryPart.js","../src/classes/basic/openXmlAttribute.js","../src/classes/basic/openXmlElement.js","../src/classes/basic/openXmlPurePart.js","../src/classes/elements/officeDocument/officeDoc2006/namespaceURI.js","../src/classes/elements/officeDocument/officeDoc2006/attrRelationshipId.js","../src/classes/elements/officeDocument/officeDoc2006/attrEmbed.js","../src/classes/elements/presentation/presentation2006/namespaceURI.js","../src/classes/elements/presentation/presentation2006/basic.js","../src/classes/elements/presentation/presentation2006/slideId.js","../src/classes/elements/presentation/presentation2006/slideIdList.js","../src/classes/elements/presentation/presentation2006/presentation.js","../src/classes/elements/presentation/presentation2006/cNvPr.js","../src/classes/elements/presentation/presentation2006/nonVisualPropertiesBase.js","../src/classes/elements/presentation/presentation2006/nonVisualGroupShapeProperties.js","../src/classes/elements/presentation/presentation2006/visualSlideObject.js","../src/classes/elements/presentation/presentation2006/groupShapeBase.js","../src/classes/elements/presentation/presentation2006/shapeTree.js","../src/classes/elements/presentation/presentation2006/commonSlideData.js","../src/classes/elements/presentation/presentation2006/slide.js","../src/classes/elements/presentation/presentation2006/nonVisualShapeProperties.js","../src/classes/elements/presentation/presentation2006/nonVisualPictureProperties.js","../src/classes/elements/presentation/presentation2006/groupShape.js","../src/classes/elements/drawing/drawing2006/namespaceURI.js","../src/classes/elements/drawing/drawing2006/basic.js","../src/classes/elements/drawing/drawing2006/text.js","../src/classes/elements/presentation/presentation2006/shape.js","../src/classes/elements/presentation/presentation2006/picture.js","../src/classes/parts/presentation/presentationPart.js","../src/classes/parts/presentation/slidePart.js"],"sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","const $errorId = Symbol(\"OxjsError.errorId\");\r\n\r\n/**\r\n * 扩展的OXML JS处理自定义错误类\r\n */\r\nexport class OxjsError extends Error {\r\n    constructor(_id, _msg) {\r\n        super(_msg);\r\n        this[$errorId] = Number(_id);\r\n    }\r\n\r\n    /**\r\n     * 错误ID号\r\n     */\r\n    get errorId() {\r\n        return this[$errorId];\r\n    }\r\n}\r\n\r\n/**\r\n * 生成一个错误对象实例\r\n * @param {*} _id 错误ID号\r\n * @param {*} _message 错误描述\r\n */\r\nexport function Exception(_id, _message) {\r\n    return new OxjsError(_id, _message);\r\n}\r\n\r\n/**\r\n * 未实现\r\n */\r\nexport function NO_IMPLEMENT(_tip) {\r\n    return Exception(1, _tip ? `${_tip} has not been implemented` : \"the action in this condition has not been implemented\");\r\n}\r\n/**\r\n * 期待参数的异常\r\n * @param {*} _tip 异常提示细节信息\r\n */\r\nexport function EXPECT_PARAM(_tip) {\r\n    return Exception(2, _tip ? `expect param: ${_tip}` : \"missing the valid parameters\");\r\n}\r\n\r\n/**\r\n * XML解析失败的异常\r\n * @param {*} _tip 异常提示细节信息\r\n */\r\nexport function XML_PARSE_FAIL(_tip) {\r\n    return Exception(3, _tip ? `fail in parse xml for \"${_tip}\"` : \"fail in parse XML\");\r\n}\r\n\r\n/**\r\n * 没有足够的ID\r\n */\r\nexport const NO_ENOUGH_ID = Exception(4, \"no enough ID\");\r\n\r\n/**\r\n * 数据来自不同包的错误\r\n * @param {*} _tip 异常提示细节信息\r\n */\r\nexport function FROM_OTHER_PACKAGE(_tip) {\r\n    return Exception(5, _tip ? `resource(\"${_tip}\") is from a different package` : \"resource is from a different package\");\r\n}\r\n\r\n/**\r\n * 定位节点失败\r\n */\r\nexport function LOCATE_NODE_FAIL(_tip) {\r\n    return Exception(6, _tip ? `fail to locate the node(${_tip}) for operation` : \"fail to locate the node for operation\");\r\n}\r\n\r\n/**\r\n * 定位资源失败\r\n */\r\nexport function LOCATE_RESOURCE_FAIL(_tip) {\r\n   return Exception(7, _tip ? `fail to locate the resource for operation: ${_tip}` : \"fail to locate the resource for operation\");\r\n}\r\n\r\n/**\r\n * 请求资源失败\r\n * @param {String} _tip 细节提示信息\r\n */\r\nexport function ACQUIRE_RESOURCE_FAIL(_tip) {\r\n    return Exception(8, _tip ? `fail to acquire resource: ${_tip}` : \"fail to acquire resource\");\r\n}\r\n\r\n/**\r\n * 断言\r\n * @param {*} _cond 断言条件\r\n * @param {*} _error 条件不成立时抛出的异常\r\n */\r\nexport function assert(_cond, _error) {\r\n    if (!_cond) {\r\n        throw _error || new OxjsError(NaN, \"assert\");\r\n    }\r\n    return _cond;\r\n}\r\n\r\n/**\r\n * throw an exception if something is not implemented.\r\n * uses for null interface\r\n * @param {String} _tip the name of the action which is not implemented\r\n */\r\nexport function NoImplemented(_tip) {\r\n    throw NO_IMPLEMENT(tip);\r\n}\r\n","/**\r\n * 用于存储对象关联的父对象的私有成员符号名称\r\n */\r\nexport const $parent = Symbol(\".parent\");\r\n\r\n/**\r\n * 用于存储对象关联的节点的私有成员符号名称\r\n */\r\nexport const $node = Symbol(\".node\");\r\n","/**\r\n * 为对象定义只读数据\r\n * @param {*} _obj 对象\r\n * @param {String|Symbol|Object} _keyOrMap 数据键名\r\n * @param {*} _value 数据\r\n */\r\nexport function readonly(_obj, _keyOrMap, _value) {\r\n    if (arguments.length > 2) {\r\n        Object.defineProperty(_obj, _keyOrMap, {\r\n            value: _value,\r\n            writable: false\r\n        });\r\n    } else {\r\n        for(let key in _keyOrMap) {\r\n            Object.defineProperty(_obj, key, {\r\n                value: _keyOrMap[key],\r\n                writable: false\r\n            });\r\n        }\r\n    }\r\n}\r\n","/**\r\n * generate a random ID\r\n * @param {String} _prefix prefix of the destination id\r\n * @param {*} _radix \r\n */\r\nexport function genRandId(_prefix, _radix) {\r\n    return `${_prefix || \"\"}${Date.now().toString(_radix)}${Math.random().toString(_radix).substr(2,3)}`; \r\n}","import {error} from \"../common\";\r\n\r\nexport class IDom {\r\n    constructor () {}\r\n\r\n    get primaryNode() {\r\n        error.NoImplemented(\"IDom.primaryNode\");\r\n    }\r\n\r\n    xpathSelect(_expression, _isSingle) {\r\n        error.NoImplemented(\"IDom.xpathSelect\");\r\n    }\r\n\r\n    createElement() {\r\n        error.NoImplemented(\"IDom.createElement\");\r\n    }\r\n\r\n    createElementNS() {\r\n        error.NoImplemented(\"IDom.createElementNS\");\r\n    }\r\n\r\n    static parse(_xmlString) {\r\n        error.NoImplemented(\"IDom.parse\");\r\n    }\r\n\r\n    static isElementNode(_obj) {\r\n        error.NoImplemented(\"IDom.isElementNode\");\r\n    }\r\n}\r\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import {error} from \"../common\";\r\n\r\nexport class IZip {\r\n    constructor() { }\r\n\r\n    async getFile(_file, _format) {\r\n        error.NoImplemented(\"IZip.getFile\");\r\n    }\r\n\r\n    setFile(_file, _content, _format) {\r\n        error.NoImplemented(\"IZip.setFile\");\r\n    }\r\n\r\n    async load(_file) {\r\n        error.NoImplemented(\"IZip.load\");\r\n    }\r\n\r\n    async save() {\r\n        error.NoImplemented(\"IZip.save\");\r\n    }\r\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { IDom } from \"./domInterface\";\r\nimport { IZip } from \"./zipInterface\";\r\n/**\r\n * Interface of an application enviroment\r\n */\r\nexport class IApplication {\r\n    constructor () {}\r\n\r\n    /**\r\n     * The interface IZip for operating zip package\r\n     */\r\n    static ZIP = IZip;\r\n\r\n    /**\r\n     * The interface IDom for operating DOM\r\n     */\r\n    static DOM = IDom;\r\n}","import { IApplication, IZip } from \"../../dependentInterface\";\r\nimport { error, readonly } from \"../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\nconst CONTENTTYPE_PATH = \"[Content_Types].xml\";\r\nconst EMPTY_CONTENTTYPE_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"true\"?><Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\"></Types>';\r\n\r\n/**\r\n * class for operating the open xml package\r\n */\r\nclass OpenXmlPackage {\r\n    /**\r\n     * construct an OpenXmlPackage object\r\n     * @param {IApplication} application the implementation of IApplication\r\n     * @param {IZip} zip an instance of IZip contains the package\r\n     * @param {String} _contentTypeXML the XML string of the \"[Content_Types].xml\"\r\n     */\r\n    constructor (application, zip, _contentTypeXML) {\r\n        readonly(this, { \r\n            application,\r\n            zip,\r\n            contentTypes: application.DOM.parse(_contentTypeXML || EMPTY_CONTENTTYPE_XML)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * save the current package\r\n     */\r\n    save() {\r\n        const zip = this.zip;\r\n        zip.setFile(CONTENTTYPE_PATH, this.contentTypes.toString());\r\n        return zip.save();\r\n    }\r\n\r\n    /**\r\n     * 设置包中一个文件的内容\r\n     * @param {String} _path 文件在包中的路径\r\n     * @param {*} _data 文件的数据\r\n     * @param {String} _contentType 文件的内容类型，如果不传入该参数，则不更新文件的内容类型\r\n     */\r\n    /**\r\n     * set a file into the package\r\n     * if the file is already in the package, it will be replace\r\n     * @param {String} _path the path of the file in the package\r\n     * @param {*} _data the content of the file\r\n     * @param {String} _format the format of the content, support \"binary\" and \"text\"\r\n     * @param {String} _contentType the type of the content, see the stand of the OpenXML\r\n     */\r\n    setFile(_path, _data, _format, _contentType) {\r\n        this.zip.setFile(_path, _data, _format);\r\n        if (_contentType) {\r\n            const dom = this.contentTypes;\r\n            const partName = `/${_path}`.replace(/\\\\/ig, \"/\");\r\n            const contentTypes = assert(dom.xpathSelect(\"//*[local-name(.)='Types']\", true), \r\n                                        error.LOCATE_NODE_FAIL(\"Types in [content types].xml\"));\r\n            const typeDesc = contentTypes.xpathSelect(`./*[local-name(.)='Override' and @PartName='${partName}']`, true);\r\n            if (typeDesc) {\r\n                typeDesc.setAttribute(\"ContentType\", _contentType);\r\n            } else {\r\n                const newItem = assert(dom.createElement(\"Override\"), \r\n                                       error.ACQUIRE_RESOURCE_FAIL('\"Override\" node in ContentType'));\r\n                newItem.setAttribute(\"ContentType\", _contentType);\r\n                newItem.setAttribute(\"PartName\", partName);\r\n                contentTypes.appendChild(newItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get a file from the package\r\n     * @param {String} _path the path of the file in the package\r\n     * @param {String} _format the format of the content, support \"binary\" and \"text\"\r\n     */\r\n    getFile(_path, _format) {\r\n        return this.zip.getFile(_path, _format);\r\n    }\r\n\r\n    /**\r\n     * 设置一个扩展名对应的内容类型\r\n     * @param {String} _extension 扩展名\r\n     * @param {String} _type 扩展名对应的内容类型\r\n     */\r\n    setExtensionType(_extension, _type) {\r\n        const dom = this.contentTypes;\r\n        const contentTypes = assert(dom.xpathSelect(\"//*[local-name(.)='Types']\", true), \r\n                                    error.LOCATE_NODE_FAIL(\"Types in [content types].xml\"));\r\n        _extension = _extension.replace(/^\\./, \"\");\r\n        const typeDesc = contentTypes.xpathSelect(`./*[local-name(.)='Default' and @Extension='${_extension}']`, true);\r\n        if (typeDesc) {\r\n            typeDesc.setAttribute(\"ContentType\", _type);\r\n        } else {\r\n            const newItem = assert( dom.createElement(\"Default\"),\r\n                                    error.ACQUIRE_RESOURCE_FAIL('\"Default\" node in ContentType'));\r\n            newItem.setAttribute(\"ContentType\", _type);\r\n            newItem.setAttribute(\"Extension\", _extension);\r\n            contentTypes.appendChild(newItem);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n */\r\nexport default {\r\n    /**\r\n     * Open a package, and return an instance of OpenXmlPackage\r\n     * @param {IApplication} _app an implementation of IApplication\r\n     * @param {*} _package any data of the package, the format dependent on the implementation of IZip\r\n     * @return {Promise<OpenXmlPackage>} a promise that will be resolved with an object of OpenXmlPackage\r\n     */\r\n    async open(_app, _package) {\r\n        if (IApplication.isPrototypeOf(_app)) {\r\n            const zip = await (new _app.ZIP()).load(_package);\r\n            if (zip instanceof IZip) {\r\n                const contentTypeXML = await zip.getFile(CONTENTTYPE_PATH);\r\n                return new OpenXmlPackage(_app, zip, contentTypeXML);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * check if the input object is an instance of OpenXmlPackage class\r\n     * @param {*} _obj\r\n     */\r\n    isPackage(_obj) {\r\n        return _obj instanceof OpenXmlPackage;\r\n    },\r\n\r\n    /**\r\n     * extern the prototype of OpenXmlPackage class\r\n     * @param {Object} _obj \r\n     */\r\n    extern(_obj) {\r\n        for (let item in _obj) {\r\n            OpenXmlPackage.prototype[item] = _obj[item];\r\n        }\r\n    }\r\n}","import { default as OpenPackage } from \"./openXmlPackage\";\r\nimport path from \"path\";\r\nimport { readonly, error, genRandId } from \"../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\n// registed table for subclassed part\r\nconst registedParts = {};\r\n\r\n// XML for relationship file initialization\r\nconst EMPTY_RELATIONSHRIP_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"></Relationships>';\r\n\r\n/**\r\n * basic class of all OpenXML part\r\n */\r\nexport class OpenXmlPart {\r\n    //#region static members\r\n\r\n    /**\r\n     * get the path of the relationship file from the path of the part file path\r\n     * @param {*} _partPath the path of the part file\r\n     */\r\n    static getRelationshipPath(_partPath) {\r\n        const partDir = path.dirname(_partPath);\r\n        const partFileName = path.basename(_partPath);\r\n        return path.join(partDir, `./_rels/${partFileName}.rels`).replace(/\\\\/ig, \"/\");\r\n    }\r\n\r\n    /**\r\n     * load and instance a part from a package\r\n     * @param {*} _package \r\n     * @param {*} _path \r\n     * @param {*} _opt \r\n     */\r\n    static async load(_package, _path, _opt) {\r\n        if (OpenPackage.isPackage(_package)) {\r\n            const path = String(_path).replace(/\\\\/ig, \"/\").replace(/^\\//, \"\");\r\n            const relationshipPath = OpenXmlPart.getRelationshipPath(path);\r\n            const content = await _package.getFile(path, this.ContentFormat);\r\n            if (content) {\r\n                const relationshipXML = await _package.getFile(relationshipPath, \"text\");\r\n                const opt = {\r\n                    path,\r\n                    content,\r\n                    relationshipPath,\r\n                    relationshipXML,\r\n                    package: _package\r\n                };\r\n                _opt && Object.assign(opt, _opt);\r\n                return new this(opt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * convert the given part to the invoker class\r\n     * @param {OpenXmlPart} _part part which will be converted\r\n     * @param {*} _opt the extension options passed to the constructor of the invoker class\r\n     */\r\n    static async convert(_part, _opt) {\r\n        assert(_part instanceof OpenXmlPart, error.EXPECT_PARAM(\"_part must be instance of OpenXmlPart\"));\r\n\r\n        const path = _part.path;\r\n        const relationshipPath = _part.relationshipPath;\r\n        const content = await _part.package.getFile(path, this.ContentFormat);\r\n        if (content) {\r\n            const relationshipXML = await _part.package.getFile(relationshipPath, \"text\");\r\n            const opt = {\r\n                path,\r\n                content,\r\n                relationshipPath,\r\n                relationshipXML,\r\n                package: _part.package\r\n            };\r\n            _opt && Object.assign(opt, _opt);\r\n            return new this(opt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * string of the content's type, may be override by the subclass\r\n     */\r\n    static ContentType = undefined;\r\n\r\n    /**\r\n     * uri string of the part's schemas, must be override by the subclass\r\n     */\r\n    static SchemasURI = undefined;\r\n\r\n    /**\r\n     * format of the part's content, may be override by the subclass\r\n     */\r\n    static ContentFormat = \"text\";\r\n\r\n    /**\r\n     * register a subclass part\r\n     * @param {Class} _partClass class extends OpenXmlPart\r\n     */\r\n    static register(_partClass) {\r\n        assert(OpenXmlPart.isPrototypeOf(_partClass), error.EXPECT_PARAM(\"_partClass\"));\r\n        assert(_partClass.SchemasURI, error.EXPECT_PARAM(\"_partclass.schemasURI\"));\r\n\r\n        registedParts[_partClass.SchemasURI] = _partClass;\r\n        \r\n        return _partClass;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    constructor(_opt) {\r\n        const opt = _opt || {};\r\n\r\n        assert(opt.path && opt.content, error.EXPECT_PARAM(\"opt.partPath & opt.partXML\"));\r\n        assert(opt.package, error.EXPECT_PARAM(\"opt.package\"));\r\n        const relationshipDom = opt.relationshipXML && opt.package.application.DOM.parse(opt.relationshipXML);\r\n\r\n        readonly(this, {\r\n            package: opt.package,\r\n            path: opt.path,\r\n            relationshipPath: opt.relationshipPath\r\n        });\r\n        relationshipDom && readonly(this, { relationshipDom });\r\n    }\r\n\r\n    //#region instance members\r\n\r\n    /**\r\n     * save this part into the package\r\n     */\r\n    commit() {\r\n        const pkg = this.package;\r\n        if (pkg) {\r\n            const content = this.content;\r\n            content && pkg.setFile(this.path, content, this.constructor.ContentType);\r\n            const relationshipDom = this.relationshipDom;\r\n            relationshipDom && pkg.setFile(this.relationshipPath, relationshipDom.toString(), \"text\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if two part in the same package\r\n     * @param {OpenXmlPart} _part the part to be checked\r\n     */\r\n    inSamePackage(_part) {\r\n        return _part && (_part.package === this.package);\r\n    }\r\n\r\n    /**\r\n     * duplicate the part\r\n     * @param {String} _path the path for the new part\r\n     * @param {OpenXmlPackage} _package the package the save the new part, takes current package if this parameter is empty\r\n     * @param {*} _opt the parameter passed to OpenXmlPart.load as the 3rd parameter\r\n     */\r\n    duplicate(_path, _package, _opt) {\r\n        const targetPackage = _package || this.package;\r\n        const content = this.content;\r\n        // this action is only valid when the content is not empty, and has a different path or in different package\r\n        if (content && ((targetPackage !== this.package) || (_path !== this.path))) {\r\n            // copy the content and relationship content\r\n            targetPackage.setFile(_path, content, this.ContentFormat, this.constructor.ContentType);\r\n            const relationshipDom = this.relationshipDom;\r\n            relationshipDom && targetPackage.setFile(OpenXmlPart.getRelationshipPath(_path), relationshipDom.toString(), \"text\");\r\n            // TODO: to correct the relationship parts\r\n            // ...\r\n            // instance the new part object\r\n            return this.constructor.load(targetPackage, _path, _opt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get a relation part\r\n     * @param {String|Class} _idOrClass id of the relation part, or a class of the relation part\r\n     */\r\n    async getRelationPart(_idOrClass) {\r\n        const rels = this.relationshipDom;\r\n        if (rels) {\r\n            const nodeSel = OpenXmlPart.isPrototypeOf(_idOrClass)\r\n                                ? rels.xpathSelect(`.//*[local-name(.)='Relationship' and @Type='${_idOrClass.SchemasURI}']`, true)\r\n                                : rels.xpathSelect(`.//*[local-name(.)='Relationship' and @Id='${_idOrClass}']`, true);\r\n            if (nodeSel) {\r\n                const typeAttr = nodeSel.getAttribute(\"Type\");\r\n                let targetPath = String(nodeSel.getAttribute(\"Target\")).replace(/\\\\/ig, \"/\");\r\n                path.isAbsolute(targetPath) || (targetPath = path.join(path.dirname(this.path), targetPath));\r\n                const ctor = registedParts[typeAttr] || OpenXmlPart;\r\n                const part = await ctor.load(this.package, targetPath);\r\n                part && readonly(part, { relationshipId: String(nodeSel.getAttribute(\"id\")) });\r\n                return part;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * insert a part as the relation part of current part\r\n     * @param {OpenXmlPart} _part the part will be inserted\r\n     */\r\n    insertRelationPart(_part) {\r\n        assert(_part instanceof OpenXmlPart, error.EXPECT_PARAM(\"_part\"));\r\n        \r\n        const targetRelPath = path.relative(path.dirname(this.path), _part.path).replace(/\\\\/ig, \"/\");\r\n        const rid = genRandId(\"R\", 16);\r\n\r\n        let rels = this.relationshipDom;\r\n        if (!rels) {\r\n            readonly(this, {relationshipDom: this.package.application.DOM.parse(EMPTY_RELATIONSHRIP_XML)});\r\n            rels = this.relationshipDom;\r\n        }\r\n\r\n        assert(rels, error.ACQUIRE_RESOURCE_FAIL(\"Relationship DOM\"));\r\n\r\n        const relNode = rels.createElement(\"Relationship\");\r\n        assert(relNode, error.ACQUIRE_RESOURCE_FAIL(\"Relationship Node\"));\r\n\r\n        relNode.setAttribute(\"Target\", targetRelPath);\r\n        relNode.setAttribute(\"Type\", _part.constructor.SchemasURI);\r\n        relNode.setAttribute(\"Id\", rid);\r\n        rels.primaryNode.appendChild(relNode);\r\n\r\n        return rid;\r\n    }\r\n\r\n    /**\r\n     * generate a iterator for relation parts\r\n     * @param {String|Class|undefined} _class   class of the target part, \r\n     *                                          or the string of target part's type, \r\n     *                                          undefined for iterate all relation parts\r\n     */\r\n    * relationParts(_class) {\r\n        const rels = this.relationshipDom;\r\n        if (rels) {\r\n            const nodeList = OpenXmlPart.isPrototypeOf(_class)\r\n                                ? rels.xpathSelect(`.//*[local-name(.)='Relationship' and @Type='${_class.SchemasURI}']`)\r\n                                : (typeof _class === \"string\"\r\n                                    ? rels.xpathSelect(`.//*[local-name(.)='Relationship' and @Type='${_class}']`)\r\n                                    : rels.xpathSelect(\".//*[local-name(.)='Relationship']\"));\r\n            if (nodeList) {\r\n                const curDir = path.dirname(this.path);\r\n                for (let index in nodeList) {\r\n                    const node = nodeList[index];\r\n                    const relationshipId = node.getAttribute(\"id\");\r\n                    const type = node.getAttribute(\"Type\");\r\n                    let target = String(node.getAttribute(\"Target\")).replace(/\\\\/ig, \"/\");\r\n                    path.isAbsolute(target) || (target = path.join(curDir, target));\r\n                    const ctor = registedParts[type] || OpenXmlPart;\r\n                    yield {\r\n                        index,\r\n                        relationshipId,\r\n                        target,\r\n                        class: ctor,\r\n                        type,\r\n                        node\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n}\r\n\r\n","import { readonly } from \"../../common\";\r\nimport { OpenXmlPart } from \"./openXmlPart\";\r\n\r\n/**\r\n * basic class of all OpenXML part which content is binary\r\n * @extends OpenXmlPart\r\n */\r\nexport class OpenXmlBinaryPart extends OpenXmlPart {\r\n    static ContentFormat = \"binary\";\r\n\r\n    constructor (_opt) {\r\n        super(_opt);\r\n        readonly(this, {\r\n            content: _opt.content\r\n        });\r\n    }\r\n}\r\n","import { error } from \"../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\n/**\r\n * basic class of OpenXML attributes\r\n */\r\nexport class OpenXmlAttribute {\r\n    /**\r\n     * construct an Open XML attribute\r\n     * @param {String} _localName the local name of the attribute\r\n     * @param {String} _nsURI the uri of the name-space of the attribute\r\n     * @param {String} _defPrefix the default prefix of the attribute's name-space\r\n     * @param {Object} _opt the extend options, can be undefined\r\n     *                      format is { default: default-value, checker: func-to-check-the-value }\r\n     */\r\n    constructor (_localName, _nsURI, _defPrefix, _opt) {\r\n        Object.defineProperties(this, {\r\n            localName: {\r\n                value: String(_localName),\r\n                writable: false\r\n            },\r\n            defaultPrefix: {\r\n                value: _defPrefix && String(_defPrefix),\r\n                writable: false\r\n            },\r\n            namespaceUri: {\r\n                value: String(_nsURI),\r\n                writable: false\r\n            },\r\n            options: {\r\n                value: _opt || {},\r\n                writable: false\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get the qualified name of the attribute\r\n     * it contains the prefix of the name-space and the local-name\r\n     * @param {Node} _node \r\n     */\r\n    qualifiedName(_node) {\r\n        const prefix = _node.lookupPrefix(this.namespaceUri) || this.defaultPrefix;\r\n        return prefix ? `${prefix}:${this.localName}` : this.localName;\r\n    }\r\n\r\n    /**\r\n     * adjust the input value of the attribute\r\n     * @param {*} _val the input value\r\n     */\r\n    adjustValue(_val) {\r\n        (arguments.length <= 0) && (_val = this.options.default);\r\n        const fn = this.options.checker;\r\n        return fn ? fn(_val) : _val; \r\n    }\r\n\r\n    /**\r\n     * get the value of the attribute\r\n     * @param {Node} _node\r\n     */\r\n    getValue(_node) {\r\n        const ns = this.namespaceUri;\r\n\r\n        return ns ? _node.getAttributeNS(ns, this.localName) : _node.getAttribute(this.qualifiedName(_node));\r\n    }\r\n\r\n    /**\r\n     * set the value of the attribute\r\n     * @param {Node} _node \r\n     * @param {*} _val\r\n     */\r\n    setValue(_node, _val) {\r\n        _val = this.adjustValue(_val);\r\n\r\n        const ns = this.namespaceUri;\r\n        ns ? _node.setAttributeNS(ns, this.qualifiedName(_node), _val) : _node.setAttribute(this.localName, _val);\r\n    }\r\n\r\n    /**\r\n     * delete the attribute\r\n     * @param {Node} _node\r\n     */\r\n    remove(_node) {\r\n        const ns = this.namespaceUri;\r\n        ns ? _node.removeAttributeNS(ns, this.localName) : _node.removeAttribute(this.qualifiedName(_node));\r\n    }\r\n\r\n    /**\r\n     * generate a xpath expression part\r\n     * @param {*} _val value for select, can ignore this parameter\r\n     */\r\n    xpath(_val) {\r\n        return `@*[local-name(.)='${this.localName}' and namespace-uri(.)='${this.namespaceUri}' ${(arguments.length > 0) ? `and string(.)='${_val}'` : \"\"}]`\r\n    }\r\n\r\n    /**\r\n     * generate a xpath expression part for searching any attribute with the val\r\n     * @param {*} _val \r\n     */\r\n    static xpathVal(_val) {\r\n        return `@*[string(.)='${_val}']`;\r\n    }\r\n}","import { error, readonly } from \"../../common\";\r\nimport { IDom } from \"../../dependentInterface\";\r\nimport { OpenXmlAttribute } from \"./openXmlAttribute\";\r\n\r\nconst assert = error.assert;\r\n\r\nconst $node = Symbol(\"OpenXmlElement.node\");\r\n\r\n/**\r\n * register map for subclass OpenXML elements\r\n */\r\nconst registedElements = {};\r\n\r\n/**\r\n * basic class of all OpenXml Element\r\n */\r\nexport class OpenXmlElement {\r\n\r\n    constructor (_node) {\r\n        assert(_node, error.EXPECT_PARAM(\"_node\"));\r\n        readonly(this, {\r\n            node: _node\r\n        });\r\n    }\r\n\r\n    //#region members should be override by subclass\r\n\r\n    /**\r\n     * the local name of this kind of element's node\r\n     */\r\n    static LocalName = undefined;\r\n\r\n    /**\r\n     * the default prefix name of this kind of element's node\r\n     */\r\n    static DefaultPrefix = undefined;\r\n\r\n    /**\r\n     * the uri of this kind of element's namespace\r\n     */\r\n    static NamespaceUri = undefined;\r\n\r\n    //#endregion\r\n\r\n    //#region static members\r\n\r\n    /**\r\n     * register a subclass\r\n     * @param {Class} _elementClass a subclass entends OpenXmlElement\r\n     */\r\n    static register(_elementClass) {\r\n        assert(_elementClass && OpenXmlElement.isPrototypeOf(_elementClass), error.EXPECT_PARAM(\"_elementClass\"));\r\n        assert(_elementClass.NamespaceUri, error.EXPECT_PARAM(`${_elementClass.name}.NamespaceUri`));\r\n\r\n        const key = `${_elementClass.NamespaceUri}::${_elementClass.LocalName}`;\r\n        registedElements[key] = _elementClass;\r\n\r\n        return _elementClass;\r\n    }\r\n\r\n    /**\r\n     * get the prefix in the range of a element\r\n     * this function is not getting the prefix name for the input element but for the invoker class\r\n     * @param {OpenXmlElement} _element\r\n     */\r\n    static prefix(_element) {\r\n        return ((_element instanceof OpenXmlElement) && _element.node.lookupPrefix(this.NamespaceUri)) || this.DefaultPrefix;\r\n    }\r\n\r\n    /**\r\n     * get the qualified name in the range of a element\r\n     * this function is not getting the qualified name for the input element but for the invoker class\r\n     * @param {OpenXmlElement} _element\r\n     */\r\n    static qualifiedName(_element) {\r\n        const singleTagName = this.LocalName;\r\n        assert(singleTagName, error.NO_IMPLEMENT(`${this.name}.LocalName`));\r\n        const prefixName = this.prefix(_element);\r\n        return prefixName ? `${prefixName}:${singleTagName}` : singleTagName;\r\n    }\r\n\r\n    /**\r\n     * instanced an OpenXMLElement object for the input node\r\n     * @param {Element} _node\r\n     */\r\n    static instanced(_node) {\r\n        if (_node && (1 === _node.nodeType)) {\r\n            const key = `${_node.namespaceURI}::${_node.localName}`;\r\n            const ctor = registedElements[key] || OpenXmlElement;\r\n            return new ctor(_node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if the input node matched to the invoker class\r\n     * @param {Element} _node\r\n     */\r\n    static isMatchedNode(_node) {\r\n        return _node && (_node.namespaceURI === this.NamespaceUri) && (_node.localName === this.LocalName);\r\n    }\r\n\r\n    /**\r\n     * create a new element of the invoker class\r\n     * @param {IDOM|Document} _dom the isntance of the IDOM for creating element\r\n     * @param {Element} _parentElement the parent element which will contain the new element\r\n     */\r\n    static createElement(_dom, _parentElement) {\r\n        assert(_dom, error.EXPECT_PARAM(\"_dom\"));\r\n\r\n        const node = _dom.createElementNS(this.NamespaceUri, this.qualifiedName(_parentElement));\r\n        if (node) {\r\n            let element = new this(node);\r\n            this.createDetail(element);\r\n            return element;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the action for preparing the detail data of a new instance\r\n     * @param {OpenXmlElement} _element \r\n     */\r\n    static createDetail(_element) {\r\n        assert(_element instanceof this, error.EXPECT_PARAM(`_element must be instance of ${this.name}`));\r\n    }\r\n\r\n    /**\r\n     * generate a xpath part of this class\r\n     * @param {String} _custom some custom expression part, can be ignored.\r\n     */\r\n    static xpath(_custom) {\r\n        return `*[local-name(.)='${this.LocalName}' and namespace-uri(.)='${this.NamespaceUri}' ${_custom || \"\"}]`\r\n    }\r\n\r\n    /**\r\n     * generate a xpath expression for searching\r\n     * @param {String} _prefix the prefix expression, such as \"./\", \".//\", and so on\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will take \"*\" by default if ignore this parameter.\r\n     */\r\n    static genXPath(_prefix, _arg) {\r\n        return `${_prefix}${(((_arg instanceof OpenXmlAttribute) || OpenXmlElement.isPrototypeOf(_arg)) && _arg.xpath()) || _arg || \"*\"}`;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region instance properties\r\n\r\n    /**\r\n     * get the prefix name\r\n     */\r\n    get prefix() {\r\n        return this.node.prefix;\r\n    }\r\n\r\n    /**\r\n     * get the local name\r\n     */\r\n    get localName() {\r\n        return this.node.localName;\r\n    }\r\n\r\n    /**\r\n     * get the qualified name\r\n     */\r\n    get qualifiedName() {\r\n        return this.node.nodeName;\r\n    }\r\n\r\n    /**\r\n     * get the text content of this instance\r\n     */\r\n    get textContent() {\r\n        return this.node.textContent;\r\n    }\r\n\r\n    /**\r\n     * get the class name of this instance\r\n     */\r\n    get className() {\r\n        return this.constructor.name;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region instance methods\r\n\r\n    /**\r\n     * search all children matched the parameter\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will match any children by default if ignore this parameter.\r\n     */\r\n    children(_arg) {\r\n        const selectExp = this.constructor.genXPath(\"./\", _arg);\r\n        const nodes = this.node.xpathSelect(selectExp);\r\n        return nodes ? nodes.map(node => OpenXmlElement.instanced((1 !== node.nodeType) ? node.ownerElement : node) || node) : [];\r\n    }\r\n\r\n    /**\r\n     * search all descendants matched the parameter\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will match any descendants by default if ignore this parameter.\r\n     */\r\n    descendants(_arg) {\r\n        const selectExp = this.constructor.genXPath(\".//\", _arg);\r\n        const nodes = this.node.xpathSelect(selectExp);\r\n        return nodes ? nodes.map(node => OpenXmlElement.instanced((1 !== node.nodeType) ? node.ownerElement : node) || node) : [];\r\n    }\r\n\r\n    /**\r\n     * search the first children matched the parameter\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will match any children by default if ignore this parameter.\r\n     */\r\n    childOne(_arg) {\r\n        const selectExp = this.constructor.genXPath(\"./\", _arg);\r\n        const node = this.node.xpathSelect(selectExp, true);\r\n        return node && (OpenXmlElement.instanced((1 !== node.nodeType) ? node.ownerElement : node) || node);\r\n    }\r\n\r\n    /**\r\n     * search the first descendant matched the parameter\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will match any descendant by default if ignore this parameter.\r\n     */\r\n    descendantOne(_class, _exSelector) {\r\n        const selectExp = this.constructor.genXPath(\".//\", _arg);\r\n        const node = this.node.xpathSelect(selectExp, true);\r\n        return node && (OpenXmlElement.instanced((1 !== node.nodeType) ? node.ownerElement : node) || node);\r\n    }\r\n\r\n    /**\r\n     * append a element as the last child of the current element\r\n     * @param {OpenXmlElement} _element the element will be append\r\n     */\r\n    appendChild(_element) {\r\n        assert(_element instanceof OpenXmlElement, error.EXPECT_PARAM(\"_element\"));\r\n\r\n        this.node.appendChild(_element.node);\r\n    }\r\n\r\n    /**\r\n     * insert a element as the sibling of the current element\r\n     * @param {OpenXmlElement} _element the element will be inserted\r\n     * @param {Boolean} _before true for insert before the current element, false for insert after the current element\r\n     */\r\n    insertAsSibling(_element, _before) {\r\n        assert(_element instanceof OpenXmlElement, error.EXPECT_PARAM(\"_element\"));\r\n\r\n        const refNode = this.node;\r\n        const parent = refNode.parentNode;\r\n        parent && parent.insertBefore(_element.node, _before ? refNode : refNode.nextSibling);\r\n    }\r\n\r\n    /**\r\n     * create a new element of the given class\r\n     * @param {Class} _elementClass the class of the new element\r\n     */\r\n    createElement(_elementClass) {\r\n        assert(OpenXmlElement.isPrototypeOf(_elementClass), error.EXPECT_PARAM(\"_elementClass\"));\r\n\r\n        return _elementClass.createElement(this.node.ownerDocument, this);\r\n    }\r\n\r\n    /**\r\n     * remove the current from the DOM\r\n     */\r\n    remove() {\r\n        const parent = this.node.parent;\r\n\r\n        parent && parent.removeChild(this.node);\r\n    }\r\n\r\n    /**\r\n     * set a attribute\r\n     * @param {OpenXmlAttribute|String} _attr attribute object or attribute's name\r\n     * @param {*} _val value of the attribute\r\n     */\r\n    setAttribute(_attr, _val) {\r\n        (_attr instanceof OpenXmlAttribute)\r\n            ? _attr.setValue(this.node, _val)\r\n            : this.node.setAttribute(String(_attr), _val);\r\n    }\r\n\r\n    /**\r\n     * get the value of the given attribute\r\n     * @param {OpenXmlAttribute|String} _attr attribute object or attribute's name\r\n     */\r\n    getAttribute(_attr) {\r\n        return (_attr instanceof OpenXmlAttribute)\r\n                    ? _attr.getValue(this.node)\r\n                    : this.node.getAttribute(String(_attr));\r\n    }\r\n\r\n    /**\r\n     * remove the given attribute\r\n     * @param {OpenXmlAttribute|String} _attr attribute object or attribute's name\r\n     */\r\n    removeAttribute(_attr) {\r\n        return (_attr instanceof OpenXmlAttribute)\r\n                    ? _attr.remove(this.node)\r\n                    : this.node.removeAttribute(String(_attr));\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","import { readonly } from \"../../common\";\r\nimport { OpenXmlPart } from \"./openXmlPart\";\r\nimport { OpenXmlElement } from \"./openXmlElement\";\r\nimport { error } from \"../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\n/**\r\n * basic class of all OpenXML part which content is XML\r\n * @extends OpenXmlPart\r\n */\r\nexport class OpenXmlPurePart extends OpenXmlPart {\r\n\r\n    constructor(_opt) {\r\n        super(_opt);\r\n\r\n        readonly(this, {\r\n            contentDom: _opt.package.application.DOM.parse(_opt.content)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get the data of the content\r\n     */\r\n    get content() {\r\n        return this.contentDom.toString();\r\n    }\r\n\r\n    /**\r\n     * get the instance of OpenXmlElement for the primary element in the DOM\r\n     */\r\n    get primaryElement() {\r\n        return OpenXmlElement.instanced(this.contentDom.primaryNode);\r\n    }\r\n}","export const relationship = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\";","import { OpenXmlAttribute } from \"../../../basic\";\r\nimport { relationship } from \"./namespaceURI\";\r\n\r\nexport const AttrRelationshipId = new OpenXmlAttribute(\"id\", relationship, \"r\");\r\n","import { OpenXmlAttribute } from \"../../../basic\";\r\nimport { relationship } from \"./namespaceURI\";\r\n\r\nexport const AttrEmbed = new OpenXmlAttribute(\"embed\", relationship, \"r\");\r\n","export const main = \"http://schemas.openxmlformats.org/presentationml/2006/main\";","import { OpenXmlElement } from \"../../../basic\";\r\nimport { main as mainURI } from \"./namespaceURI\";\r\n\r\n/**\r\n * basic class for elements defined in presentation2006\r\n */\r\nexport default class Presentation2006 extends OpenXmlElement {\r\n    //#region override the key information\r\n    static NamespaceUri = mainURI;\r\n    static DefaultPrefix = \"p\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n}\r\n","import Presentations2006 from \"./basic\";\r\nimport { AttrRelationshipId } from \"../../officeDocument\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { genRandId } from \"../../../../common\";\r\n\r\n/**\r\n * class of the slide's id, element with tag \"sldId\"\r\n * @class SlideId\r\n */\r\nexport const SlideId = OpenXmlElement.register(class SlideId extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"sldId\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the relationship ID\r\n     */\r\n    get relationshipId() {\r\n        let id = this.getAttribute(AttrRelationshipId);\r\n        if (!id) {\r\n            id = genRandId(\"R\");\r\n            this.setAttribute(AttrRelationshipId, id);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * set the relationship ID\r\n     */\r\n    set relationshipId(_val) {\r\n        this.setAttribute(AttrRelationshipId, _val || utility.genRandId(\"R\", 16));\r\n    }\r\n\r\n    /**\r\n     * get the ID\r\n     */\r\n    get id() {\r\n        return this.getAttribute(\"id\");\r\n    }\r\n\r\n    /**\r\n     * set the ID\r\n     */\r\n    set id(_val) {\r\n        _val = Number(_val);\r\n        isNaN(_val) || this.setAttribute(\"id\", _val);\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { SlideId } from \"./slideId\";\r\n\r\n/**\r\n * class of the list of the slide's ID, element with tag \"sldIdLst\"\r\n * @class SlideIdList\r\n */\r\nexport const SlideIdList = OpenXmlElement.register(class SlideIdList extends Presentations2006 {\r\n    //#region override the key inforamtion\r\n    static LocalName = \"sldIdLst\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get count of the IDs\r\n     */\r\n    get count() {\r\n        return this.children(SlideId).length;\r\n    }\r\n\r\n    /**\r\n     * get an iterator for enumerating all SlideIds\r\n     */\r\n    *items() {\r\n        const list = this.children(SlideId);\r\n        for (let index in list) {\r\n            yield {\r\n                index,\r\n                slideId: list[index]\r\n            };\r\n        }\r\n    }\r\n\r\n});","import Presentations2006 from \"./basic\";\r\nimport { SlideIdList } from \"./slideIdList\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the presetation, element with tag \"presentation\"\r\n */\r\nexport const Presentation = OpenXmlElement.register(class Presentation extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"presentation\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the list of the slide's id\r\n     */\r\n    get slideIdList() {\r\n        let list = this.children(SlideIdList);\r\n        if (list.length <= 0) {\r\n            list = this.createElement(SlideIdList);\r\n            this.appendChild(list);\r\n        } else {\r\n            list = list[0];\r\n        }\r\n        return list;\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { CommonSlideData } from \"./commonSlideData\";\r\n\r\n/**\r\n * class of element contains the nonvisual information, element with tag \"cNvPr\"\r\n * @class NonVisualDrawingProperties\r\n */\r\nexport const NonVisualDrawingProperties = OpenXmlElement.register(class NonVisualDrawingProperties extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"cNvPr\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the name information\r\n     */\r\n    get name() {\r\n        return this.getAttribute(\"name\")\r\n    }\r\n\r\n    /**\r\n     * set the name information\r\n     */\r\n    set name(_val) {\r\n        this.setAttribute(\"name\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the ID\r\n     */\r\n    get id() {\r\n        return this.getAttribute(\"id\");\r\n    }\r\n\r\n    /**\r\n     * set the ID\r\n     */\r\n    set id(_val) {\r\n        this.setAttribute(\"id\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the description\r\n     */\r\n    get description() {\r\n        return this.getAttribute(\"descr\");\r\n    }\r\n\r\n    /**\r\n     * set the description\r\n     */\r\n    set description(_val) {\r\n        return this.setAttribute(\"descr\", _val);\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualDrawingProperties } from \"./cNvPr\";\r\n\r\n/**\r\n * basic class of the nonvisual properties\r\n * @class NonVisualPropertiesBase\r\n */\r\nexport class NonVisualPropertiesBase extends Presentations2006 {\r\n    \r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the name information\r\n     */\r\n    get name() {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        return pr && pr.name;\r\n    }\r\n\r\n    /**\r\n     * set the name information\r\n     */\r\n    set name(_val) {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        pr && (pr.name = _val);\r\n    }\r\n\r\n    /**\r\n     * get the ID information\r\n     */\r\n    get id() {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        return pr && pr.id;\r\n    }\r\n\r\n    /**\r\n     * set the ID information\r\n     */\r\n    set id(_val) {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        pr && (pr.id = _val);\r\n    }\r\n\r\n    /**\r\n     * get the description\r\n     */\r\n    get description() {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        return pr && pr.description;\r\n    }\r\n\r\n    /**\r\n     * set the description\r\n     */\r\n    set description(_val) {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        pr && (pr.description = _val);\r\n    }\r\n}","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualPropertiesBase } from \"./nonVisualPropertiesBase\";\r\n\r\n/**\r\n * class of the nonvisual properties of the shape's group, element with tag \"nvGrpSpPr\"\r\n * @class NonVisualGroupShapeProperties\r\n */\r\nexport const NonVisualGroupShapeProperties = OpenXmlElement.register(class NonVisualGroupShapeProperties extends NonVisualPropertiesBase {\r\n    //#region override the key information\r\n    static LocalName = \"nvGrpSpPr\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\n\r\n/**\r\n * basic class of all visual object in the slide\r\n */\r\nexport class VisualSlideObject extends Presentations2006 {\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n}\r\n","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualGroupShapeProperties } from \"./nonVisualGroupShapeProperties\";\r\nimport { VisualSlideObject } from \"./visualSlideObject\";\r\n\r\n/**\r\n * basic class of all element contain a group of shape\r\n * @class GroupShapeBase\r\n */\r\nexport class GroupShapeBase extends VisualSlideObject {\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the nonvisual properties\r\n     */\r\n    get nonVisualProperties() {\r\n        let pr = this.childOne(NonVisualGroupShapeProperties);\r\n        if (!pr) {\r\n            pr = this.createElement(NonVisualGroupShapeProperties);\r\n            pr && this.appendChild(pr);\r\n        }\r\n        return pr;\r\n    }\r\n\r\n    /**\r\n     * get an iterator for enumerating the visual elements\r\n     */\r\n    * visualChildren() {\r\n        let list = this.children(\"*\");\r\n        for (let idx in list) {\r\n            const element = list[idx];\r\n            if (element instanceof VisualSlideObject) {\r\n                yield element;\r\n            }\r\n        };\r\n    }\r\n};","import { GroupShapeBase } from \"./groupShapeBase\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the tree of the shapes, element with tag \"spTree\"\r\n * @class ShapeTree\r\n */\r\nexport const ShapeTree = OpenXmlElement.register(class ShapeTree extends GroupShapeBase {\r\n    //#region override the key information\r\n    static LocalName = \"spTree\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    \r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { ShapeTree } from \"./shapeTree\";\r\n\r\n/**\r\n * class of the common data of the slide, element with tag \"cSld\"\r\n * @class CommonSlideDatas\r\n */\r\nexport const CommonSlideData = OpenXmlElement.register(class CommonSlideData extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"cSld\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the tree of the shapes\r\n     */\r\n    get shapeTree() {\r\n        let tree = this.childOne(ShapeTree);\r\n        if (!tree) {\r\n            tree = this.createElement(ShapeTree);\r\n            tree && this.appendChild(tree);\r\n        }\r\n        return tree;\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { CommonSlideData } from \"./commonSlideData\";\r\n\r\n/**\r\n * class of the slide, element with tag \"sld\"\r\n */\r\nexport const Slide = OpenXmlElement.register(class Slide extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"sld\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the common data of the slide\r\n     */\r\n    get commonData() {\r\n        let cSld = this.childOne(CommonSlideData);\r\n        if (!cSld) {\r\n            cSld = this.createElement(CommonSlideData);\r\n            cSld && this.appendChild(cSld);\r\n        }\r\n        return cSld;\r\n    }\r\n});","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualPropertiesBase } from \"./nonVisualPropertiesBase\";\r\n\r\n/**\r\n * class of the nonvisual properties of the shape, element with tag \"nvSpPr\"\r\n * @class NonVisualShapeProperties\r\n */\r\nexport const NonVisualShapeProperties = OpenXmlElement.register(class NonVisualShapeProperties extends NonVisualPropertiesBase {\r\n    //#region override the key inforamtion\r\n    static LocalName = \"nvSpPr\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n});","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualPropertiesBase } from \"./nonVisualPropertiesBase\";\r\n\r\n/**\r\n * class of the nonvisual properties of the picture, element with tag \"nvPicPr\"\r\n * @class NonVisualPictureProperties\r\n */\r\nexport const NonVisualPictureProperties = OpenXmlElement.register(class NonVisualPictureProperties extends NonVisualPropertiesBase {\r\n    //#region override the key information\r\n    static LocalName = \"nvPicPr\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n});","import { GroupShapeBase } from \"./groupShapeBase\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the shape's group, element with tag \"grpSp\"\r\n * @class GroupShape\r\n */\r\nexport const GroupShape = OpenXmlElement.register(class GroupShape extends GroupShapeBase {\r\n    //#region override the key information\r\n    static LocalName = \"grpSp\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n    \r\n});","export const main = \"http://schemas.openxmlformats.org/drawingml/2006/main\";","import { OpenXmlElement } from \"../../../basic\";\r\nimport { main as mainURI } from \"./namespaceURI\";\r\n\r\n/**\r\n * basic class of all element defined in drawing2006\r\n */\r\nexport default class Drawing2006 extends OpenXmlElement {\r\n    //#region override the key information\r\n    static NamespaceUri = mainURI;\r\n    static DefaultPrefix = \"a\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n}\r\n","import Drawing2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n//#region a:t\r\n/**\r\n * class of the element with tag \"a:t\"\r\n * @class Text\r\n */\r\nexport const Text = OpenXmlElement.register(class Text extends Drawing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"t\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n});\r\n//#endregion\r\n\r\n//#region a:r\r\n/**\r\n * class of the element with tag \"a:r\"\r\n * @class Run\r\n */\r\nexport const Run = OpenXmlElement.register(class Run extends Drawing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"r\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get all text in the element\r\n     */\r\n    get textContent() {\r\n        const items = this.descendants(Text).map(text => text.textContent);\r\n        \r\n        return items.join(\"\");\r\n    }\r\n});\r\n//#endregion\r\n\r\n//#region a:p\r\n/**\r\n * class of element with tag \"a:p\"\r\n * @class Paragraph\r\n */\r\nexport const Paragraph = OpenXmlElement.register(class Paragraph extends Drawing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"p\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get all text in the element\r\n     */\r\n    get textContent() {\r\n        const items = this.descendants(Text).map(text => text.textContent);\r\n        \r\n        return items.join(\"\");\r\n    }\r\n});\r\n//#endregion\r\n\r\n//#region a:txBody\r\n/**\r\n * class of element with tag \"a:txBody\"\r\n * @class TextBody\r\n */\r\nexport const TextBody = OpenXmlElement.register(class TextBody extends Drawing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"txBody\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get all text in the element\r\n     */\r\n    get textContent() {\r\n        const items = this.descendants(Paragraph).map(p => p.textContent);\r\n        \r\n        return items.join(\"\\r\\n\");\r\n    }\r\n});\r\n//#endregion\r\n","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualShapeProperties } from \"./nonVisualShapeProperties\";\r\nimport { VisualSlideObject } from \"./visualSlideObject\";\r\nimport { TextBody } from \"../../drawing\";\r\n\r\n/**\r\n * class of the shape, element with tag \"sp\"\r\n */\r\nexport const Shape = OpenXmlElement.register(class Shape extends VisualSlideObject {\r\n    //#region override the key information\r\n    static LocalName = \"sp\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the nonvisual properties\r\n     */\r\n    get nonVisualProperties() {\r\n        let pr = this.childOne(NonVisualShapeProperties);\r\n        if (!pr) {\r\n            pr = this.createElement(NonVisualShapeProperties);\r\n            pr && this.appendChild(pr);\r\n        }\r\n        return pr;\r\n    }\r\n\r\n    /**\r\n     * get the text body object\r\n     */\r\n    get textBody() {\r\n        return this.childOne(TextBody);\r\n    }\r\n});","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualPictureProperties } from \"./nonVisualPictureProperties\";\r\nimport { VisualSlideObject } from \"./visualSlideObject\";\r\n\r\n/**\r\n * class of the picture, element with tag \"pic\"\r\n * @class Picture\r\n */\r\nexport const Picture = OpenXmlElement.register(class Picture extends VisualSlideObject {\r\n    //#region override the key information\r\n    static LocalName = \"pic\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get the nonvisual properties\r\n     */\r\n    get nonVisualProperties() {\r\n        let pr = this.childOne(NonVisualPictureProperties);\r\n        if (!pr) {\r\n            pr = this.createElement(NonVisualPictureProperties);\r\n            pr && this.appendChild(pr);\r\n        }\r\n        return pr;\r\n    }\r\n});","import { readonly, error, genRandId } from \"../../../common\";\r\nimport { OpenXmlElement, OpenXmlPart, OpenXmlPurePart } from \"../../basic\";\r\nimport { presentation as presentationSchemas, office as officeSchemas }  from \"../../elements\";\r\nimport path from \"path\";\r\n\r\nconst assert = error.assert;\r\n\r\n//#region inner class\r\n\r\n//#region class of SlideSet\r\nconst $slideAvalidID = Symbol(\"SlideSet.avalidID\");\r\n/**\r\n * Class of operating the set of the slides\r\n */\r\nclass SlideSet {\r\n    /**\r\n     * the minimum ID\r\n     */\r\n    static MIN_ID = 256;\r\n    /**\r\n     * the maximum ID\r\n     */\r\n    static MAX_ID = 0x0ffffffff;\r\n\r\n    /**\r\n     * constructor\r\n     * @param {Presentation} _presentation the presentation part\r\n     */\r\n    constructor (_parent) {\r\n        assert(_parent instanceof PresentationPart, \"_parent(an instance of PresentationPart)\");\r\n        \r\n        readonly(this, \"selfElement\", _parent.presentation.slideIdList);\r\n        readonly(this, \"parent\", _parent);\r\n        this.arrangeId();\r\n    }\r\n\r\n    /**\r\n     * arrange the id of all slides\r\n     * the new set of id will start from MIN_ID\r\n     */\r\n    arrangeId() {\r\n        const totalNode = this.parent.contentDom.primaryNode;\r\n        let id = SlideSet.MIN_ID;\r\n        for (let { slideId } of this.selfElement.items()) {\r\n            const oriId = slideId.id;\r\n            const relElements = totalNode.xpathSelect(`.//*[local-name(.)='sldId' and @id='${oriId}']`);\r\n            for (let relIdx in relElements) {\r\n                relElements[relIdx].setAttribute(\"id\", id);\r\n            }\r\n            id++;\r\n        }\r\n        this[$slideAvalidID] = id;\r\n    }\r\n\r\n    /**\r\n     * the count of the slides\r\n     */\r\n    get count() {\r\n        return this.selfElement.count;\r\n    }\r\n\r\n    /**\r\n     * get a slide by the index in the slide set\r\n     * @param {Number} _index the index of the slide in the slide set\r\n     */\r\n    getByIndex(_index) {\r\n        const sldIdNode = this.selfElement.children(presentationSchemas.SlideId)[_index];\r\n        if (sldIdNode) {\r\n            return this.parent.getRelationPart(sldIdNode.relationshipId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get an iterator of all slides\r\n     */\r\n    * slides() {\r\n        const parent = this.parent;\r\n        for (let { index, slideId } of this.selfElement.items()) {\r\n            yield {\r\n                index,\r\n                getter: parent.getRelationPart(slideId.relationshipId),\r\n                id: slideId.id\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * enumerate each slide and pass to the callback function to process\r\n     * @param {Function} _cb the callback function\r\n     */\r\n    async each(_cb) {\r\n        if (typeof _cb === \"function\") {\r\n            const parent = this.parent;\r\n            for (let { index, slideId } of this.selfElement.items()) {\r\n                const slidePart = await parent.getRelationPart(slideId.relationshipId);\r\n                const cbRet = _cb(index, slidePart);\r\n                (cbRet instanceof Promise) && await cbRet;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * insert a slide\r\n     * @param {*} _positionSlide    表示插入位置的胶片，新胶片将插入到此胶片之后，可以是胶片顺序号、胶片关系ID、胶片部件\r\n     *                              如果输入的是undefined，则将新胶片添加到最后\r\n     *                              如果输入的是-1，则表示将新胶片添加到第一张\r\n     * @param {*} _targetSlide      新胶片的部件，如果不输入该参数，则复制_positionSlide表示的胶片为新胶片\r\n     */\r\n    async insert(_positionSlide, _targetSlide) {\r\n        const parent = this.parent;\r\n\r\n        // get a valid id for new slide.\r\n        // if there is no valid id, try once after arranging.\r\n        let useId = this[$slideAvalidID];\r\n        if (useId > SlideSet.MAX_ID) {\r\n            this.arrangeId();\r\n            useId = this[$slideAvalidID];\r\n        }\r\n        assert(useId <= SlideSet.MAX_ID, error.NO_ENOUGH_ID);\r\n\r\n        // check the new slide must be in the same package of the slide set\r\n        assert((!_targetSlide) || parent.inSamePackage(_targetSlide), error.FROM_OTHER_PACKAGE(\"_targetSlide\"));\r\n\r\n        // looking for the relationship ID of the position slide\r\n        let relSlideId = undefined;\r\n        if (typeof _positionSlide === \"number\") {\r\n            const slideIdSet = this.selfElement.children(presentationSchemas.SlideId);\r\n            relSlideId = slideIdSet[_positionSlide < 0 ? 0 : (_positionSlide >= slideIdSet.length ? (slideIdSet.length - 1) : _positionSlide)];\r\n        } else if (typeof _positionSlide === \"string\") {\r\n            relSlideId = this.selfElement.childOne(officeSchemas.AttrRelationshipId, `and string(.)='${_positionSlide}'`);\r\n        } else if (parent.inSamePackage(_positionSlide)) {\r\n            relSlideId = this.selfElement.childOne(officeSchemas.AttrRelationshipId, `and string(.)='${_positionSlide.relationID}'`);\r\n        }\r\n\r\n        if (!_targetSlide) {\r\n            if (relSlideId) {\r\n                // if the target slide is unspecified, duplicate the position slide as a new one\r\n                const refSlidePart = await parent.getRelationPart(relSlideId.relationshipId);\r\n                const fileExtName = path.extname(refSlidePart.path);\r\n                const fileName = path.basename(refSlidePart.path, fileExtName).replace(/\\d$/, \"\") + genRandId() + fileExtName;\r\n                const filePath = path.dirname(refSlidePart.path);\r\n                _targetSlide = await refSlidePart.duplicate(path.join(filePath, fileName));\r\n            } else {\r\n                // if both the target slide and position slide are unspecified, create an empty slide\r\n                // TODO: this is no implementation.\r\n                throw error.NO_IMPLEMENT();\r\n            }\r\n        }\r\n        assert(_targetSlide, error.LOCATE_RESOURCE_FAIL(\"target slide part\"));\r\n\r\n        // insert the target slide\r\n        const rid = parent.insertRelationPart(_targetSlide);\r\n        const newId = this.selfElement.createElement(presentationSchemas.SlideId);\r\n        assert(newId, error.ACQUIRE_RESOURCE_FAIL(\"SlideId Node\"));\r\n        newId.id = useId;\r\n        newId.relationshipId = rid;\r\n        relSlideId\r\n            ? relSlideId.insertAsSibling(newId, (typeof _positionSlide === \"number\") && (_positionSlide < 0))\r\n            : this.selfElement.appendChild(newId);\r\n        this[$slideAvalidID]++;\r\n        parent.commit();\r\n        return rid;\r\n    }\r\n}\r\n//#endregion\r\n\r\n//#endregion\r\n\r\n/**\r\n * Class of operating the presentation part\r\n * @class PresentationPart\r\n */\r\nexport const PresentationPart = OpenXmlPart.register(class PresentationPart extends OpenXmlPurePart {\r\n    //#region override the shemas infomation and so on\r\n    static SchemasURI = \"http://schemas.openxmlformats.org/presentationml/2006/main\";\r\n    static ContentType = \"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\";\r\n    //#endregion\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} _opt \r\n     */\r\n    constructor(_opt) {\r\n        super(_opt);\r\n        readonly(this, \"presentation\", this.primaryElement);\r\n        readonly(this, \"slideSet\", new SlideSet(this));\r\n    }\r\n});","import { readonly, error } from \"../../../common\";\r\nimport { OpenXmlElement, OpenXmlPart, OpenXmlPurePart } from \"../../basic\";\r\nimport { presentation, office, drawing }  from \"../../elements\";\r\n\r\n/**\r\n * class of the slide part\r\n * @class SlidePart\r\n */\r\nexport const SlidePart = OpenXmlPart.register(class SlidePart extends OpenXmlPurePart {\r\n    //#region override the key information\r\n    static SchemasURI = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/slide\";\r\n    static ContentType = \"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\";\r\n    //#endregion\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} _opt \r\n     */\r\n    constructor(_opt) {\r\n        super(_opt);\r\n        let slideElement = this.primaryElement;\r\n        if (!(slideElement instanceof presentation.Slide)) {\r\n            slideElement = presentation.Slide.createElement(this.dom);\r\n            slideElement && this.dom.appendChild(slideElement.node);\r\n        }\r\n        readonly(this, \"slide\", slideElement);\r\n    }\r\n\r\n});"],"names":["setPrototypeOf","assertThisInitialized","isNativeReflectConstruct","isNativeFunction","construct","getPrototypeOf","$errorId","Symbol","OxjsError","_id","_msg","Number","Error","Exception","_message","NO_IMPLEMENT","_tip","EXPECT_PARAM","XML_PARSE_FAIL","NO_ENOUGH_ID","FROM_OTHER_PACKAGE","LOCATE_NODE_FAIL","LOCATE_RESOURCE_FAIL","ACQUIRE_RESOURCE_FAIL","assert","_cond","_error","NaN","NoImplemented","tip","$parent","$node","readonly","_obj","_keyOrMap","_value","arguments","length","Object","defineProperty","value","writable","key","genRandId","_prefix","_radix","Date","now","toString","Math","random","substr","IDom","_expression","_isSingle","error","_xmlString","require$$0","IZip","_file","_format","_content","IApplication","CONTENTTYPE_PATH","EMPTY_CONTENTTYPE_XML","OpenXmlPackage","application","zip","_contentTypeXML","contentTypes","DOM","parse","setFile","save","_path","_data","_contentType","dom","partName","replace","xpathSelect","typeDesc","setAttribute","newItem","createElement","appendChild","getFile","_extension","_type","open","_app","_package","isPrototypeOf","ZIP","load","contentTypeXML","isPackage","extern","item","prototype","registedParts","EMPTY_RELATIONSHRIP_XML","OpenXmlPart","_partPath","partDir","path","dirname","partFileName","basename","join","_opt","OpenPackage","String","relationshipPath","getRelationshipPath","ContentFormat","content","relationshipXML","opt","assign","_part","_partClass","SchemasURI","relationshipDom","pkg","constructor","ContentType","targetPackage","_idOrClass","rels","nodeSel","typeAttr","getAttribute","targetPath","isAbsolute","ctor","part","relationshipId","targetRelPath","relative","rid","relNode","primaryNode","_class","nodeList","curDir","index","node","type","target","undefined","OpenXmlBinaryPart","OpenXmlAttribute","_localName","_nsURI","_defPrefix","defineProperties","localName","defaultPrefix","namespaceUri","options","_node","prefix","lookupPrefix","_val","fn","checker","ns","getAttributeNS","qualifiedName","adjustValue","setAttributeNS","removeAttributeNS","removeAttribute","registedElements","OpenXmlElement","_arg","selectExp","genXPath","nodes","map","instanced","nodeType","ownerElement","_exSelector","_element","_before","refNode","parent","parentNode","insertBefore","nextSibling","_elementClass","ownerDocument","removeChild","_attr","setValue","getValue","remove","nodeName","textContent","name","NamespaceUri","LocalName","DefaultPrefix","singleTagName","prefixName","namespaceURI","_dom","_parentElement","createElementNS","element","createDetail","_custom","xpath","OpenXmlPurePart","contentDom","relationship","AttrRelationshipId","AttrEmbed","main","Presentation2006","mainURI","SlideId","register","id","utility","isNaN","Presentations2006","SlideIdList","list","children","slideId","Presentation","NonVisualDrawingProperties","NonVisualPropertiesBase","pr","childOne","description","NonVisualGroupShapeProperties","VisualSlideObject","GroupShapeBase","idx","ShapeTree","CommonSlideData","tree","Slide","cSld","NonVisualShapeProperties","NonVisualPictureProperties","GroupShape","Drawing2006","Text","Run","items","descendants","text","Paragraph","TextBody","p","Shape","Picture","$slideAvalidID","SlideSet","_parent","PresentationPart","presentation","slideIdList","arrangeId","totalNode","MIN_ID","selfElement","oriId","relElements","relIdx","_index","sldIdNode","presentationSchemas","getRelationPart","getter","_cb","slidePart","cbRet","Promise","_positionSlide","_targetSlide","useId","MAX_ID","inSamePackage","relSlideId","slideIdSet","officeSchemas","relationID","refSlidePart","fileExtName","extname","fileName","filePath","duplicate","insertRelationPart","newId","insertAsSibling","commit","count","primaryElement","SlidePart","slideElement"],"mappings":";;;;;;;;;AAAe,SAAS,eAAe,CAAC,QAAQ,EAAE,WAAW,EAAE;AAC/D,EAAE,IAAI,EAAE,QAAQ,YAAY,WAAW,CAAC,EAAE;AAC1C,IAAI,MAAM,IAAI,SAAS,CAAC,mCAAmC,CAAC,CAAC;AAC7D,GAAG;AACH;;ACJA,SAAS,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE;AAC1C,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,IAAI,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9B,IAAI,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,KAAK,CAAC;AAC3D,IAAI,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;AACnC,IAAI,IAAI,OAAO,IAAI,UAAU,EAAE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC1D,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAC9D,GAAG;AACH,CAAC;AACD;AACe,SAAS,YAAY,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE;AAC3E,EAAE,IAAI,UAAU,EAAE,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACvE,EAAE,IAAI,WAAW,EAAE,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AAC/D,EAAE,OAAO,WAAW,CAAC;AACrB;;ACde,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC9C,EAAE,eAAe,GAAG,MAAM,CAAC,cAAc,IAAI,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;AAC5E,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;AACpB,IAAI,OAAO,CAAC,CAAC;AACb,GAAG,CAAC;AACJ;AACA,EAAE,OAAO,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B;;ACNe,SAAS,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE;AACxD,EAAE,IAAI,OAAO,UAAU,KAAK,UAAU,IAAI,UAAU,KAAK,IAAI,EAAE;AAC/D,IAAI,MAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;AAC9E,GAAG;AACH;AACA,EAAE,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,SAAS,EAAE;AACzE,IAAI,WAAW,EAAE;AACjB,MAAM,KAAK,EAAE,QAAQ;AACrB,MAAM,QAAQ,EAAE,IAAI;AACpB,MAAM,YAAY,EAAE,IAAI;AACxB,KAAK;AACL,GAAG,CAAC,CAAC;AACL,EAAE,IAAI,UAAU,EAAEA,eAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AACvD;;ACde,SAAS,OAAO,CAAC,GAAG,EAAE;AACrC,EAAE,yBAAyB,CAAC;AAC5B;AACA,EAAE,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,QAAQ,EAAE;AAC3E,IAAI,OAAO,GAAG,SAAS,OAAO,CAAC,GAAG,EAAE;AACpC,MAAM,OAAO,OAAO,GAAG,CAAC;AACxB,KAAK,CAAC;AACN,GAAG,MAAM;AACT,IAAI,OAAO,GAAG,SAAS,OAAO,CAAC,GAAG,EAAE;AACpC,MAAM,OAAO,GAAG,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,GAAG,CAAC,WAAW,KAAK,MAAM,IAAI,GAAG,KAAK,MAAM,CAAC,SAAS,GAAG,QAAQ,GAAG,OAAO,GAAG,CAAC;AACnI,KAAK,CAAC;AACN,GAAG;AACH;AACA,EAAE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;AACtB;;ACde,SAAS,sBAAsB,CAAC,IAAI,EAAE;AACrD,EAAE,IAAI,IAAI,KAAK,KAAK,CAAC,EAAE;AACvB,IAAI,MAAM,IAAI,cAAc,CAAC,2DAA2D,CAAC,CAAC;AAC1F,GAAG;AACH;AACA,EAAE,OAAO,IAAI,CAAC;AACd;;ACJe,SAAS,0BAA0B,CAAC,IAAI,EAAE,IAAI,EAAE;AAC/D,EAAE,IAAI,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,UAAU,CAAC,EAAE;AAC1E,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA,EAAE,OAAOC,sBAAqB,CAAC,IAAI,CAAC,CAAC;AACrC;;ACRe,SAAS,eAAe,CAAC,CAAC,EAAE;AAC3C,EAAE,eAAe,GAAG,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,GAAG,SAAS,eAAe,CAAC,CAAC,EAAE;AAChG,IAAI,OAAO,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AACnD,GAAG,CAAC;AACJ,EAAE,OAAO,eAAe,CAAC,CAAC,CAAC,CAAC;AAC5B;;ACLe,SAAS,iBAAiB,CAAC,EAAE,EAAE;AAC9C,EAAE,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;AACpE;;ACFe,SAAS,yBAAyB,GAAG;AACpD,EAAE,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,KAAK,CAAC;AACzE,EAAE,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,KAAK,CAAC;AAC3C,EAAE,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE,OAAO,IAAI,CAAC;AAC/C;AACA,EAAE,IAAI;AACN,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;AAC9E,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG;AACH;;ACTe,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AACxD,EAAE,IAAIC,yBAAwB,EAAE,EAAE;AAClC,IAAI,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;AACnC,GAAG,MAAM;AACT,IAAI,UAAU,GAAG,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AAC1D,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACrB,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC5B,MAAM,IAAI,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACvD,MAAM,IAAI,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;AACvC,MAAM,IAAI,KAAK,EAAEF,eAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;AAC3D,MAAM,OAAO,QAAQ,CAAC;AACtB,KAAK,CAAC;AACN,GAAG;AACH;AACA,EAAE,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC3C;;ACbe,SAAS,gBAAgB,CAAC,KAAK,EAAE;AAChD,EAAE,IAAI,MAAM,GAAG,OAAO,GAAG,KAAK,UAAU,GAAG,IAAI,GAAG,EAAE,GAAG,SAAS,CAAC;AACjE;AACA,EAAE,gBAAgB,GAAG,SAAS,gBAAgB,CAAC,KAAK,EAAE;AACtD,IAAI,IAAI,KAAK,KAAK,IAAI,IAAI,CAACG,iBAAgB,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC;AACjE;AACA,IAAI,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;AACrC,MAAM,MAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;AAChF,KAAK;AACL;AACA,IAAI,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;AACvC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACtD;AACA,MAAM,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACjC,KAAK;AACL;AACA,IAAI,SAAS,OAAO,GAAG;AACvB,MAAM,OAAOC,UAAS,CAAC,KAAK,EAAE,SAAS,EAAEC,eAAc,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC;AAC3E,KAAK;AACL;AACA,IAAI,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE;AACvD,MAAM,WAAW,EAAE;AACnB,QAAQ,KAAK,EAAE,OAAO;AACtB,QAAQ,UAAU,EAAE,KAAK;AACzB,QAAQ,QAAQ,EAAE,IAAI;AACtB,QAAQ,YAAY,EAAE,IAAI;AAC1B,OAAO;AACP,KAAK,CAAC,CAAC;AACP,IAAI,OAAOL,eAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1C,GAAG,CAAC;AACJ;AACA,EAAE,OAAO,gBAAgB,CAAC,KAAK,CAAC,CAAC;AACjC;;;;;;ACpCA,IAAMM,QAAQ,GAAGC,MAAM,CAAC,mBAAD,CAAvB;AAEA;;;;IAGaC,SAAb;AAAA;;AAAA;;AACI,qBAAYC,GAAZ,EAAiBC,IAAjB,EAAuB;AAAA;;AAAA;;AACnB,8BAAMA,IAAN;AACA,UAAKJ,QAAL,IAAiBK,MAAM,CAACF,GAAD,CAAvB;AAFmB;AAGtB;AAED;;;;;AANJ;AAAA;AAAA,wBASkB;AACV,aAAO,KAAKH,QAAL,CAAP;AACH;AAXL;;AAAA;AAAA,iCAA+BM,KAA/B;AAcA;;;;;;AAKO,SAASC,SAAT,CAAmBJ,GAAnB,EAAwBK,QAAxB,EAAkC;AACrC,SAAO,IAAIN,SAAJ,CAAcC,GAAd,EAAmBK,QAAnB,CAAP;AACH;AAED;;;;AAGO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC/B,SAAOH,SAAS,CAAC,CAAD,EAAIG,IAAI,aAAMA,IAAN,iCAAwC,uDAAhD,CAAhB;AACH;AACD;;;;;AAIO,SAASC,YAAT,CAAsBD,IAAtB,EAA4B;AAC/B,SAAOH,SAAS,CAAC,CAAD,EAAIG,IAAI,2BAAoBA,IAApB,IAA6B,8BAArC,CAAhB;AACH;AAED;;;;;AAIO,SAASE,cAAT,CAAwBF,IAAxB,EAA8B;AACjC,SAAOH,SAAS,CAAC,CAAD,EAAIG,IAAI,qCAA6BA,IAA7B,UAAuC,mBAA/C,CAAhB;AACH;AAED;;;;AAGO,IAAMG,YAAY,GAAGN,SAAS,CAAC,CAAD,EAAI,cAAJ,CAA9B;AAEP;;;;;AAIO,SAASO,kBAAT,CAA4BJ,IAA5B,EAAkC;AACrC,SAAOH,SAAS,CAAC,CAAD,EAAIG,IAAI,wBAAgBA,IAAhB,uCAAuD,sCAA/D,CAAhB;AACH;AAED;;;;AAGO,SAASK,gBAAT,CAA0BL,IAA1B,EAAgC;AACnC,SAAOH,SAAS,CAAC,CAAD,EAAIG,IAAI,qCAA8BA,IAA9B,uBAAsD,uCAA9D,CAAhB;AACH;AAED;;;;AAGO,SAASM,oBAAT,CAA8BN,IAA9B,EAAoC;AACxC,SAAOH,SAAS,CAAC,CAAD,EAAIG,IAAI,wDAAiDA,IAAjD,IAA0D,2CAAlE,CAAhB;AACF;AAED;;;;;AAIO,SAASO,qBAAT,CAA+BP,IAA/B,EAAqC;AACxC,SAAOH,SAAS,CAAC,CAAD,EAAIG,IAAI,uCAAgCA,IAAhC,IAAyC,0BAAjD,CAAhB;AACH;AAED;;;;;;AAKO,SAASQ,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+B;AAClC,MAAI,CAACD,KAAL,EAAY;AACR,UAAMC,MAAM,IAAI,IAAIlB,SAAJ,CAAcmB,GAAd,EAAmB,QAAnB,CAAhB;AACH;;AACD,SAAOF,KAAP;AACH;AAED;;;;;;AAKO,SAASG,aAAT,CAAuBZ,IAAvB,EAA6B;AAChC,QAAMD,YAAY,CAACc,GAAD,CAAlB;AACH;;;;;;;;;;;;;;;;;;ACxGD;;;AAGO,IAAMC,OAAO,GAAGvB,MAAM,CAAC,SAAD,CAAtB;AAEP;;;;AAGO,IAAMwB,KAAK,GAAGxB,MAAM,CAAC,OAAD,CAApB;;;;;;;;ACRP;;;;;;AAMO,SAASyB,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,MAAnC,EAA2C;AAC9C,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACtBC,IAAAA,MAAM,CAACC,cAAP,CAAsBN,IAAtB,EAA4BC,SAA5B,EAAuC;AACnCM,MAAAA,KAAK,EAAEL,MAD4B;AAEnCM,MAAAA,QAAQ,EAAE;AAFyB,KAAvC;AAIH,GALD,MAKO;AACH,SAAI,IAAIC,GAAR,IAAeR,SAAf,EAA0B;AACtBI,MAAAA,MAAM,CAACC,cAAP,CAAsBN,IAAtB,EAA4BS,GAA5B,EAAiC;AAC7BF,QAAAA,KAAK,EAAEN,SAAS,CAACQ,GAAD,CADa;AAE7BD,QAAAA,QAAQ,EAAE;AAFmB,OAAjC;AAIH;AACJ;AACJ;;ACpBD;;;;;AAKO,SAASE,SAAT,CAAmBC,OAAnB,EAA4BC,MAA5B,EAAoC;AACvC,mBAAUD,OAAO,IAAI,EAArB,SAA0BE,IAAI,CAACC,GAAL,GAAWC,QAAX,CAAoBH,MAApB,CAA1B,SAAwDI,IAAI,CAACC,MAAL,GAAcF,QAAd,CAAuBH,MAAvB,EAA+BM,MAA/B,CAAsC,CAAtC,EAAwC,CAAxC,CAAxD;AACH;;ICLYC,IAAb;AACI,kBAAe;AAAA;AAAE;;AADrB;AAAA;AAAA,gCAOgBC,WAPhB,EAO6BC,SAP7B,EAOwC;AAChCC,MAAAA,aAAA,CAAA;AACH;AATL;AAAA;AAAA,oCAWoB;AACZA,MAAAA,aAAA,CAAA;AACH;AAbL;AAAA;AAAA,sCAesB;AACdA,MAAAA,aAAA,CAAA;AACH;AAjBL;AAAA;AAAA,wBAGsB;AACdA,MAAAA,aAAA,CAAA;AACH;AALL;AAAA;AAAA,0BAmBiBC,UAnBjB,EAmB6B;AACrBD,MAAAA,aAAA,CAAA;AACH;AArBL;AAAA;AAAA,kCAuByBtB,IAvBzB,EAuB+B;AACvBsB,MAAAA,aAAA,CAAA;AACH;AAzBL;;AAAA;AAAA;;ACFA,eAAc,GAAGE,kBAA8B;;ACA/C,SAAS,kBAAkB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE;AAC3E,EAAE,IAAI;AACN,IAAI,IAAI,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7B,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC3B,GAAG,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;AAClB,IAAI,OAAO;AACX,GAAG;AACH;AACA,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE;AACjB,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;AACnB,GAAG,MAAM;AACT,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAC/C,GAAG;AACH,CAAC;AACD;AACe,SAAS,iBAAiB,CAAC,EAAE,EAAE;AAC9C,EAAE,OAAO,YAAY;AACrB,IAAI,IAAI,IAAI,GAAG,IAAI;AACnB,QAAQ,IAAI,GAAG,SAAS,CAAC;AACzB,IAAI,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;AAClD,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACrC;AACA,MAAM,SAAS,KAAK,CAAC,KAAK,EAAE;AAC5B,QAAQ,kBAAkB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC/E,OAAO;AACP;AACA,MAAM,SAAS,MAAM,CAAC,GAAG,EAAE;AAC3B,QAAQ,kBAAkB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;AAC9E,OAAO;AACP;AACA,MAAM,KAAK,CAAC,SAAS,CAAC,CAAC;AACvB,KAAK,CAAC,CAAC;AACP,GAAG,CAAC;AACJ;;IChCaC,IAAb;AACI,kBAAc;AAAA;AAAG;;AADrB;AAAA;AAAA;AAAA,uFAGkBC,KAHlB,EAGyBC,OAHzB;AAAA;AAAA;AAAA;AAAA;AAIQL,gBAAAA,aAAA,CAAA;;AAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BAOYI,KAPZ,EAOmBE,QAPnB,EAO6BD,OAP7B,EAOsC;AAC9BL,MAAAA,aAAA,CAAA;AACH;AATL;AAAA;AAAA;AAAA,qFAWeI,KAXf;AAAA;AAAA;AAAA;AAAA;AAYQJ,gBAAAA,aAAA,CAAA;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBQA,gBAAAA,aAAA,CAAA;;AAhBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;ACFe,SAAS,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;AACzD,EAAE,IAAI,GAAG,IAAI,GAAG,EAAE;AAClB,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE;AACpC,MAAM,KAAK,EAAE,KAAK;AAClB,MAAM,UAAU,EAAE,IAAI;AACtB,MAAM,YAAY,EAAE,IAAI;AACxB,MAAM,QAAQ,EAAE,IAAI;AACpB,KAAK,CAAC,CAAC;AACP,GAAG,MAAM;AACT,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACrB,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb;;ACXA;;;;IAGaO,YAAb,GACI,wBAAe;AAAA;AAAE;AAEjB;;;;;gBAHSA,qBAMIJ;;gBANJI,qBAWIV;;ACbjB,IAAM5B,QAAM,GAAG+B,MAAf;AAEA,IAAMQ,gBAAgB,GAAG,qBAAzB;AACA,IAAMC,qBAAqB,GAAG,8IAA9B;AAEA;;;;IAGMC;AACF;;;;;;AAMA,0BAAaC,WAAb,EAA0BC,GAA1B,EAA+BC,eAA/B,EAAgD;AAAA;;AAC5CpC,IAAAA,QAAQ,CAAC,IAAD,EAAO;AACXkC,MAAAA,WAAW,EAAXA,WADW;AAEXC,MAAAA,GAAG,EAAHA,GAFW;AAGXE,MAAAA,YAAY,EAAEH,WAAW,CAACI,GAAZ,CAAgBC,KAAhB,CAAsBH,eAAe,IAAIJ,qBAAzC;AAHH,KAAP,CAAR;AAKH;AAED;;;;;;;2BAGO;AACH,UAAMG,GAAG,GAAG,KAAKA,GAAjB;AACAA,MAAAA,GAAG,CAACK,OAAJ,CAAYT,gBAAZ,EAA8B,KAAKM,YAAL,CAAkBrB,QAAlB,EAA9B;AACA,aAAOmB,GAAG,CAACM,IAAJ,EAAP;AACH;AAED;;;;;;;AAMA;;;;;;;;;;;4BAQQC,OAAOC,OAAOf,SAASgB,cAAc;AACzC,WAAKT,GAAL,CAASK,OAAT,CAAiBE,KAAjB,EAAwBC,KAAxB,EAA+Bf,OAA/B;;AACA,UAAIgB,YAAJ,EAAkB;AACd,YAAMC,GAAG,GAAG,KAAKR,YAAjB;AACA,YAAMS,QAAQ,GAAG,WAAIJ,KAAJ,EAAYK,OAAZ,CAAoB,MAApB,EAA4B,GAA5B,CAAjB;AACA,YAAMV,YAAY,GAAG7C,QAAM,CAACqD,GAAG,CAACG,WAAJ,CAAgB,4BAAhB,EAA8C,IAA9C,CAAD,EACCzB,gBAAA,CAAuB,8BAAvB,CADD,CAA3B;AAEA,YAAM0B,QAAQ,GAAGZ,YAAY,CAACW,WAAb,uDAAwEF,QAAxE,SAAsF,IAAtF,CAAjB;;AACA,YAAIG,QAAJ,EAAc;AACVA,UAAAA,QAAQ,CAACC,YAAT,CAAsB,aAAtB,EAAqCN,YAArC;AACH,SAFD,MAEO;AACH,cAAMO,OAAO,GAAG3D,QAAM,CAACqD,GAAG,CAACO,aAAJ,CAAkB,UAAlB,CAAD,EACC7B,qBAAA,CAA4B,gCAA5B,CADD,CAAtB;AAEA4B,UAAAA,OAAO,CAACD,YAAR,CAAqB,aAArB,EAAoCN,YAApC;AACAO,UAAAA,OAAO,CAACD,YAAR,CAAqB,UAArB,EAAiCJ,QAAjC;AACAT,UAAAA,YAAY,CAACgB,WAAb,CAAyBF,OAAzB;AACH;AACJ;AACJ;AAED;;;;;;;;4BAKQT,OAAOd,SAAS;AACpB,aAAO,KAAKO,GAAL,CAASmB,OAAT,CAAiBZ,KAAjB,EAAwBd,OAAxB,CAAP;AACH;AAED;;;;;;;;qCAKiB2B,YAAYC,OAAO;AAChC,UAAMX,GAAG,GAAG,KAAKR,YAAjB;AACA,UAAMA,YAAY,GAAG7C,QAAM,CAACqD,GAAG,CAACG,WAAJ,CAAgB,4BAAhB,EAA8C,IAA9C,CAAD,EACCzB,gBAAA,CAAuB,8BAAvB,CADD,CAA3B;AAEAgC,MAAAA,UAAU,GAAGA,UAAU,CAACR,OAAX,CAAmB,KAAnB,EAA0B,EAA1B,CAAb;AACA,UAAME,QAAQ,GAAGZ,YAAY,CAACW,WAAb,uDAAwEO,UAAxE,SAAwF,IAAxF,CAAjB;;AACA,UAAIN,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACC,YAAT,CAAsB,aAAtB,EAAqCM,KAArC;AACH,OAFD,MAEO;AACH,YAAML,OAAO,GAAG3D,QAAM,CAAEqD,GAAG,CAACO,aAAJ,CAAkB,SAAlB,CAAF,EACE7B,qBAAA,CAA4B,+BAA5B,CADF,CAAtB;AAEA4B,QAAAA,OAAO,CAACD,YAAR,CAAqB,aAArB,EAAoCM,KAApC;AACAL,QAAAA,OAAO,CAACD,YAAR,CAAqB,WAArB,EAAkCK,UAAlC;AACAlB,QAAAA,YAAY,CAACgB,WAAb,CAAyBF,OAAzB;AACH;AACJ;;;;;AAGL;;;;;AAGA,kBAAe;AACX;;;;;;AAMMM,EAAAA,IAPK,gBAOAC,IAPA,EAOMC,QAPN,EAOgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACnB7B,YAAY,CAAC8B,aAAb,CAA2BF,IAA3B,CADmB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEA,IAAIA,IAAI,CAACG,GAAT,EAAD,CAAiBC,IAAjB,CAAsBH,QAAtB,CAFC;;AAAA;AAEbxB,cAAAA,GAFa;;AAAA,oBAGfA,GAAG,YAAYT,IAHA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIcS,GAAG,CAACmB,OAAJ,CAAYvB,gBAAZ,CAJd;;AAAA;AAITgC,cAAAA,cAJS;AAAA,+CAKR,IAAI9B,cAAJ,CAAmByB,IAAnB,EAAyBvB,GAAzB,EAA8B4B,cAA9B,CALQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ1B,GAfU;;AAiBX;;;;AAIAC,EAAAA,SArBW,qBAqBD/D,IArBC,EAqBK;AACZ,WAAOA,IAAI,YAAYgC,cAAvB;AACH,GAvBU;;AAyBX;;;;AAIAgC,EAAAA,MA7BW,kBA6BJhE,IA7BI,EA6BE;AACT,SAAK,IAAIiE,IAAT,IAAiBjE,IAAjB,EAAuB;AACnBgC,MAAAA,cAAc,CAACkC,SAAf,CAAyBD,IAAzB,IAAiCjE,IAAI,CAACiE,IAAD,CAArC;AACH;AACJ;AAjCU,CAAf;;ACpGA,IAAM1E,QAAM,GAAG+B,MAAf;;AAGA,IAAM6C,aAAa,GAAG,EAAtB;;AAGA,IAAMC,uBAAuB,GAAG,6JAAhC;AAEA;;;;IAGaC,WAAb;AAAA;AAAA;AACI;;AAEA;;;;AAHJ,wCAO+BC,SAP/B,EAO0C;AAClC,UAAMC,OAAO,GAAGC,IAAI,CAACC,OAAL,CAAaH,SAAb,CAAhB;AACA,UAAMI,YAAY,GAAGF,IAAI,CAACG,QAAL,CAAcL,SAAd,CAArB;AACA,aAAOE,IAAI,CAACI,IAAL,CAAUL,OAAV,oBAA8BG,YAA9B,YAAmD5B,OAAnD,CAA2D,MAA3D,EAAmE,GAAnE,CAAP;AACH;AAED;;;;;;;AAbJ;AAAA;AAAA;AAAA,oFAmBsBY,QAnBtB,EAmBgCjB,KAnBhC,EAmBuCoC,IAnBvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBAoBYC,WAAW,CAACf,SAAZ,CAAsBL,QAAtB,CApBZ;AAAA;AAAA;AAAA;;AAqBkBc,gBAAAA,MArBlB,GAqByBO,MAAM,CAACtC,KAAD,CAAN,CAAcK,OAAd,CAAsB,MAAtB,EAA8B,GAA9B,EAAmCA,OAAnC,CAA2C,KAA3C,EAAkD,EAAlD,CArBzB;AAsBkBkC,gBAAAA,gBAtBlB,GAsBqCX,WAAW,CAACY,mBAAZ,CAAgCT,MAAhC,CAtBrC;AAAA;AAAA,uBAuBkCd,QAAQ,CAACL,OAAT,CAAiBmB,MAAjB,EAAuB,KAAKU,aAA5B,CAvBlC;;AAAA;AAuBkBC,gBAAAA,OAvBlB;;AAAA,qBAwBgBA,OAxBhB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAyB8CzB,QAAQ,CAACL,OAAT,CAAiB2B,gBAAjB,EAAmC,MAAnC,CAzB9C;;AAAA;AAyBsBI,gBAAAA,eAzBtB;AA0BsBC,gBAAAA,GA1BtB,GA0B4B;AACRb,kBAAAA,IAAI,EAAJA,MADQ;AAERW,kBAAAA,OAAO,EAAPA,OAFQ;AAGRH,kBAAAA,gBAAgB,EAAhBA,gBAHQ;AAIRI,kBAAAA,eAAe,EAAfA,eAJQ;AAKR,6BAAS1B;AALD,iBA1B5B;AAiCgBmB,gBAAAA,IAAI,IAAIxE,MAAM,CAACiF,MAAP,CAAcD,GAAd,EAAmBR,IAAnB,CAAR;AAjChB,iDAkCuB,IAAI,IAAJ,CAASQ,GAAT,CAlCvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuCI;;;;;;AAvCJ;AAAA;AAAA;AAAA,wFA4CyBE,KA5CzB,EA4CgCV,IA5ChC;AAAA;AAAA;AAAA;AAAA;AAAA;AA6CQtF,gBAAAA,QAAM,CAACgG,KAAK,YAAYlB,WAAlB,EAA+B/C,YAAA,CAAmB,uCAAnB,CAA/B,CAAN;AAEMkD,gBAAAA,IA/Cd,GA+CqBe,KAAK,CAACf,IA/C3B;AAgDcQ,gBAAAA,gBAhDd,GAgDiCO,KAAK,CAACP,gBAhDvC;AAAA;AAAA,uBAiD8BO,KAAK,WAAL,CAAclC,OAAd,CAAsBmB,IAAtB,EAA4B,KAAKU,aAAjC,CAjD9B;;AAAA;AAiDcC,gBAAAA,OAjDd;;AAAA,qBAkDYA,OAlDZ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAmD0CI,KAAK,WAAL,CAAclC,OAAd,CAAsB2B,gBAAtB,EAAwC,MAAxC,CAnD1C;;AAAA;AAmDkBI,gBAAAA,eAnDlB;AAoDkBC,gBAAAA,GApDlB,GAoDwB;AACRb,kBAAAA,IAAI,EAAJA,IADQ;AAERW,kBAAAA,OAAO,EAAPA,OAFQ;AAGRH,kBAAAA,gBAAgB,EAAhBA,gBAHQ;AAIRI,kBAAAA,eAAe,EAAfA,eAJQ;AAKR,6BAASG,KAAK;AALN,iBApDxB;AA2DYV,gBAAAA,IAAI,IAAIxE,MAAM,CAACiF,MAAP,CAAcD,GAAd,EAAmBR,IAAnB,CAAR;AA3DZ,kDA4DmB,IAAI,IAAJ,CAASQ,GAAT,CA5DnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgEI;;;;AAhEJ;AAAA;;AA+EI;;;;AA/EJ,6BAmFoBG,UAnFpB,EAmFgC;AACxBjG,MAAAA,QAAM,CAAC8E,WAAW,CAACV,aAAZ,CAA0B6B,UAA1B,CAAD,EAAwClE,YAAA,CAAmB,YAAnB,CAAxC,CAAN;AACA/B,MAAAA,QAAM,CAACiG,UAAU,CAACC,UAAZ,EAAwBnE,YAAA,CAAmB,uBAAnB,CAAxB,CAAN;AAEA6C,MAAAA,aAAa,CAACqB,UAAU,CAACC,UAAZ,CAAb,GAAuCD,UAAvC;AAEA,aAAOA,UAAP;AACH,KA1FL;;AAAA;;AA8FI,uBAAYX,IAAZ,EAAkB;AAAA;;AACd,QAAMQ,GAAG,GAAGR,IAAI,IAAI,EAApB;AAEAtF,IAAAA,QAAM,CAAC8F,GAAG,CAACb,IAAJ,IAAYa,GAAG,CAACF,OAAjB,EAA0B7D,YAAA,CAAmB,4BAAnB,CAA1B,CAAN;AACA/B,IAAAA,QAAM,CAAC8F,GAAG,WAAJ,EAAc/D,YAAA,CAAmB,aAAnB,CAAd,CAAN;AACA,QAAMoE,eAAe,GAAGL,GAAG,CAACD,eAAJ,IAAuBC,GAAG,WAAH,CAAYpD,WAAZ,CAAwBI,GAAxB,CAA4BC,KAA5B,CAAkC+C,GAAG,CAACD,eAAtC,CAA/C;AAEArF,IAAAA,QAAQ,CAAC,IAAD,EAAO;AACX,iBAASsF,GAAG,WADD;AAEXb,MAAAA,IAAI,EAAEa,GAAG,CAACb,IAFC;AAGXQ,MAAAA,gBAAgB,EAAEK,GAAG,CAACL;AAHX,KAAP,CAAR;AAKAU,IAAAA,eAAe,IAAI3F,QAAQ,CAAC,IAAD,EAAO;AAAE2F,MAAAA,eAAe,EAAfA;AAAF,KAAP,CAA3B;AACH,GA3GL;;AA+GI;;;;;AA/GJ;AAAA;AAAA,6BAkHa;AACL,UAAMC,GAAG,GAAG,eAAZ;;AACA,UAAIA,GAAJ,EAAS;AACL,YAAMR,OAAO,GAAG,KAAKA,OAArB;AACAA,QAAAA,OAAO,IAAIQ,GAAG,CAACpD,OAAJ,CAAY,KAAKiC,IAAjB,EAAuBW,OAAvB,EAAgC,KAAKS,WAAL,CAAiBC,WAAjD,CAAX;AACA,YAAMH,eAAe,GAAG,KAAKA,eAA7B;AACAA,QAAAA,eAAe,IAAIC,GAAG,CAACpD,OAAJ,CAAY,KAAKyC,gBAAjB,EAAmCU,eAAe,CAAC3E,QAAhB,EAAnC,EAA+D,MAA/D,CAAnB;AACH;AACJ;AAED;;;;;AA5HJ;AAAA;AAAA,kCAgIkBwE,KAhIlB,EAgIyB;AACjB,aAAOA,KAAK,IAAKA,KAAK,WAAL,KAAkB,eAAnC;AACH;AAED;;;;;;;AApIJ;AAAA;AAAA,8BA0Ic9C,KA1Id,EA0IqBiB,QA1IrB,EA0I+BmB,IA1I/B,EA0IqC;AAC7B,UAAMiB,aAAa,GAAGpC,QAAQ,IAAI,eAAlC;AACA,UAAMyB,OAAO,GAAG,KAAKA,OAArB,CAF6B;;AAI7B,UAAIA,OAAO,KAAMW,aAAa,KAAK,eAAnB,IAAqCrD,KAAK,KAAK,KAAK+B,IAAzD,CAAX,EAA4E;AACxE;AACAsB,QAAAA,aAAa,CAACvD,OAAd,CAAsBE,KAAtB,EAA6B0C,OAA7B,EAAsC,KAAKD,aAA3C,EAA0D,KAAKU,WAAL,CAAiBC,WAA3E;AACA,YAAMH,eAAe,GAAG,KAAKA,eAA7B;AACAA,QAAAA,eAAe,IAAII,aAAa,CAACvD,OAAd,CAAsB8B,WAAW,CAACY,mBAAZ,CAAgCxC,KAAhC,CAAtB,EAA8DiD,eAAe,CAAC3E,QAAhB,EAA9D,EAA0F,MAA1F,CAAnB,CAJwE;AAMxE;AACA;;AACA,eAAO,KAAK6E,WAAL,CAAiB/B,IAAjB,CAAsBiC,aAAtB,EAAqCrD,KAArC,EAA4CoC,IAA5C,CAAP;AACH;AACJ;AAED;;;;;AA1JJ;AAAA;AAAA;AAAA,gGA8J0BkB,UA9J1B;AAAA;AAAA;AAAA;AAAA;AAAA;AA+JcC,gBAAAA,IA/Jd,GA+JqB,KAAKN,eA/J1B;;AAAA,qBAgKYM,IAhKZ;AAAA;AAAA;AAAA;;AAiKkBC,gBAAAA,OAjKlB,GAiK4B5B,WAAW,CAACV,aAAZ,CAA0BoC,UAA1B,IACMC,IAAI,CAACjD,WAAL,wDAAiEgD,UAAU,CAACN,UAA5E,SAA4F,IAA5F,CADN,GAEMO,IAAI,CAACjD,WAAL,sDAA+DgD,UAA/D,SAA+E,IAA/E,CAnKlC;;AAAA,qBAoKgBE,OApKhB;AAAA;AAAA;AAAA;;AAqKsBC,gBAAAA,QArKtB,GAqKiCD,OAAO,CAACE,YAAR,CAAqB,MAArB,CArKjC;AAsKoBC,gBAAAA,UAtKpB,GAsKiCrB,MAAM,CAACkB,OAAO,CAACE,YAAR,CAAqB,QAArB,CAAD,CAAN,CAAuCrD,OAAvC,CAA+C,MAA/C,EAAuD,GAAvD,CAtKjC;AAuKgB0B,gBAAAA,IAAI,CAAC6B,UAAL,CAAgBD,UAAhB,MAAgCA,UAAU,GAAG5B,IAAI,CAACI,IAAL,CAAUJ,IAAI,CAACC,OAAL,CAAa,KAAKD,IAAlB,CAAV,EAAmC4B,UAAnC,CAA7C;AACME,gBAAAA,IAxKtB,GAwK6BnC,aAAa,CAAC+B,QAAD,CAAb,IAA2B7B,WAxKxD;AAAA;AAAA,uBAyKmCiC,IAAI,CAACzC,IAAL,CAAU,eAAV,EAAwBuC,UAAxB,CAzKnC;;AAAA;AAyKsBG,gBAAAA,IAzKtB;AA0KgBA,gBAAAA,IAAI,IAAIxG,QAAQ,CAACwG,IAAD,EAAO;AAAEC,kBAAAA,cAAc,EAAEzB,MAAM,CAACkB,OAAO,CAACE,YAAR,CAAqB,IAArB,CAAD;AAAxB,iBAAP,CAAhB;AA1KhB,kDA2KuBI,IA3KvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgLI;;;;;AAhLJ;AAAA;AAAA,uCAoLuBhB,KApLvB,EAoL8B;AACtBhG,MAAAA,QAAM,CAACgG,KAAK,YAAYlB,WAAlB,EAA+B/C,YAAA,CAAmB,OAAnB,CAA/B,CAAN;AAEA,UAAMmF,aAAa,GAAGjC,IAAI,CAACkC,QAAL,CAAclC,IAAI,CAACC,OAAL,CAAa,KAAKD,IAAlB,CAAd,EAAuCe,KAAK,CAACf,IAA7C,EAAmD1B,OAAnD,CAA2D,MAA3D,EAAmE,GAAnE,CAAtB;AACA,UAAM6D,GAAG,GAAGjG,SAAS,CAAC,GAAD,EAAM,EAAN,CAArB;AAEA,UAAIsF,IAAI,GAAG,KAAKN,eAAhB;;AACA,UAAI,CAACM,IAAL,EAAW;AACPjG,QAAAA,QAAQ,CAAC,IAAD,EAAO;AAAC2F,UAAAA,eAAe,EAAE,gBAAazD,WAAb,CAAyBI,GAAzB,CAA6BC,KAA7B,CAAmC8B,uBAAnC;AAAlB,SAAP,CAAR;AACA4B,QAAAA,IAAI,GAAG,KAAKN,eAAZ;AACH;;AAEDnG,MAAAA,QAAM,CAACyG,IAAD,EAAO1E,qBAAA,CAA4B,kBAA5B,CAAP,CAAN;AAEA,UAAMsF,OAAO,GAAGZ,IAAI,CAAC7C,aAAL,CAAmB,cAAnB,CAAhB;AACA5D,MAAAA,QAAM,CAACqH,OAAD,EAAUtF,qBAAA,CAA4B,mBAA5B,CAAV,CAAN;AAEAsF,MAAAA,OAAO,CAAC3D,YAAR,CAAqB,QAArB,EAA+BwD,aAA/B;AACAG,MAAAA,OAAO,CAAC3D,YAAR,CAAqB,MAArB,EAA6BsC,KAAK,CAACK,WAAN,CAAkBH,UAA/C;AACAmB,MAAAA,OAAO,CAAC3D,YAAR,CAAqB,IAArB,EAA2B0D,GAA3B;AACAX,MAAAA,IAAI,CAACa,WAAL,CAAiBzD,WAAjB,CAA6BwD,OAA7B;AAEA,aAAOD,GAAP;AACH;AAED;;;;;;;AA7MJ;AAAA;AAAA,gEAmNoBG,MAnNpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAoNcd,cAAAA,IApNd,GAoNqB,KAAKN,eApN1B;;AAAA,mBAqNYM,IArNZ;AAAA;AAAA;AAAA;;AAsNkBe,cAAAA,QAtNlB,GAsN6B1C,WAAW,CAACV,aAAZ,CAA0BmD,MAA1B,IACKd,IAAI,CAACjD,WAAL,wDAAiE+D,MAAM,CAACrB,UAAxE,QADL,GAEM,OAAOqB,MAAP,KAAkB,QAAlB,GACGd,IAAI,CAACjD,WAAL,wDAAiE+D,MAAjE,QADH,GAEGd,IAAI,CAACjD,WAAL,CAAiB,oCAAjB,CA1NtC;;AAAA,mBA2NgBgE,QA3NhB;AAAA;AAAA;AAAA;;AA4NsBC,cAAAA,MA5NtB,GA4N+BxC,IAAI,CAACC,OAAL,CAAa,KAAKD,IAAlB,CA5N/B;AAAA,8CA6NkCuC,QA7NlC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6NyBE,cAAAA,KA7NzB;AA8N0BC,cAAAA,IA9N1B,GA8NiCH,QAAQ,CAACE,KAAD,CA9NzC;AA+N0BT,cAAAA,cA/N1B,GA+N2CU,IAAI,CAACf,YAAL,CAAkB,IAAlB,CA/N3C;AAgO0BgB,cAAAA,IAhO1B,GAgOiCD,IAAI,CAACf,YAAL,CAAkB,MAAlB,CAhOjC;AAiOwBiB,cAAAA,MAjOxB,GAiOiCrC,MAAM,CAACmC,IAAI,CAACf,YAAL,CAAkB,QAAlB,CAAD,CAAN,CAAoCrD,OAApC,CAA4C,MAA5C,EAAoD,GAApD,CAjOjC;AAkOoB0B,cAAAA,IAAI,CAAC6B,UAAL,CAAgBe,MAAhB,MAA4BA,MAAM,GAAG5C,IAAI,CAACI,IAAL,CAAUoC,MAAV,EAAkBI,MAAlB,CAArC;AACMd,cAAAA,IAnO1B,GAmOiCnC,aAAa,CAACgD,IAAD,CAAb,IAAuB9C,WAnOxD;AAAA;AAoOoB,qBAAM;AACF4C,gBAAAA,KAAK,EAALA,KADE;AAEFT,gBAAAA,cAAc,EAAdA,cAFE;AAGFY,gBAAAA,MAAM,EAANA,MAHE;AAIF,yBAAOd,IAJL;AAKFa,gBAAAA,IAAI,EAAJA,IALE;AAMFD,gBAAAA,IAAI,EAAJA;AANE,eAAN;;AApOpB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;gBAAa7C,4BAmEYgD;;gBAnEZhD,2BAwEWgD;;gBAxEXhD,8BA6Ec;;;;;ACzF3B;;;;;IAIaiD,iBAAb;AAAA;;AAAA;;AAGI,6BAAazC,IAAb,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,IAAN;AACA9E,IAAAA,QAAQ,gCAAO;AACXoF,MAAAA,OAAO,EAAEN,IAAI,CAACM;AADH,KAAP,CAAR;AAFe;AAKlB;;AARL;AAAA,EAAuCd,WAAvC;;gBAAaiD,oCACc;;ACJ3B;;;;IAGaC,gBAAb;AACI;;;;;;;;AAQA,4BAAaC,UAAb,EAAyBC,MAAzB,EAAiCC,UAAjC,EAA6C7C,IAA7C,EAAmD;AAAA;;AAC/CxE,IAAAA,MAAM,CAACsH,gBAAP,CAAwB,IAAxB,EAA8B;AAC1BC,MAAAA,SAAS,EAAE;AACPrH,QAAAA,KAAK,EAAEwE,MAAM,CAACyC,UAAD,CADN;AAEPhH,QAAAA,QAAQ,EAAE;AAFH,OADe;AAK1BqH,MAAAA,aAAa,EAAE;AACXtH,QAAAA,KAAK,EAAEmH,UAAU,IAAI3C,MAAM,CAAC2C,UAAD,CADhB;AAEXlH,QAAAA,QAAQ,EAAE;AAFC,OALW;AAS1BsH,MAAAA,YAAY,EAAE;AACVvH,QAAAA,KAAK,EAAEwE,MAAM,CAAC0C,MAAD,CADH;AAEVjH,QAAAA,QAAQ,EAAE;AAFA,OATY;AAa1BuH,MAAAA,OAAO,EAAE;AACLxH,QAAAA,KAAK,EAAEsE,IAAI,IAAI,EADV;AAELrE,QAAAA,QAAQ,EAAE;AAFL;AAbiB,KAA9B;AAkBH;AAED;;;;;;;AA9BJ;AAAA;AAAA,kCAmCkBwH,KAnClB,EAmCyB;AACjB,UAAMC,MAAM,GAAGD,KAAK,CAACE,YAAN,CAAmB,KAAKJ,YAAxB,KAAyC,KAAKD,aAA7D;AACA,aAAOI,MAAM,aAAMA,MAAN,cAAgB,KAAKL,SAArB,IAAmC,KAAKA,SAArD;AACH;AAED;;;;;AAxCJ;AAAA;AAAA,gCA4CgBO,IA5ChB,EA4CsB;AACbhI,MAAAA,SAAS,CAACC,MAAV,IAAoB,CAArB,KAA4B+H,IAAI,GAAG,KAAKJ,OAAL,WAAnC;AACA,UAAMK,EAAE,GAAG,KAAKL,OAAL,CAAaM,OAAxB;AACA,aAAOD,EAAE,GAAGA,EAAE,CAACD,IAAD,CAAL,GAAcA,IAAvB;AACH;AAED;;;;;AAlDJ;AAAA;AAAA,6BAsDaH,KAtDb,EAsDoB;AACZ,UAAMM,EAAE,GAAG,KAAKR,YAAhB;AAEA,aAAOQ,EAAE,GAAGN,KAAK,CAACO,cAAN,CAAqBD,EAArB,EAAyB,KAAKV,SAA9B,CAAH,GAA8CI,KAAK,CAAC7B,YAAN,CAAmB,KAAKqC,aAAL,CAAmBR,KAAnB,CAAnB,CAAvD;AACH;AAED;;;;;;AA5DJ;AAAA;AAAA,6BAiEaA,KAjEb,EAiEoBG,IAjEpB,EAiE0B;AAClBA,MAAAA,IAAI,GAAG,KAAKM,WAAL,CAAiBN,IAAjB,CAAP;AAEA,UAAMG,EAAE,GAAG,KAAKR,YAAhB;AACAQ,MAAAA,EAAE,GAAGN,KAAK,CAACU,cAAN,CAAqBJ,EAArB,EAAyB,KAAKE,aAAL,CAAmBR,KAAnB,CAAzB,EAAoDG,IAApD,CAAH,GAA+DH,KAAK,CAAC/E,YAAN,CAAmB,KAAK2E,SAAxB,EAAmCO,IAAnC,CAAjE;AACH;AAED;;;;;AAxEJ;AAAA;AAAA,2BA4EWH,KA5EX,EA4EkB;AACV,UAAMM,EAAE,GAAG,KAAKR,YAAhB;AACAQ,MAAAA,EAAE,GAAGN,KAAK,CAACW,iBAAN,CAAwBL,EAAxB,EAA4B,KAAKV,SAAjC,CAAH,GAAiDI,KAAK,CAACY,eAAN,CAAsB,KAAKJ,aAAL,CAAmBR,KAAnB,CAAtB,CAAnD;AACH;AAED;;;;;AAjFJ;AAAA;AAAA,0BAqFUG,IArFV,EAqFgB;AACR,yCAA4B,KAAKP,SAAjC,qCAAqE,KAAKE,YAA1E,eAA4F3H,SAAS,CAACC,MAAV,GAAmB,CAApB,4BAA2C+H,IAA3C,SAAqD,EAAhJ;AACH;AAED;;;;;AAzFJ;AAAA;AAAA,6BA6FoBA,IA7FpB,EA6F0B;AAClB,qCAAwBA,IAAxB;AACH;AA/FL;;AAAA;AAAA;;ACHA,IAAM5I,QAAM,GAAG+B,MAAf;AAIA;;;;AAGA,IAAMuH,gBAAgB,GAAG,EAAzB;AAEA;;;;IAGaC,cAAb;AAEI,0BAAad,KAAb,EAAoB;AAAA;;AAChBzI,IAAAA,QAAM,CAACyI,KAAD,EAAQ1G,YAAA,CAAmB,OAAnB,CAAR,CAAN;AACAvB,IAAAA,QAAQ,CAAC,IAAD,EAAO;AACXmH,MAAAA,IAAI,EAAEc;AADK,KAAP,CAAR;AAGH,GAPL;;AAWI;;;;;AAXJ;AAAA;AAsKI;AAEA;;AAEA;;;;;AA1KJ,6BA+Kae,IA/Kb,EA+KmB;AACX,UAAMC,SAAS,GAAG,KAAKpD,WAAL,CAAiBqD,QAAjB,CAA0B,IAA1B,EAAgCF,IAAhC,CAAlB;AACA,UAAMG,KAAK,GAAG,KAAKhC,IAAL,CAAUnE,WAAV,CAAsBiG,SAAtB,CAAd;AACA,aAAOE,KAAK,GAAGA,KAAK,CAACC,GAAN,CAAU,UAAAjC,IAAI;AAAA,eAAI4B,cAAc,CAACM,SAAf,CAA0B,MAAMlC,IAAI,CAACmC,QAAZ,GAAwBnC,IAAI,CAACoC,YAA7B,GAA4CpC,IAArE,KAA8EA,IAAlF;AAAA,OAAd,CAAH,GAA2G,EAAvH;AACH;AAED;;;;;;AArLJ;AAAA;AAAA,gCA0LgB6B,IA1LhB,EA0LsB;AACd,UAAMC,SAAS,GAAG,KAAKpD,WAAL,CAAiBqD,QAAjB,CAA0B,KAA1B,EAAiCF,IAAjC,CAAlB;AACA,UAAMG,KAAK,GAAG,KAAKhC,IAAL,CAAUnE,WAAV,CAAsBiG,SAAtB,CAAd;AACA,aAAOE,KAAK,GAAGA,KAAK,CAACC,GAAN,CAAU,UAAAjC,IAAI;AAAA,eAAI4B,cAAc,CAACM,SAAf,CAA0B,MAAMlC,IAAI,CAACmC,QAAZ,GAAwBnC,IAAI,CAACoC,YAA7B,GAA4CpC,IAArE,KAA8EA,IAAlF;AAAA,OAAd,CAAH,GAA2G,EAAvH;AACH;AAED;;;;;;AAhMJ;AAAA;AAAA,6BAqMa6B,IArMb,EAqMmB;AACX,UAAMC,SAAS,GAAG,KAAKpD,WAAL,CAAiBqD,QAAjB,CAA0B,IAA1B,EAAgCF,IAAhC,CAAlB;AACA,UAAM7B,IAAI,GAAG,KAAKA,IAAL,CAAUnE,WAAV,CAAsBiG,SAAtB,EAAiC,IAAjC,CAAb;AACA,aAAO9B,IAAI,KAAK4B,cAAc,CAACM,SAAf,CAA0B,MAAMlC,IAAI,CAACmC,QAAZ,GAAwBnC,IAAI,CAACoC,YAA7B,GAA4CpC,IAArE,KAA8EA,IAAnF,CAAX;AACH;AAED;;;;;;AA3MJ;AAAA;AAAA,kCAgNkBJ,MAhNlB,EAgN0ByC,WAhN1B,EAgNuC;AAC/B,UAAMP,SAAS,GAAG,KAAKpD,WAAL,CAAiBqD,QAAjB,CAA0B,KAA1B,EAAiCF,IAAjC,CAAlB;AACA,UAAM7B,IAAI,GAAG,KAAKA,IAAL,CAAUnE,WAAV,CAAsBiG,SAAtB,EAAiC,IAAjC,CAAb;AACA,aAAO9B,IAAI,KAAK4B,cAAc,CAACM,SAAf,CAA0B,MAAMlC,IAAI,CAACmC,QAAZ,GAAwBnC,IAAI,CAACoC,YAA7B,GAA4CpC,IAArE,KAA8EA,IAAnF,CAAX;AACH;AAED;;;;;AAtNJ;AAAA;AAAA,gCA0NgBsC,QA1NhB,EA0N0B;AAClBjK,MAAAA,QAAM,CAACiK,QAAQ,YAAYV,cAArB,EAAqCxH,YAAA,CAAmB,UAAnB,CAArC,CAAN;AAEA,WAAK4F,IAAL,CAAU9D,WAAV,CAAsBoG,QAAQ,CAACtC,IAA/B;AACH;AAED;;;;;;AAhOJ;AAAA;AAAA,oCAqOoBsC,QArOpB,EAqO8BC,OArO9B,EAqOuC;AAC/BlK,MAAAA,QAAM,CAACiK,QAAQ,YAAYV,cAArB,EAAqCxH,YAAA,CAAmB,UAAnB,CAArC,CAAN;AAEA,UAAMoI,OAAO,GAAG,KAAKxC,IAArB;AACA,UAAMyC,MAAM,GAAGD,OAAO,CAACE,UAAvB;AACAD,MAAAA,MAAM,IAAIA,MAAM,CAACE,YAAP,CAAoBL,QAAQ,CAACtC,IAA7B,EAAmCuC,OAAO,GAAGC,OAAH,GAAaA,OAAO,CAACI,WAA/D,CAAV;AACH;AAED;;;;;AA7OJ;AAAA;AAAA,kCAiPkBC,aAjPlB,EAiPiC;AACzBxK,MAAAA,QAAM,CAACuJ,cAAc,CAACnF,aAAf,CAA6BoG,aAA7B,CAAD,EAA8CzI,YAAA,CAAmB,eAAnB,CAA9C,CAAN;AAEA,aAAOyI,aAAa,CAAC5G,aAAd,CAA4B,KAAK+D,IAAL,CAAU8C,aAAtC,EAAqD,IAArD,CAAP;AACH;AAED;;;;AAvPJ;AAAA;AAAA,6BA0Pa;AACL,UAAML,MAAM,GAAG,KAAKzC,IAAL,CAAUyC,MAAzB;AAEAA,MAAAA,MAAM,IAAIA,MAAM,CAACM,WAAP,CAAmB,KAAK/C,IAAxB,CAAV;AACH;AAED;;;;;;AAhQJ;AAAA;AAAA,iCAqQiBgD,KArQjB,EAqQwB/B,IArQxB,EAqQ8B;AACrB+B,MAAAA,KAAK,YAAY3C,gBAAlB,GACM2C,KAAK,CAACC,QAAN,CAAe,KAAKjD,IAApB,EAA0BiB,IAA1B,CADN,GAEM,KAAKjB,IAAL,CAAUjE,YAAV,CAAuB8B,MAAM,CAACmF,KAAD,CAA7B,EAAsC/B,IAAtC,CAFN;AAGH;AAED;;;;;AA3QJ;AAAA;AAAA,iCA+QiB+B,KA/QjB,EA+QwB;AAChB,aAAQA,KAAK,YAAY3C,gBAAlB,GACO2C,KAAK,CAACE,QAAN,CAAe,KAAKlD,IAApB,CADP,GAEO,KAAKA,IAAL,CAAUf,YAAV,CAAuBpB,MAAM,CAACmF,KAAD,CAA7B,CAFd;AAGH;AAED;;;;;AArRJ;AAAA;AAAA,oCAyRoBA,KAzRpB,EAyR2B;AACnB,aAAQA,KAAK,YAAY3C,gBAAlB,GACO2C,KAAK,CAACG,MAAN,CAAa,KAAKnD,IAAlB,CADP,GAEO,KAAKA,IAAL,CAAU0B,eAAV,CAA0B7D,MAAM,CAACmF,KAAD,CAAhC,CAFd;AAGH,KA7RL;;AAAA;AAAA;AA+HI;AAEA;;AAEA;;;AAnIJ,wBAsIiB;AACT,aAAO,KAAKhD,IAAL,CAAUe,MAAjB;AACH;AAED;;;;AA1IJ;AAAA;AAAA,wBA6IoB;AACZ,aAAO,KAAKf,IAAL,CAAUU,SAAjB;AACH;AAED;;;;AAjJJ;AAAA;AAAA,wBAoJwB;AAChB,aAAO,KAAKV,IAAL,CAAUoD,QAAjB;AACH;AAED;;;;AAxJJ;AAAA;AAAA,wBA2JsB;AACd,aAAO,KAAKpD,IAAL,CAAUqD,WAAjB;AACH;AAED;;;;AA/JJ;AAAA;AAAA,wBAkKoB;AACZ,aAAO,KAAK3E,WAAL,CAAiB4E,IAAxB;AACH;AApKL;AAAA;AA0BI;AAEA;;AAEA;;;;AA9BJ,6BAkCoBT,aAlCpB,EAkCmC;AAC3BxK,MAAAA,QAAM,CAACwK,aAAa,IAAIjB,cAAc,CAACnF,aAAf,CAA6BoG,aAA7B,CAAlB,EAA+DzI,YAAA,CAAmB,eAAnB,CAA/D,CAAN;AACA/B,MAAAA,QAAM,CAACwK,aAAa,CAACU,YAAf,EAA6BnJ,YAAA,WAAsByI,aAAa,CAACS,IAApC,mBAA7B,CAAN;AAEA,UAAM/J,GAAG,aAAMsJ,aAAa,CAACU,YAApB,eAAqCV,aAAa,CAACW,SAAnD,CAAT;AACA7B,MAAAA,gBAAgB,CAACpI,GAAD,CAAhB,GAAwBsJ,aAAxB;AAEA,aAAOA,aAAP;AACH;AAED;;;;;;AA5CJ;AAAA;AAAA,2BAiDkBP,QAjDlB,EAiD4B;AACpB,aAASA,QAAQ,YAAYV,cAArB,IAAwCU,QAAQ,CAACtC,IAAT,CAAcgB,YAAd,CAA2B,KAAKuC,YAAhC,CAAzC,IAA2F,KAAKE,aAAvG;AACH;AAED;;;;;;AArDJ;AAAA;AAAA,kCA0DyBnB,QA1DzB,EA0DmC;AAC3B,UAAMoB,aAAa,GAAG,KAAKF,SAA3B;AACAnL,MAAAA,QAAM,CAACqL,aAAD,EAAgBtJ,YAAA,WAAsB,KAAKkJ,IAA3B,gBAAhB,CAAN;AACA,UAAMK,UAAU,GAAG,KAAK5C,MAAL,CAAYuB,QAAZ,CAAnB;AACA,aAAOqB,UAAU,aAAMA,UAAN,cAAoBD,aAApB,IAAsCA,aAAvD;AACH;AAED;;;;;AAjEJ;AAAA;AAAA,8BAqEqB5C,KArErB,EAqE4B;AACpB,UAAIA,KAAK,IAAK,MAAMA,KAAK,CAACqB,QAA1B,EAAqC;AACjC,YAAM5I,GAAG,aAAMuH,KAAK,CAAC8C,YAAZ,eAA6B9C,KAAK,CAACJ,SAAnC,CAAT;AACA,YAAMtB,IAAI,GAAGuC,gBAAgB,CAACpI,GAAD,CAAhB,IAAyBqI,cAAtC;AACA,eAAO,IAAIxC,IAAJ,CAAS0B,KAAT,CAAP;AACH;AACJ;AAED;;;;;AA7EJ;AAAA;AAAA,kCAiFyBA,KAjFzB,EAiFgC;AACxB,aAAOA,KAAK,IAAKA,KAAK,CAAC8C,YAAN,KAAuB,KAAKL,YAAtC,IAAwDzC,KAAK,CAACJ,SAAN,KAAoB,KAAK8C,SAAxF;AACH;AAED;;;;;;AArFJ;AAAA;AAAA,kCA0FyBK,IA1FzB,EA0F+BC,cA1F/B,EA0F+C;AACvCzL,MAAAA,QAAM,CAACwL,IAAD,EAAOzJ,YAAA,CAAmB,MAAnB,CAAP,CAAN;;AAEA,UAAM4F,IAAI,GAAG6D,IAAI,CAACE,eAAL,CAAqB,KAAKR,YAA1B,EAAwC,KAAKjC,aAAL,CAAmBwC,cAAnB,CAAxC,CAAb;;AACA,UAAI9D,IAAJ,EAAU;AACN,YAAIgE,OAAO,GAAG,IAAI,IAAJ,CAAShE,IAAT,CAAd;AACA,aAAKiE,YAAL,CAAkBD,OAAlB;AACA,eAAOA,OAAP;AACH;AACJ;AAED;;;;;AArGJ;AAAA;AAAA,iCAyGwB1B,QAzGxB,EAyGkC;AAC1BjK,MAAAA,QAAM,CAACiK,QAAQ,YAAY,IAArB,EAA2BlI,YAAA,wCAAmD,KAAKkJ,IAAxD,EAA3B,CAAN;AACH;AAED;;;;;AA7GJ;AAAA;AAAA,0BAiHiBY,OAjHjB,EAiH0B;AAClB,wCAA2B,KAAKV,SAAhC,qCAAoE,KAAKD,YAAzE,eAA0FW,OAAO,IAAI,EAArG;AACH;AAED;;;;;;;AArHJ;AAAA;AAAA,6BA2HoBzK,OA3HpB,EA2H6BoI,IA3H7B,EA2HmC;AAC3B,uBAAUpI,OAAV,SAAqB,CAAEoI,IAAI,YAAYxB,gBAAjB,IAAsCuB,cAAc,CAACnF,aAAf,CAA6BoF,IAA7B,CAAvC,KAA8EA,IAAI,CAACsC,KAAL,EAA/E,IAAgGtC,IAAhG,IAAwG,GAA5H;AACH;AA7HL;;AAAA;AAAA;;gBAAaD,6BAcUzB;;gBAdVyB,iCAmBczB;;gBAnBdyB,gCAwBazB;;;;;ACjC1B;;;;;IAIaiE,eAAb;AAAA;;AAAA;;AAEI,2BAAYzG,IAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,IAAN;AAEA9E,IAAAA,QAAQ,gCAAO;AACXwL,MAAAA,UAAU,EAAE1G,IAAI,WAAJ,CAAa5C,WAAb,CAAyBI,GAAzB,CAA6BC,KAA7B,CAAmCuC,IAAI,CAACM,OAAxC;AADD,KAAP,CAAR;AAHc;AAMjB;AAED;;;;;AAVJ;AAAA;AAAA,wBAakB;AACV,aAAO,KAAKoG,UAAL,CAAgBxK,QAAhB,EAAP;AACH;AAED;;;;AAjBJ;AAAA;AAAA,wBAoByB;AACjB,aAAO+H,cAAc,CAACM,SAAf,CAAyB,KAAKmC,UAAL,CAAgB1E,WAAzC,CAAP;AACH;AAtBL;;AAAA;AAAA,EAAqCxC,WAArC;;ACXO,IAAMmH,YAAY,GAAG,qEAArB;;;;;;;ACGA,IAAMC,kBAAkB,GAAG,IAAIlE,gBAAJ,CAAqB,IAArB,EAA2BiE,YAA3B,EAAyC,GAAzC,CAA3B;;ACAA,IAAME,SAAS,GAAG,IAAInE,gBAAJ,CAAqB,OAArB,EAA8BiE,YAA9B,EAA4C,GAA5C,CAAlB;;;;;;;;;ACHA,IAAMG,IAAI,GAAG,4DAAb;;;;;;;;;;ACGP;;;;IAGqBC;;;;;AACjB;AAGA;AAEA,4BAAa5D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;;EARyCc;;gBAAzB8C,kCAEKC;;gBAFLD,mCAGM;;;;;;;ACJ3B;;;;;AAIO,IAAME,OAAO,GAAGhD,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACnB;AAEA;AAEA,mBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AATmB;AAAA;AAAA,wBAYE;AACjB,UAAIgE,EAAE,GAAG,KAAK7F,YAAL,CAAkBsF,kBAAlB,CAAT;;AACA,UAAI,CAACO,EAAL,EAAS;AACLA,QAAAA,EAAE,GAAGtL,SAAS,CAAC,GAAD,CAAd;AACA,aAAKuC,YAAL,CAAkBwI,kBAAlB,EAAsCO,EAAtC;AACH;;AACD,aAAOA,EAAP;AACH;AAED;;;AArBmB;AAAA,sBAwBA7D,IAxBA,EAwBM;AACrB,WAAKlF,YAAL,CAAkBwI,kBAAlB,EAAsCtD,IAAI,IAAI8D,OAAO,CAACvL,SAAR,CAAkB,GAAlB,EAAuB,EAAvB,CAA9C;AACH;AAED;;;;AA5BmB;AAAA;AAAA,wBA+BV;AACL,aAAO,KAAKyF,YAAL,CAAkB,IAAlB,CAAP;AACH;AAED;;;AAnCmB;AAAA,sBAsCZgC,IAtCY,EAsCN;AACTA,MAAAA,IAAI,GAAGzJ,MAAM,CAACyJ,IAAD,CAAb;AACA+D,MAAAA,KAAK,CAAC/D,IAAD,CAAL,IAAe,KAAKlF,YAAL,CAAkB,IAAlB,EAAwBkF,IAAxB,CAAf;AACH;AAzCkB;;AAAA;AAAA,EAA8CgE,gBAA9C,wCAEA,OAFA,UAAhB;;;;;;;ACLP;;;;;AAIO,IAAMC,WAAW,GAAGtD,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACvB;AAEA;AAEA,uBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AATuB;AAAA;;AAgBvB;;;AAhBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBbqE,cAAAA,IApBa,GAoBN,KAAKC,QAAL,CAAcR,OAAd,CApBM;AAAA,6CAqBDO,IArBC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBVpF,cAAAA,KArBU;AAAA;AAsBf,qBAAM;AACFA,gBAAAA,KAAK,EAALA,KADE;AAEFsF,gBAAAA,OAAO,EAAEF,IAAI,CAACpF,KAAD;AAFX,eAAN;;AAtBe;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAYX;AACR,aAAO,KAAKqF,QAAL,CAAcR,OAAd,EAAuB1L,MAA9B;AACH;AAdsB;;AAAA;AAAA,EAAkD+L,gBAAlD,0CAEJ,UAFI,YAApB;;;;;;;ACJP;;;;AAGO,IAAMK,YAAY,GAAG1D,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACxB;AAEA;AAEA,wBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AATwB;AAAA;AAAA,wBAYN;AACd,UAAIqE,IAAI,GAAG,KAAKC,QAAL,CAAcF,WAAd,CAAX;;AACA,UAAIC,IAAI,CAACjM,MAAL,IAAe,CAAnB,EAAsB;AAClBiM,QAAAA,IAAI,GAAG,KAAKlJ,aAAL,CAAmBiJ,WAAnB,CAAP;AACA,aAAKhJ,WAAL,CAAiBiJ,IAAjB;AACH,OAHD,MAGO;AACHA,QAAAA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAX;AACH;;AACD,aAAOA,IAAP;AACH;AArBuB;;AAAA;AAAA,EAAmDF,gBAAnD,0CAEL,cAFK,YAArB;;;;;;;ACHP;;;;;AAIO,IAAMM,0BAA0B,GAAG3D,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACtC;AAEA;AAEA,sCAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AATsC;AAAA;AAAA,wBAY3B;AACP,aAAO,KAAK7B,YAAL,CAAkB,MAAlB,CAAP;AACH;AAED;;;AAhBsC;AAAA,sBAmB7BgC,IAnB6B,EAmBvB;AACX,WAAKlF,YAAL,CAAkB,MAAlB,EAA0BkF,IAA1B;AACH;AAED;;;;AAvBsC;AAAA;AAAA,wBA0B7B;AACL,aAAO,KAAKhC,YAAL,CAAkB,IAAlB,CAAP;AACH;AAED;;;AA9BsC;AAAA,sBAiC/BgC,IAjC+B,EAiCzB;AACT,WAAKlF,YAAL,CAAkB,IAAlB,EAAwBkF,IAAxB;AACH;AAED;;;;AArCsC;AAAA;AAAA,wBAwCpB;AACd,aAAO,KAAKhC,YAAL,CAAkB,OAAlB,CAAP;AACH;AAED;;;AA5CsC;AAAA,sBA+CtBgC,IA/CsB,EA+ChB;AAClB,aAAO,KAAKlF,YAAL,CAAkB,OAAlB,EAA2BkF,IAA3B,CAAP;AACH;AAjDqC;;AAAA;AAAA,EAAiEgE,gBAAjE,0CAEnB,OAFmB,YAAnC;;;;;ACJP;;;;;IAIaO,uBAAb;AAAA;;AAAA;;AAEI,mCAAa1E,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AANJ;AAAA;AAAA,wBASe;AACP,UAAM2E,EAAE,GAAG,KAAKC,QAAL,CAAcH,0BAAd,CAAX;AACA,aAAOE,EAAE,IAAIA,EAAE,CAACnC,IAAhB;AACH;AAED;;;AAdJ;AAAA,sBAiBarC,IAjBb,EAiBmB;AACX,UAAMwE,EAAE,GAAG,KAAKC,QAAL,CAAcH,0BAAd,CAAX;AACAE,MAAAA,EAAE,KAAKA,EAAE,CAACnC,IAAH,GAAUrC,IAAf,CAAF;AACH;AAED;;;;AAtBJ;AAAA;AAAA,wBAyBa;AACL,UAAMwE,EAAE,GAAG,KAAKC,QAAL,CAAcH,0BAAd,CAAX;AACA,aAAOE,EAAE,IAAIA,EAAE,CAACX,EAAhB;AACH;AAED;;;AA9BJ;AAAA,sBAiCW7D,IAjCX,EAiCiB;AACT,UAAMwE,EAAE,GAAG,KAAKC,QAAL,CAAcH,0BAAd,CAAX;AACAE,MAAAA,EAAE,KAAKA,EAAE,CAACX,EAAH,GAAQ7D,IAAb,CAAF;AACH;AAED;;;;AAtCJ;AAAA;AAAA,wBAyCsB;AACd,UAAMwE,EAAE,GAAG,KAAKC,QAAL,CAAcH,0BAAd,CAAX;AACA,aAAOE,EAAE,IAAIA,EAAE,CAACE,WAAhB;AACH;AAED;;;AA9CJ;AAAA,sBAiDoB1E,IAjDpB,EAiD0B;AAClB,UAAMwE,EAAE,GAAG,KAAKC,QAAL,CAAcH,0BAAd,CAAX;AACAE,MAAAA,EAAE,KAAKA,EAAE,CAACE,WAAH,GAAiB1E,IAAtB,CAAF;AACH;AApDL;;AAAA;AAAA,EAA6CgE,gBAA7C;;;;;;;ACLA;;;;;AAIO,IAAMW,6BAA6B,GAAGhE,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACzC;AAEA;AAEA,yCAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;AAPwC;AAAA,EAAoE0E,uBAApE,0CAEtB,WAFsB,YAAtC;;;;;ACLP;;;;IAGaK,iBAAb;AAAA;;AAAA;;AACI,6BAAa/E,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;AAHL;AAAA,EAAuCmE,gBAAvC;;;;;ACDA;;;;;IAIaa,cAAb;AAAA;;AAAA;;AAEI,0BAAahF,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AANJ;AAAA;;AAkBI;;;AAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBYqE,cAAAA,IAtBZ,GAsBmB,KAAKC,QAAL,CAAc,GAAd,CAtBnB;AAAA,6CAuBwBD,IAvBxB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBiBY,cAAAA,GAvBjB;AAwBkB/B,cAAAA,OAxBlB,GAwB4BmB,IAAI,CAACY,GAAD,CAxBhC;;AAAA,oBAyBgB/B,OAAO,YAAY6B,iBAzBnC;AAAA;AAAA;AAAA;;AAAA;AA0BgB,qBAAM7B,OAAN;;AA1BhB;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAS8B;AACtB,UAAIyB,EAAE,GAAG,KAAKC,QAAL,CAAcE,6BAAd,CAAT;;AACA,UAAI,CAACH,EAAL,EAAS;AACLA,QAAAA,EAAE,GAAG,KAAKxJ,aAAL,CAAmB2J,6BAAnB,CAAL;AACAH,QAAAA,EAAE,IAAI,KAAKvJ,WAAL,CAAiBuJ,EAAjB,CAAN;AACH;;AACD,aAAOA,EAAP;AACH;AAhBL;;AAAA;AAAA,EAAoCI,iBAApC;;;;;;;ACLA;;;;;AAIO,IAAMG,SAAS,GAAGpE,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACrB;AAEA;AAEA,qBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;AAPoB;AAAA,EAAgDgF,cAAhD,0CAEF,QAFE,YAAlB;;;;;;;ACHP;;;;;AAIO,IAAMG,eAAe,GAAGrE,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AAC3B;AAEA;AAEA,2BAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AAT2B;AAAA;AAAA,wBAYX;AACZ,UAAIoF,IAAI,GAAG,KAAKR,QAAL,CAAcM,SAAd,CAAX;;AACA,UAAI,CAACE,IAAL,EAAW;AACPA,QAAAA,IAAI,GAAG,KAAKjK,aAAL,CAAmB+J,SAAnB,CAAP;AACAE,QAAAA,IAAI,IAAI,KAAKhK,WAAL,CAAiBgK,IAAjB,CAAR;AACH;;AACD,aAAOA,IAAP;AACH;AAnB0B;;AAAA;AAAA,EAAsDjB,gBAAtD,0CAER,MAFQ,YAAxB;;;;;;;ACJP;;;;AAGO,IAAMkB,KAAK,GAAGvE,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACjB;AAEA;AAEA,iBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AATiB;AAAA;AAAA,wBAYA;AACb,UAAIsF,IAAI,GAAG,KAAKV,QAAL,CAAcO,eAAd,CAAX;;AACA,UAAI,CAACG,IAAL,EAAW;AACPA,QAAAA,IAAI,GAAG,KAAKnK,aAAL,CAAmBgK,eAAnB,CAAP;AACAG,QAAAA,IAAI,IAAI,KAAKlK,WAAL,CAAiBkK,IAAjB,CAAR;AACH;;AACD,aAAOA,IAAP;AACH;AAnBgB;;AAAA;AAAA,EAA4CnB,gBAA5C,0CAEE,KAFF,YAAd;;;;;;;ACJP;;;;;AAIO,IAAMoB,wBAAwB,GAAGzE,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACpC;AAEA;AAEA,oCAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;AAPmC;AAAA,EAA+D0E,uBAA/D,0CAEjB,QAFiB,YAAjC;;;;;;;ACJP;;;;;AAIO,IAAMc,0BAA0B,GAAG1E,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACtC;AAEA;AAEA,sCAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;AAPqC;AAAA,EAAiE0E,uBAAjE,0CAEnB,SAFmB,YAAnC;;;;;;;ACJP;;;;;AAIO,IAAMe,UAAU,GAAG3E,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACtB;AAEA;AAEA,sBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;AAPqB;AAAA,EAAiDgF,cAAjD,0CAEH,OAFG,YAAnB;;ACPA,IAAMrB,MAAI,GAAG,uDAAb;;;;;;;;;;ACGP;;;;IAGqB+B;;;;;AACjB;AAGA;AAEA,uBAAa1F,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;;EARoCc;;gBAApB4E,6BAEK7B;;gBAFL6B,8BAGM;;;;;;;;ACL3B;;;;;AAIO,IAAMC,IAAI,GAAG7E,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AAChB;AAEA;AAEA,gBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;;AAPe;AAAA,EAA2C0F,WAA3C,0CAEG,GAFH,YAAb;AAWP;;AACA;;;;;AAIO,IAAME,GAAG,GAAG9E,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACf;AAEA;AAEA,eAAa/D,KAAb,EAAoB;AAAA;;AAAA,8BACVA,KADU;AAEnB;AAED;;;;;AATe;AAAA;AAAA,wBAYG;AACd,UAAM6F,KAAK,GAAG,KAAKC,WAAL,CAAiBH,IAAjB,EAAuBxE,GAAvB,CAA2B,UAAA4E,IAAI;AAAA,eAAIA,IAAI,CAACxD,WAAT;AAAA,OAA/B,CAAd;AAEA,aAAOsD,KAAK,CAACjJ,IAAN,CAAW,EAAX,CAAP;AACH;AAhBc;;AAAA;AAAA,EAA0C8I,WAA1C,yCAEI,GAFJ,WAAZ;AAoBP;;AACA;;;;;AAIO,IAAMM,SAAS,GAAGlF,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACrB;AAEA;AAEA,qBAAa/D,KAAb,EAAoB;AAAA;;AAAA,8BACVA,KADU;AAEnB;AAED;;;;;AATqB;AAAA;AAAA,wBAYH;AACd,UAAM6F,KAAK,GAAG,KAAKC,WAAL,CAAiBH,IAAjB,EAAuBxE,GAAvB,CAA2B,UAAA4E,IAAI;AAAA,eAAIA,IAAI,CAACxD,WAAT;AAAA,OAA/B,CAAd;AAEA,aAAOsD,KAAK,CAACjJ,IAAN,CAAW,EAAX,CAAP;AACH;AAhBoB;;AAAA;AAAA,EAAgD8I,WAAhD,yCAEF,GAFE,WAAlB;AAoBP;;AACA;;;;;AAIO,IAAMO,QAAQ,GAAGnF,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACpB;AAEA;AAEA,oBAAa/D,KAAb,EAAoB;AAAA;;AAAA,8BACVA,KADU;AAEnB;AAED;;;;;AAToB;AAAA;AAAA,wBAYF;AACd,UAAM6F,KAAK,GAAG,KAAKC,WAAL,CAAiBE,SAAjB,EAA4B7E,GAA5B,CAAgC,UAAA+E,CAAC;AAAA,eAAIA,CAAC,CAAC3D,WAAN;AAAA,OAAjC,CAAd;AAEA,aAAOsD,KAAK,CAACjJ,IAAN,CAAW,MAAX,CAAP;AACH;AAhBmB;;AAAA;AAAA,EAA+C8I,WAA/C,yCAED,QAFC,WAAjB;;;;;;;;;;;;;;;;ACrEP;;;;AAGO,IAAMS,KAAK,GAAGrF,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACjB;AAEA;AAEA,iBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AATiB;AAAA;AAAA,wBAYS;AACtB,UAAI2E,EAAE,GAAG,KAAKC,QAAL,CAAcW,wBAAd,CAAT;;AACA,UAAI,CAACZ,EAAL,EAAS;AACLA,QAAAA,EAAE,GAAG,KAAKxJ,aAAL,CAAmBoK,wBAAnB,CAAL;AACAZ,QAAAA,EAAE,IAAI,KAAKvJ,WAAL,CAAiBuJ,EAAjB,CAAN;AACH;;AACD,aAAOA,EAAP;AACH;AAED;;;;AArBiB;AAAA;AAAA,wBAwBF;AACX,aAAO,KAAKC,QAAL,CAAcqB,QAAd,CAAP;AACH;AA1BgB;;AAAA;AAAA,EAA4ClB,iBAA5C,0CAEE,IAFF,YAAd;;;;;;;ACJP;;;;;AAIO,IAAMqB,OAAO,GAAGtF,cAAc,CAACiD,QAAf;AAAA;;AAAA;;AACnB;AAEA;AAEA,mBAAa/D,KAAb,EAAoB;AAAA;;AAAA,6BACVA,KADU;AAEnB;AAED;;;;;AATmB;AAAA;AAAA,wBAYO;AACtB,UAAI2E,EAAE,GAAG,KAAKC,QAAL,CAAcY,0BAAd,CAAT;;AACA,UAAI,CAACb,EAAL,EAAS;AACLA,QAAAA,EAAE,GAAG,KAAKxJ,aAAL,CAAmBqK,0BAAnB,CAAL;AACAb,QAAAA,EAAE,IAAI,KAAKvJ,WAAL,CAAiBuJ,EAAjB,CAAN;AACH;;AACD,aAAOA,EAAP;AACH;AAnBkB;;AAAA;AAAA,EAA8CI,iBAA9C,0CAEA,KAFA,YAAhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHP,IAAMxN,QAAM,GAAG+B,MAAf;AAIA;;AACA,IAAM+M,cAAc,GAAG/P,MAAM,CAAC,mBAAD,CAA7B;AACA;;;;IAGMgQ;AACF;;;;AAIA;;;;AAKA;;;;AAIA,oBAAaC,OAAb,EAAsB;AAAA;;AAClBhP,IAAAA,QAAM,CAACgP,OAAO,YAAYC,gBAApB,EAAsC,0CAAtC,CAAN;AAEAzO,IAAAA,QAAQ,CAAC,IAAD,EAAO,aAAP,EAAsBwO,OAAO,CAACE,YAAR,CAAqBC,WAA3C,CAAR;AACA3O,IAAAA,QAAQ,CAAC,IAAD,EAAO,QAAP,EAAiBwO,OAAjB,CAAR;AACA,SAAKI,SAAL;AACH;AAED;;;;;;;;gCAIY;AACR,UAAMC,SAAS,GAAG,KAAKjF,MAAL,CAAY4B,UAAZ,CAAuB1E,WAAzC;AACA,UAAImF,EAAE,GAAGsC,QAAQ,CAACO,MAAlB;;AAFQ,iDAGgB,KAAKC,WAAL,CAAiBjB,KAAjB,EAHhB;AAAA;;AAAA;AAGR,4DAAkD;AAAA,cAAvCtB,OAAuC,eAAvCA,OAAuC;AAC9C,cAAMwC,KAAK,GAAGxC,OAAO,CAACP,EAAtB;AACA,cAAMgD,WAAW,GAAGJ,SAAS,CAAC7L,WAAV,+CAA6DgM,KAA7D,QAApB;;AACA,eAAK,IAAIE,MAAT,IAAmBD,WAAnB,EAAgC;AAC5BA,YAAAA,WAAW,CAACC,MAAD,CAAX,CAAoBhM,YAApB,CAAiC,IAAjC,EAAuC+I,EAAvC;AACH;;AACDA,UAAAA,EAAE;AACL;AAVO;AAAA;AAAA;AAAA;AAAA;;AAWR,WAAKqC,cAAL,IAAuBrC,EAAvB;AACH;AAED;;;;;;;AAOA;;;;+BAIWkD,QAAQ;AACf,UAAMC,SAAS,GAAG,KAAKL,WAAL,CAAiBxC,QAAjB,CAA0B8C,OAA1B,EAAuDF,MAAvD,CAAlB;;AACA,UAAIC,SAAJ,EAAe;AACX,eAAO,KAAKxF,MAAL,CAAY0F,eAAZ,CAA4BF,SAAS,CAAC3I,cAAtC,CAAP;AACH;AACJ;AAED;;;;;;;;;;;;;AAIUmD,cAAAA,SAAS,KAAKA;sDACW,KAAKmF,WAAL,CAAiBjB,KAAjB;;;;;;;;;;;2CAApB5G,qBAAAA,OAAOsF,uBAAAA;;AACd,qBAAM;AACFtF,gBAAAA,KAAK,EAALA,KADE;AAEFqI,gBAAAA,MAAM,EAAE3F,MAAM,CAAC0F,eAAP,CAAuB9C,OAAO,CAAC/F,cAA/B,CAFN;AAGFwF,gBAAAA,EAAE,EAAEO,OAAO,CAACP;AAHV,eAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQR;;;;;;;;oFAIWuD;;;;;;;sBACH,OAAOA,GAAP,KAAe;;;;;AACT5F,gBAAAA,SAAS,KAAKA;wDACW,KAAKmF,WAAL,CAAiBjB,KAAjB;;;;;;;;;;;6CAApB5G,qBAAAA,OAAOsF,uBAAAA;;uBACU5C,MAAM,CAAC0F,eAAP,CAAuB9C,OAAO,CAAC/F,cAA/B;;;AAAlBgJ,gBAAAA;AACAC,gBAAAA,QAAQF,GAAG,CAACtI,KAAD,EAAQuI,SAAR;+BAChBC,KAAK,YAAYC;;;;;;;;uBAAkBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKhD;;;;;;;;;;;uFAOaE,gBAAgBC;;;;;;AACnBjG,gBAAAA,SAAS,KAAKA;AAGpB;;AACIkG,gBAAAA,QAAQ,KAAKxB,cAAL;;AACZ,oBAAIwB,KAAK,GAAGvB,QAAQ,CAACwB,MAArB,EAA6B;AACzB,uBAAKnB,SAAL;AACAkB,kBAAAA,KAAK,GAAG,KAAKxB,cAAL,CAAR;AACH;;AACD9O,gBAAAA,QAAM,CAACsQ,KAAK,IAAIvB,QAAQ,CAACwB,MAAnB,EAA2BxO,YAA3B,CAAN;;AAGA/B,gBAAAA,QAAM,CAAE,CAACqQ,YAAF,IAAmBjG,MAAM,CAACoG,aAAP,CAAqBH,YAArB,CAApB,EAAwDtO,kBAAA,CAAyB,cAAzB,CAAxD,CAAN;;AAGI0O,gBAAAA,aAAa3I;;AACjB,oBAAI,OAAOsI,cAAP,KAA0B,QAA9B,EAAwC;AAC9BM,kBAAAA,UAD8B,GACjB,KAAKnB,WAAL,CAAiBxC,QAAjB,CAA0B8C,OAA1B,CADiB;AAEpCY,kBAAAA,UAAU,GAAGC,UAAU,CAACN,cAAc,GAAG,CAAjB,GAAqB,CAArB,GAA0BA,cAAc,IAAIM,UAAU,CAAC7P,MAA7B,GAAuC6P,UAAU,CAAC7P,MAAX,GAAoB,CAA3D,GAAgEuP,cAA3F,CAAvB;AACH,iBAHD,MAGO,IAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;AAC3CK,kBAAAA,UAAU,GAAG,KAAKlB,WAAL,CAAiBlC,QAAjB,CAA0BsD,kBAA1B,2BAA8EP,cAA9E,OAAb;AACH,iBAFM,MAEA,IAAIhG,MAAM,CAACoG,aAAP,CAAqBJ,cAArB,CAAJ,EAA0C;AAC7CK,kBAAAA,UAAU,GAAG,KAAKlB,WAAL,CAAiBlC,QAAjB,CAA0BsD,kBAA1B,2BAA8EP,cAAc,CAACQ,UAA7F,OAAb;AACH;;oBAEIP;;;;;qBACGI;;;;;;uBAE2BrG,MAAM,CAAC0F,eAAP,CAAuBW,UAAU,CAACxJ,cAAlC;;;AAArB4J,gBAAAA;AACAC,gBAAAA,cAAc7L,IAAI,CAAC8L,OAAL,CAAaF,YAAY,CAAC5L,IAA1B;AACd+L,gBAAAA,WAAW/L,IAAI,CAACG,QAAL,CAAcyL,YAAY,CAAC5L,IAA3B,EAAiC6L,WAAjC,EAA8CvN,OAA9C,CAAsD,KAAtD,EAA6D,EAA7D,IAAmEpC,SAAS,EAA5E,GAAiF2P;AAC5FG,gBAAAA,WAAWhM,IAAI,CAACC,OAAL,CAAa2L,YAAY,CAAC5L,IAA1B;;uBACI4L,YAAY,CAACK,SAAb,CAAuBjM,IAAI,CAACI,IAAL,CAAU4L,QAAV,EAAoBD,QAApB,CAAvB;;;AAArBX,gBAAAA;;;;;sBAIMtO,YAAA;;;AAGd/B,gBAAAA,QAAM,CAACqQ,YAAD,EAAetO,oBAAA,CAA2B,mBAA3B,CAAf,CAAN;;AAGMqF,gBAAAA,MAAMgD,MAAM,CAAC+G,kBAAP,CAA0Bd,YAA1B;AACNe,gBAAAA,QAAQ,KAAK7B,WAAL,CAAiB3L,aAAjB,CAA+BiM,OAA/B;AACd7P,gBAAAA,QAAM,CAACoR,KAAD,EAAQrP,qBAAA,CAA4B,cAA5B,CAAR,CAAN;AACAqP,gBAAAA,KAAK,CAAC3E,EAAN,GAAW6D,KAAX;AACAc,gBAAAA,KAAK,CAACnK,cAAN,GAAuBG,GAAvB;AACAqJ,gBAAAA,UAAU,GACJA,UAAU,CAACY,eAAX,CAA2BD,KAA3B,EAAmC,OAAOhB,cAAP,KAA0B,QAA3B,IAAyCA,cAAc,GAAG,CAA5F,CADI,GAEJ,KAAKb,WAAL,CAAiB1L,WAAjB,CAA6BuN,KAA7B,CAFN;AAGA,qBAAKtC,cAAL;AACA1E,gBAAAA,MAAM,CAACkH,MAAP;kDACOlK;;;;;;;;;;;;;;;;;;wBAxGC;AACR,aAAO,KAAKmI,WAAL,CAAiBgC,KAAxB;AACH;;;;;AA2GL;;AAEA;;;;;;gBA1JMxC,oBAIc;;gBAJdA,oBAQc;;AAsJb,IAAME,gBAAgB,GAAGnK,WAAW,CAAC0H,QAAZ;AAAA;;AAAA;;AAC5B;AAGA;;AAEA;;;;AAIA,4BAAYlH,IAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,IAAN;AACA9E,IAAAA,QAAQ,gCAAO,cAAP,EAAuB,MAAKgR,cAA5B,CAAR;AACAhR,IAAAA,QAAQ,gCAAO,UAAP,EAAmB,IAAIuO,QAAJ,+BAAnB,CAAR;AAHc;AAIjB;;AAd2B;AAAA,EAAoDhD,eAApD,2CAER,4DAFQ,4CAGP,oFAHO,YAAzB;;;;;;;ACxKP;;;;;AAIO,IAAM0F,SAAS,GAAG3M,WAAW,CAAC0H,QAAZ;AAAA;;AAAA;;AACrB;AAGA;;AAEA;;;;AAIA,qBAAYlH,IAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,IAAN;AACA,QAAIoM,YAAY,GAAG,MAAKF,cAAxB;;AACA,QAAI,EAAEE,YAAY,YAAYxC,KAA1B,CAAJ,EAAmD;AAC/CwC,MAAAA,YAAY,GAAGxC,KAAA,CAAmBtL,aAAnB,CAAiC,MAAKP,GAAtC,CAAf;AACAqO,MAAAA,YAAY,IAAI,MAAKrO,GAAL,CAASQ,WAAT,CAAqB6N,YAAY,CAAC/J,IAAlC,CAAhB;AACH;;AACDnH,IAAAA,QAAQ,gCAAO,OAAP,EAAgBkR,YAAhB,CAAR;AAPc;AAQjB;;AAlBoB;AAAA,EAA6C3F,eAA7C,2CAED,2EAFC,4CAGA,wEAHA,YAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}