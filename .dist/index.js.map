{"version":3,"file":"index.js","sources":["../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../src/common/error.js","../src/common/readonly.js","../src/common/genRandId.js","../src/dependentInterface/domInterface.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../src/dependentInterface/zipInterface.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/dependentInterface/application.js","../src/classes/basic/openXmlPackage.js","../src/classes/basic/openXmlPart.js","../src/classes/basic/openXmlBinaryPart.js","../src/classes/basic/openXmlAttribute.js","../src/classes/basic/openXmlElement.js","../src/classes/basic/openXmlPurePart.js","../src/classes/schemas/officeDocument/officeDoc2006/namespaceURI.js","../src/classes/schemas/officeDocument/officeDoc2006/attrRelationshipId.js","../src/classes/schemas/officeDocument/officeDoc2006/attrEmbed.js","../src/classes/schemas/presentation/v2006/namespaceURI.js","../src/classes/schemas/presentation/v2006/basic.js","../src/classes/schemas/presentation/v2006/slideId.js","../src/classes/schemas/presentation/v2006/slideIdList.js","../src/classes/schemas/presentation/v2006/presentation.js","../src/classes/schemas/presentation/v2006/cNvPr.js","../src/classes/schemas/presentation/v2006/nonVisualPropertiesBase.js","../src/classes/schemas/presentation/v2006/nonVisualGroupShapeProperties.js","../src/classes/schemas/presentation/v2006/visualSlideObject.js","../src/classes/schemas/presentation/v2006/groupShapeBase.js","../src/classes/schemas/presentation/v2006/shapeTree.js","../src/classes/schemas/presentation/v2006/commonSlideData.js","../src/classes/schemas/presentation/v2006/slide.js","../src/classes/schemas/presentation/v2006/nonVisualShapeProperties.js","../src/classes/schemas/presentation/v2006/nonVisualPictureProperties.js","../src/classes/schemas/presentation/v2006/groupShape.js","../src/classes/schemas/drawing/drawing2006/namespaceURI.js","../src/classes/schemas/drawing/drawing2006/basic.js","../src/classes/schemas/drawing/drawing2006/text.js","../src/classes/schemas/presentation/v2006/shape.js","../src/classes/schemas/presentation/v2006/picture.js","../src/classes/schemas/wordprocessing/v2006/namespaceURI.js","../src/classes/schemas/wordprocessing/v2006/basic.js","../src/classes/schemas/wordprocessing/v2006/paragraphStyleId.js","../src/classes/schemas/wordprocessing/v2006/styleParagraphProperties.js","../src/classes/schemas/wordprocessing/v2006/text.js","../src/classes/schemas/wordprocessing/v2006/run.js","../src/classes/schemas/wordprocessing/v2006/paragraph.js","../src/classes/schemas/wordprocessing/v2006/body.js","../src/classes/schemas/wordprocessing/v2006/document.js","../src/classes/schemas/spreadsheet/v2006/namespaceURI.js","../src/classes/schemas/spreadsheet/v2006/basic.js","../src/classes/schemas/spreadsheet/v2006/sheetList.js","../src/classes/schemas/spreadsheet/v2006/workbook.js","../src/classes/schemas/spreadsheet/v2006/shareStringTable.js","../src/classes/schemas/spreadsheet/v2006/columnInformation.js","../src/classes/schemas/spreadsheet/v2006/toolkit.js","../src/classes/schemas/spreadsheet/v2006/sheetData.js","../src/classes/schemas/spreadsheet/v2006/workSheet.js","../src/classes/parts/presentation/presentationPart.js","../src/classes/parts/presentation/slidePart.js","../src/classes/parts/wordprocessing/documentPart.js","../src/classes/parts/spreadsheet/shareStringPart.js","../src/classes/parts/spreadsheet/workbook.js","../src/classes/parts/spreadsheet/sheet.js"],"sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeFunction from \"@babel/runtime/helpers/esm/isNativeFunction\";\nimport construct from \"@babel/runtime/helpers/esm/construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","const $errorId = Symbol(\"OxjsError.errorId\");\r\n\r\n/**\r\n * class of extension exception\r\n */\r\nexport class OxjsError extends Error {\r\n    constructor(_id, _msg) {\r\n        super(_msg);\r\n        this[$errorId] = Number(_id);\r\n    }\r\n\r\n    /**\r\n     * id of the exception\r\n     */\r\n    get errorId() {\r\n        return this[$errorId];\r\n    }\r\n}\r\n\r\n/**\r\n * generate a new exception instance\r\n * @param {*} _id the id\r\n * @param {*} _message the description\r\n */\r\nexport function Exception(_id, _message) {\r\n    return new OxjsError(_id, _message);\r\n}\r\n\r\n/**\r\n * exception of no implementation\r\n */\r\nexport function NO_IMPLEMENT(_tip) {\r\n    return Exception(1, _tip ? `${_tip} has not been implemented` : \"the action in this condition has not been implemented\");\r\n}\r\n/**\r\n * exception of expecting a parameter\r\n * @param {*} _tip tip of the parameter\r\n */\r\nexport function EXPECT_PARAM(_tip) {\r\n    return Exception(2, _tip ? `expect param: ${_tip}` : \"missing the valid parameters\");\r\n}\r\n\r\n/**\r\n * exception of fail in parsing xml\r\n * @param {*} _tip message of the detail\r\n */\r\nexport function XML_PARSE_FAIL(_tip) {\r\n    return Exception(3, _tip ? `fail in parse xml for \"${_tip}\"` : \"fail in parse XML\");\r\n}\r\n\r\n/**\r\n * exception of no enough id\r\n */\r\nexport const NO_ENOUGH_ID = Exception(4, \"no enough ID\");\r\n\r\n/**\r\n * exception of data is not in the same package\r\n * @param {*} _tip message of the detail\r\n */\r\nexport function FROM_OTHER_PACKAGE(_tip) {\r\n    return Exception(5, _tip ? `resource(\"${_tip}\") is from a different package` : \"resource is from a different package\");\r\n}\r\n\r\n/**\r\n * exception of fail in locating node\r\n */\r\nexport function LOCATE_NODE_FAIL(_tip) {\r\n    return Exception(6, _tip ? `fail to locate the node(${_tip}) for operation` : \"fail to locate the node for operation\");\r\n}\r\n\r\n/**\r\n * exception of fail in locating the resource\r\n */\r\nexport function LOCATE_RESOURCE_FAIL(_tip) {\r\n   return Exception(7, _tip ? `fail to locate the resource for operation: ${_tip}` : \"fail to locate the resource for operation\");\r\n}\r\n\r\n/**\r\n * exception of acquiring the resource\r\n * @param {String} _tip message of the detail\r\n */\r\nexport function ACQUIRE_RESOURCE_FAIL(_tip) {\r\n    return Exception(8, _tip ? `fail to acquire resource: ${_tip}` : \"fail to acquire resource\");\r\n}\r\n\r\n/**\r\n * assert\r\n * @param {*} _cond the expression of a condition to be checked\r\n * @param {*} _error the exception will be thrown if the condition is false\r\n * @returns {*} the result of the \"_cond\"\r\n */\r\nexport function assert(_cond, _error) {\r\n    if (!_cond) {\r\n        throw _error || new OxjsError(NaN, \"assert\");\r\n    }\r\n    return _cond;\r\n}\r\n\r\n/**\r\n * throw an exception if something is not implemented.\r\n * uses for null interface\r\n * @param {String} _tip the name of the action which is not implemented\r\n */\r\nexport function NoImplemented(_tip) {\r\n    throw NO_IMPLEMENT(tip);\r\n}\r\n","/**\r\n * declare readonly member(s) for an object\r\n * @param {*} _obj the object which will be modified\r\n * @param {String|Symbol|Object} _keyOrMap an object contains the members, or the name of the member\r\n * @param {*} _value the value of the member, this parameter is used only when the 2rd paramter is the name of the member\r\n */\r\nexport function readonly(_obj, _keyOrMap, _value) {\r\n    if (arguments.length > 2) {\r\n        Object.defineProperty(_obj, _keyOrMap, {\r\n            value: _value,\r\n            writable: false\r\n        });\r\n    } else {\r\n        for(let key in _keyOrMap) {\r\n            Object.defineProperty(_obj, key, {\r\n                value: _keyOrMap[key],\r\n                writable: false\r\n            });\r\n        }\r\n    }\r\n}\r\n","/**\r\n * generate a random ID\r\n * @param {String} _prefix prefix of the destination id\r\n * @param {*} _radix \r\n */\r\nexport function genRandId(_prefix, _radix) {\r\n    return `${_prefix || \"\"}${Date.now().toString(_radix)}${Math.random().toString(_radix).substr(2,3)}`; \r\n}","import {error} from \"../common\";\r\n\r\nexport class IDom {\r\n    constructor () {}\r\n\r\n    get documentElement() {\r\n        error.NoImplemented(\"IDom.documentElement\");\r\n    }\r\n\r\n    xpathSelect(_expression, _isSingle) {\r\n        error.NoImplemented(\"IDom.xpathSelect\");\r\n    }\r\n\r\n    createElement() {\r\n        error.NoImplemented(\"IDom.createElement\");\r\n    }\r\n\r\n    createElementNS() {\r\n        error.NoImplemented(\"IDom.createElementNS\");\r\n    }\r\n\r\n    static parse(_xmlString) {\r\n        error.NoImplemented(\"IDom.parse\");\r\n    }\r\n\r\n    static isElementNode(_obj) {\r\n        error.NoImplemented(\"IDom.isElementNode\");\r\n    }\r\n}\r\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import {error} from \"../common\";\r\n\r\nexport class IZip {\r\n    constructor() { }\r\n\r\n    async getFile(_file, _format) {\r\n        error.NoImplemented(\"IZip.getFile\");\r\n    }\r\n\r\n    setFile(_file, _content, _format) {\r\n        error.NoImplemented(\"IZip.setFile\");\r\n    }\r\n\r\n    async load(_file) {\r\n        error.NoImplemented(\"IZip.load\");\r\n    }\r\n\r\n    async save() {\r\n        error.NoImplemented(\"IZip.save\");\r\n    }\r\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import { IDom } from \"./domInterface\";\r\nimport { IZip } from \"./zipInterface\";\r\n/**\r\n * Interface of an application enviroment\r\n */\r\nexport class IApplication {\r\n    constructor () {}\r\n\r\n    /**\r\n     * The interface IZip for operating zip package\r\n     */\r\n    static ZIP = IZip;\r\n\r\n    /**\r\n     * The interface IDom for operating DOM\r\n     */\r\n    static DOM = IDom;\r\n}","import { IApplication, IZip } from \"../../dependentInterface\";\r\nimport { error, readonly } from \"../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\nconst CONTENTTYPE_PATH = \"[Content_Types].xml\";\r\nconst EMPTY_CONTENTTYPE_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"true\"?><Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\"></Types>';\r\n\r\n/**\r\n * class for operating the open xml package\r\n */\r\nclass OpenXmlPackage {\r\n    /**\r\n     * construct an OpenXmlPackage object\r\n     * @param {IApplication} application the implementation of IApplication\r\n     * @param {IZip} zip an instance of IZip contains the package\r\n     * @param {String} _contentTypeXML the XML string of the \"[Content_Types].xml\"\r\n     */\r\n    constructor (application, zip, _contentTypeXML) {\r\n        readonly(this, { \r\n            application,\r\n            zip,\r\n            contentTypes: application.DOM.parse(_contentTypeXML || EMPTY_CONTENTTYPE_XML)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * save the current package\r\n     */\r\n    save() {\r\n        const zip = this.zip;\r\n        zip.setFile(CONTENTTYPE_PATH, this.contentTypes.toString());\r\n        return zip.save();\r\n    }\r\n\r\n    /**\r\n     * 设置包中一个文件的内容\r\n     * @param {String} _path 文件在包中的路径\r\n     * @param {*} _data 文件的数据\r\n     * @param {String} _contentType 文件的内容类型，如果不传入该参数，则不更新文件的内容类型\r\n     */\r\n    /**\r\n     * set a file into the package\r\n     * if the file is already in the package, it will be replace\r\n     * @param {String} _path the path of the file in the package\r\n     * @param {*} _data the content of the file\r\n     * @param {String} _format the format of the content, support \"binary\" and \"text\"\r\n     * @param {String} _contentType the type of the content, see the stand of the OpenXML\r\n     */\r\n    setFile(_path, _data, _format, _contentType) {\r\n        this.zip.setFile(_path, _data, _format);\r\n        if (_contentType) {\r\n            const dom = this.contentTypes;\r\n            const partName = `/${_path}`.replace(/\\\\/ig, \"/\");\r\n            const contentTypes = assert(dom.xpathSelect(\"//*[local-name(.)='Types']\", true), \r\n                                        error.LOCATE_NODE_FAIL(\"Types in [content types].xml\"));\r\n            const typeDesc = contentTypes.xpathSelect(`./*[local-name(.)='Override' and @PartName='${partName}']`, true);\r\n            if (typeDesc) {\r\n                typeDesc.setAttribute(\"ContentType\", _contentType);\r\n            } else {\r\n                const newItem = assert(dom.createElement(\"Override\"), \r\n                                       error.ACQUIRE_RESOURCE_FAIL('\"Override\" node in ContentType'));\r\n                newItem.setAttribute(\"ContentType\", _contentType);\r\n                newItem.setAttribute(\"PartName\", partName);\r\n                contentTypes.appendChild(newItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get a file from the package\r\n     * @param {String} _path the path of the file in the package\r\n     * @param {String} _format the format of the content, support \"binary\" and \"text\"\r\n     */\r\n    getFile(_path, _format) {\r\n        return this.zip.getFile(_path, _format);\r\n    }\r\n\r\n    /**\r\n     * 设置一个扩展名对应的内容类型\r\n     * @param {String} _extension 扩展名\r\n     * @param {String} _type 扩展名对应的内容类型\r\n     */\r\n    setExtensionType(_extension, _type) {\r\n        const dom = this.contentTypes;\r\n        const contentTypes = assert(dom.xpathSelect(\"//*[local-name(.)='Types']\", true), \r\n                                    error.LOCATE_NODE_FAIL(\"Types in [content types].xml\"));\r\n        _extension = _extension.replace(/^\\./, \"\");\r\n        const typeDesc = contentTypes.xpathSelect(`./*[local-name(.)='Default' and @Extension='${_extension}']`, true);\r\n        if (typeDesc) {\r\n            typeDesc.setAttribute(\"ContentType\", _type);\r\n        } else {\r\n            const newItem = assert( dom.createElement(\"Default\"),\r\n                                    error.ACQUIRE_RESOURCE_FAIL('\"Default\" node in ContentType'));\r\n            newItem.setAttribute(\"ContentType\", _type);\r\n            newItem.setAttribute(\"Extension\", _extension);\r\n            contentTypes.appendChild(newItem);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n */\r\nexport default {\r\n    /**\r\n     * Open a package, and return an instance of OpenXmlPackage\r\n     * @param {IApplication} _app an implementation of IApplication\r\n     * @param {*} _package any data of the package, the format dependent on the implementation of IZip\r\n     * @return {Promise<OpenXmlPackage>} a promise that will be resolved with an object of OpenXmlPackage\r\n     */\r\n    async open(_app, _package) {\r\n        if (IApplication.isPrototypeOf(_app)) {\r\n            const zip = await (new _app.ZIP()).load(_package);\r\n            if (zip instanceof IZip) {\r\n                const contentTypeXML = await zip.getFile(CONTENTTYPE_PATH);\r\n                return new OpenXmlPackage(_app, zip, contentTypeXML);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * check if the input object is an instance of OpenXmlPackage class\r\n     * @param {*} _obj\r\n     */\r\n    isPackage(_obj) {\r\n        return _obj instanceof OpenXmlPackage;\r\n    },\r\n\r\n    /**\r\n     * extern the prototype of OpenXmlPackage class\r\n     * @param {Object} _obj \r\n     */\r\n    extern(_obj) {\r\n        for (let item in _obj) {\r\n            OpenXmlPackage.prototype[item] = _obj[item];\r\n        }\r\n    }\r\n}","import { default as OpenPackage } from \"./openXmlPackage\";\r\nimport path from \"path\";\r\nimport { readonly, error, genRandId } from \"../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\n// registed table for subclassed part\r\nconst registedParts = {};\r\n\r\n// XML for relationship file initialization\r\nconst EMPTY_RELATIONSHRIP_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"></Relationships>';\r\n\r\n/**\r\n * basic class of all OpenXML part\r\n */\r\nexport class OpenXmlPart {\r\n    //#region static members\r\n\r\n    /**\r\n     * get the path of the relationship file from the path of the part file path\r\n     * @param {*} _partPath the path of the part file\r\n     */\r\n    static getRelationshipPath(_partPath) {\r\n        const partDir = path.dirname(_partPath);\r\n        const partFileName = path.basename(_partPath);\r\n        return path.join(partDir, `./_rels/${partFileName}.rels`).replace(/\\\\/ig, \"/\");\r\n    }\r\n\r\n    /**\r\n     * load and instance a part from a package\r\n     * @param {*} _package \r\n     * @param {*} _path \r\n     * @param {*} _opt \r\n     */\r\n    static async load(_package, _path, _opt) {\r\n        if (OpenPackage.isPackage(_package)) {\r\n            const path = String(_path || this.DefaultPath).replace(/\\\\/ig, \"/\").replace(/^\\//, \"\");\r\n            const relationshipPath = OpenXmlPart.getRelationshipPath(path);\r\n            const content = await _package.getFile(path, this.ContentFormat);\r\n            if (content) {\r\n                const relationshipXML = await _package.getFile(relationshipPath, \"text\");\r\n                const opt = {\r\n                    path,\r\n                    content,\r\n                    relationshipPath,\r\n                    relationshipXML,\r\n                    package: _package\r\n                };\r\n                _opt && Object.assign(opt, _opt);\r\n                return new this(opt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * convert the given part to the invoker class\r\n     * @param {OpenXmlPart} _part part which will be converted\r\n     * @param {*} _opt the extension options passed to the constructor of the invoker class\r\n     */\r\n    static async convert(_part, _opt) {\r\n        assert(_part instanceof OpenXmlPart, error.EXPECT_PARAM(\"_part must be instance of OpenXmlPart\"));\r\n\r\n        const path = _part.path;\r\n        const relationshipPath = _part.relationshipPath;\r\n        const content = await _part.package.getFile(path, this.ContentFormat);\r\n        if (content) {\r\n            const relationshipXML = await _part.package.getFile(relationshipPath, \"text\");\r\n            const opt = {\r\n                path,\r\n                content,\r\n                relationshipPath,\r\n                relationshipXML,\r\n                package: _part.package\r\n            };\r\n            _opt && Object.assign(opt, _opt);\r\n            return new this(opt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * create a new part\r\n     * It should be override by the subclass if subclass needs this function\r\n     * @param {OpenXmlPackage} _package the package store the new part\r\n     * @param {String} _path the path in the package which the new part will save to\r\n     * @returns {OpenXmlPart} the instance of the new part\r\n     */\r\n    static async create(_package, _path) {\r\n        error.NoImplemented(`${this.name}.create`);\r\n    }\r\n\r\n    /**\r\n     * string of the content's type, may be override by the subclass\r\n     */\r\n    static ContentType = undefined;\r\n\r\n    /**\r\n     * uri string of the part's schemas, must be override by the subclass\r\n     */\r\n    static SchemasURI = undefined;\r\n\r\n    /**\r\n     * format of the part's content, may be override by the subclass\r\n     */\r\n    static ContentFormat = \"text\";\r\n\r\n    /**\r\n     * the default path of the kind of part, mat be override by the subclass\r\n     */\r\n    static DefaultPath = \"\";\r\n\r\n    /**\r\n     * register a subclass part\r\n     * @param {Class} _partClass class extends OpenXmlPart\r\n     */\r\n    static register(_partClass) {\r\n        assert(OpenXmlPart.isPrototypeOf(_partClass), error.EXPECT_PARAM(\"_partClass\"));\r\n        assert(_partClass.SchemasURI, error.EXPECT_PARAM(\"_partclass.schemasURI\"));\r\n\r\n        registedParts[_partClass.SchemasURI] = _partClass;\r\n        \r\n        return _partClass;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    constructor(_opt) {\r\n        const opt = _opt || {};\r\n\r\n        assert(opt.path && opt.content, error.EXPECT_PARAM(\"opt.partPath & opt.partXML\"));\r\n        assert(opt.package, error.EXPECT_PARAM(\"opt.package\"));\r\n        const relationshipDom = opt.relationshipXML && opt.package.application.DOM.parse(opt.relationshipXML);\r\n\r\n        readonly(this, {\r\n            package: opt.package,\r\n            path: opt.path,\r\n            relationshipPath: opt.relationshipPath\r\n        });\r\n        relationshipDom && readonly(this, { relationshipDom });\r\n    }\r\n\r\n    //#region instance members\r\n\r\n    /**\r\n     * save this part into the package\r\n     */\r\n    commit() {\r\n        const pkg = this.package;\r\n        if (pkg) {\r\n            const content = this.content;\r\n            content && pkg.setFile(this.path, content, this.constructor.ContentType);\r\n            const relationshipDom = this.relationshipDom;\r\n            relationshipDom && pkg.setFile(this.relationshipPath, relationshipDom.toString(), \"text\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if two part in the same package\r\n     * @param {OpenXmlPart} _part the part to be checked\r\n     */\r\n    inSamePackage(_part) {\r\n        return _part && (_part.package === this.package);\r\n    }\r\n\r\n    /**\r\n     * duplicate the part\r\n     * @param {String} _path the path for the new part\r\n     * @param {OpenXmlPackage} _package the package the save the new part, takes current package if this parameter is empty\r\n     * @param {*} _opt the parameter passed to OpenXmlPart.load as the 3rd parameter\r\n     */\r\n    duplicate(_path, _package, _opt) {\r\n        const targetPackage = _package || this.package;\r\n        const content = this.content;\r\n        // this action is only valid when the content is not empty, and has a different path or in different package\r\n        if (content && ((targetPackage !== this.package) || (_path !== this.path))) {\r\n            // copy the content and relationship content\r\n            targetPackage.setFile(_path, content, this.ContentFormat, this.constructor.ContentType);\r\n            const relationshipDom = this.relationshipDom;\r\n            relationshipDom && targetPackage.setFile(OpenXmlPart.getRelationshipPath(_path), relationshipDom.toString(), \"text\");\r\n            // TODO: to correct the relationship parts\r\n            // ...\r\n            // instance the new part object\r\n            return this.constructor.load(targetPackage, _path, _opt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get a relation part\r\n     * @param {String|Class} _idOrClass id of the relation part, or a class of the relation part\r\n     */\r\n    async getRelationPart(_idOrClass) {\r\n        const rels = this.relationshipDom;\r\n        if (rels) {\r\n            const nodeSel = OpenXmlPart.isPrototypeOf(_idOrClass)\r\n                                ? rels.xpathSelect(`.//*[local-name(.)='Relationship' and @Type='${_idOrClass.SchemasURI}']`, true)\r\n                                : rels.xpathSelect(`.//*[local-name(.)='Relationship' and @Id='${_idOrClass}']`, true);\r\n            if (nodeSel) {\r\n                const typeAttr = nodeSel.getAttribute(\"Type\");\r\n                let targetPath = String(nodeSel.getAttribute(\"Target\")).replace(/\\\\/ig, \"/\");\r\n                path.isAbsolute(targetPath) || (targetPath = path.join(path.dirname(this.path), targetPath));\r\n                const ctor = registedParts[typeAttr] || OpenXmlPart;\r\n                const part = await ctor.load(this.package, targetPath);\r\n                part && readonly(part, { relationshipId: String(nodeSel.getAttribute(\"id\")) });\r\n                return part;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * insert a part as the relation part of current part\r\n     * @param {OpenXmlPart} _part the part will be inserted\r\n     */\r\n    insertRelationPart(_part) {\r\n        assert(_part instanceof OpenXmlPart, error.EXPECT_PARAM(\"_part\"));\r\n        \r\n        const targetRelPath = path.relative(path.dirname(this.path), _part.path).replace(/\\\\/ig, \"/\");\r\n        const rid = genRandId(\"R\", 16);\r\n\r\n        let rels = this.relationshipDom;\r\n        if (!rels) {\r\n            readonly(this, {relationshipDom: this.package.application.DOM.parse(EMPTY_RELATIONSHRIP_XML)});\r\n            rels = this.relationshipDom;\r\n        }\r\n\r\n        assert(rels, error.ACQUIRE_RESOURCE_FAIL(\"Relationship DOM\"));\r\n\r\n        const relNode = rels.createElement(\"Relationship\");\r\n        assert(relNode, error.ACQUIRE_RESOURCE_FAIL(\"Relationship Node\"));\r\n\r\n        relNode.setAttribute(\"Target\", targetRelPath);\r\n        relNode.setAttribute(\"Type\", _part.constructor.SchemasURI);\r\n        relNode.setAttribute(\"Id\", rid);\r\n        rels.documentElement.appendChild(relNode);\r\n\r\n        return rid;\r\n    }\r\n\r\n    /**\r\n     * generate a iterator for relation parts\r\n     * @param {String|Class|undefined} _class   class of the target part, \r\n     *                                          or the string of target part's type, \r\n     *                                          undefined for iterate all relation parts\r\n     */\r\n    * relationParts(_class) {\r\n        const rels = this.relationshipDom;\r\n        if (rels) {\r\n            const nodeList = OpenXmlPart.isPrototypeOf(_class)\r\n                                ? rels.xpathSelect(`.//*[local-name(.)='Relationship' and @Type='${_class.SchemasURI}']`)\r\n                                : (typeof _class === \"string\"\r\n                                    ? rels.xpathSelect(`.//*[local-name(.)='Relationship' and @Type='${_class}']`)\r\n                                    : rels.xpathSelect(\".//*[local-name(.)='Relationship']\"));\r\n            if (nodeList) {\r\n                const curDir = path.dirname(this.path);\r\n                for (let index in nodeList) {\r\n                    const node = nodeList[index];\r\n                    const relationshipId = node.getAttribute(\"id\");\r\n                    const type = node.getAttribute(\"Type\");\r\n                    let target = String(node.getAttribute(\"Target\")).replace(/\\\\/ig, \"/\");\r\n                    path.isAbsolute(target) || (target = path.join(curDir, target));\r\n                    const ctor = registedParts[type] || OpenXmlPart;\r\n                    yield {\r\n                        index,\r\n                        relationshipId,\r\n                        target,\r\n                        class: ctor,\r\n                        type,\r\n                        node\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n}\r\n\r\n","import { readonly } from \"../../common\";\r\nimport { OpenXmlPart } from \"./openXmlPart\";\r\n\r\n/**\r\n * basic class of all OpenXML part which content is binary\r\n * @extends OpenXmlPart\r\n */\r\nexport class OpenXmlBinaryPart extends OpenXmlPart {\r\n    static ContentFormat = \"binary\";\r\n\r\n    constructor (_opt) {\r\n        super(_opt);\r\n        readonly(this, {\r\n            content: _opt.content\r\n        });\r\n    }\r\n}\r\n","import { error } from \"../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\n/**\r\n * basic class of OpenXML attributes\r\n */\r\nexport class OpenXmlAttribute {\r\n    /**\r\n     * construct an Open XML attribute\r\n     * @param {String} _localName the local name of the attribute\r\n     * @param {String} _nsURI the uri of the name-space of the attribute\r\n     * @param {String} _defPrefix the default prefix of the attribute's name-space\r\n     * @param {Object} _opt the extend options, can be undefined\r\n     *                      format is { default: default-value, checker: func-to-check-the-value }\r\n     */\r\n    constructor (_localName, _nsURI, _defPrefix, _opt) {\r\n        Object.defineProperties(this, {\r\n            localName: {\r\n                value: String(_localName),\r\n                writable: false\r\n            },\r\n            defaultPrefix: {\r\n                value: _defPrefix && String(_defPrefix),\r\n                writable: false\r\n            },\r\n            namespaceUri: {\r\n                value: String(_nsURI),\r\n                writable: false\r\n            },\r\n            options: {\r\n                value: _opt || {},\r\n                writable: false\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get the qualified name of the attribute\r\n     * it contains the prefix of the name-space and the local-name\r\n     * @param {Node} _node \r\n     */\r\n    qualifiedName(_node) {\r\n        const prefix = _node.lookupPrefix(this.namespaceUri) || this.defaultPrefix;\r\n        return prefix ? `${prefix}:${this.localName}` : this.localName;\r\n    }\r\n\r\n    /**\r\n     * adjust the input value of the attribute\r\n     * @param {*} _val the input value\r\n     */\r\n    adjustValue(_val) {\r\n        (arguments.length <= 0) && (_val = this.options.default);\r\n        const fn = this.options.checker;\r\n        return fn ? fn(_val) : _val; \r\n    }\r\n\r\n    /**\r\n     * get the value of the attribute\r\n     * @param {Node} _node\r\n     */\r\n    getValue(_node) {\r\n        const ns = this.namespaceUri;\r\n\r\n        return ns ? _node.getAttributeNS(ns, this.localName) : _node.getAttribute(this.qualifiedName(_node));\r\n    }\r\n\r\n    /**\r\n     * set the value of the attribute\r\n     * @param {Node} _node \r\n     * @param {*} _val\r\n     */\r\n    setValue(_node, _val) {\r\n        _val = this.adjustValue(_val);\r\n\r\n        const ns = this.namespaceUri;\r\n        ns ? _node.setAttributeNS(ns, this.qualifiedName(_node), _val) : _node.setAttribute(this.localName, _val);\r\n    }\r\n\r\n    /**\r\n     * delete the attribute\r\n     * @param {Node} _node\r\n     */\r\n    remove(_node) {\r\n        const ns = this.namespaceUri;\r\n        ns ? _node.removeAttributeNS(ns, this.localName) : _node.removeAttribute(this.qualifiedName(_node));\r\n    }\r\n\r\n    /**\r\n     * generate a xpath expression part\r\n     * @param {*} _val value for select, can ignore this parameter\r\n     */\r\n    xpath(_val) {\r\n        return `@*[local-name(.)='${this.localName}' and namespace-uri(.)='${this.namespaceUri}' ${(arguments.length > 0) ? `and string(.)='${_val}'` : \"\"}]`\r\n    }\r\n\r\n    /**\r\n     * generate a xpath expression part for searching any attribute with the val\r\n     * @param {*} _val \r\n     */\r\n    static xpathVal(_val) {\r\n        return `@*[string(.)='${_val}']`;\r\n    }\r\n}","import { error, readonly } from \"../../common\";\r\nimport { IDom } from \"../../dependentInterface\";\r\nimport { OpenXmlAttribute } from \"./openXmlAttribute\";\r\n\r\nconst assert = error.assert;\r\n\r\nconst $node = Symbol(\"OpenXmlElement.node\");\r\n\r\n/**\r\n * register map for subclass OpenXML elements\r\n */\r\nconst registedElements = {};\r\n\r\n/**\r\n * basic class of all OpenXml Element\r\n */\r\nexport class OpenXmlElement {\r\n\r\n    constructor (_node, _options) {\r\n        assert(_node, error.EXPECT_PARAM(\"_node\"));\r\n        readonly(this, {\r\n            node: _node\r\n        });\r\n\r\n        if (_options) {\r\n            const children = _options.children || [];\r\n            for (let item of children) {\r\n                assert(item instanceof OpenXmlElement, error.EXPECT_PARAM(\"item in options.children must be instance of OpenXmlElement\"));\r\n                _node.appendChild(item.node);\r\n            }\r\n        }\r\n    }\r\n\r\n    //#region members should be override by subclass\r\n\r\n    /**\r\n     * the local name of this kind of element's node\r\n     */\r\n    static LocalName = undefined;\r\n\r\n    /**\r\n     * the default prefix name of this kind of element's node\r\n     */\r\n    static DefaultPrefix = undefined;\r\n\r\n    /**\r\n     * the uri of this kind of element's namespace\r\n     */\r\n    static NamespaceUri = undefined;\r\n\r\n    //#endregion\r\n\r\n    //#region static members\r\n\r\n    /**\r\n     * register a subclass\r\n     * @param {Class} _elementClass a subclass entends OpenXmlElement\r\n     */\r\n    static register(_elementClass) {\r\n        assert(_elementClass && OpenXmlElement.isPrototypeOf(_elementClass), error.EXPECT_PARAM(\"_elementClass\"));\r\n        assert(_elementClass.NamespaceUri, error.EXPECT_PARAM(`${_elementClass.name}.NamespaceUri`));\r\n\r\n        const key = `${_elementClass.NamespaceUri}::${_elementClass.LocalName}`;\r\n        registedElements[key] = _elementClass;\r\n\r\n        return _elementClass;\r\n    }\r\n\r\n    /**\r\n     * get the prefix in the range of a element\r\n     * this function is not getting the prefix name for the input element but for the invoker class\r\n     * @param {OpenXmlElement} _element\r\n     */\r\n    static prefix(_element) {\r\n        return ((_element instanceof OpenXmlElement) && _element.node.lookupPrefix(this.NamespaceUri)) || this.DefaultPrefix;\r\n    }\r\n\r\n    /**\r\n     * get the qualified name in the range of a element\r\n     * this function is not getting the qualified name for the input element but for the invoker class\r\n     * @param {OpenXmlElement} _element\r\n     */\r\n    static qualifiedName(_element) {\r\n        const singleTagName = this.LocalName;\r\n        assert(singleTagName, error.NO_IMPLEMENT(`${this.name}.LocalName`));\r\n        const prefixName = this.prefix(_element);\r\n        return prefixName ? `${prefixName}:${singleTagName}` : singleTagName;\r\n    }\r\n\r\n    /**\r\n     * instanced an OpenXMLElement object for the input node\r\n     * @param {Element} _node\r\n     */\r\n    static instanced(_node) {\r\n        if (_node && (1 === _node.nodeType)) {\r\n            const key = `${_node.namespaceURI}::${_node.localName}`;\r\n            const ctor = registedElements[key] || OpenXmlElement;\r\n            return new ctor(_node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if the input node matched to the invoker class\r\n     * @param {Element} _node\r\n     */\r\n    static isMatchedNode(_node) {\r\n        return _node && (_node.namespaceURI === this.NamespaceUri) && (_node.localName === this.LocalName);\r\n    }\r\n\r\n    /**\r\n     * create a new element of the invoker class\r\n     * @param {IDOM|Document} _dom the isntance of the IDOM for creating element\r\n     * @param {Element} _parentElement the parent element which will contain the new element\r\n     * @param {*} _options the options for the creation action\r\n     */\r\n    static createElement(_dom, _parentElement, _options) {\r\n        assert(_dom, error.EXPECT_PARAM(\"_dom\"));\r\n\r\n        const node = _dom.createElementNS(this.NamespaceUri, this.qualifiedName(_parentElement));\r\n        if (node) {\r\n            let element = new this(node, _options);\r\n            this.createDetail(element, _options);\r\n            return element;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the action for preparing the detail data of a new instance\r\n     * @param {OpenXmlElement} _element the target element\r\n     * @param {*} _options the options for the creation action\r\n     */\r\n    static createDetail(_element, _options) {\r\n        // assert(_element instanceof this, error.EXPECT_PARAM(`_element must be instance of ${this.name}`));\r\n    }\r\n\r\n    /**\r\n     * generate a xpath part of this class\r\n     * @param {String} _custom some custom expression part, can be ignored.\r\n     */\r\n    static xpath(_custom) {\r\n        return `*[local-name(.)='${this.LocalName}' and namespace-uri(.)='${this.NamespaceUri}' ${_custom || \"\"}]`\r\n    }\r\n\r\n    /**\r\n     * generate a xpath expression for searching\r\n     * @param {String} _prefix the prefix expression, such as \"./\", \".//\", and so on\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will take \"*\" by default if ignore this parameter.\r\n     */\r\n    static genXPath(_prefix, _arg) {\r\n        return `${_prefix}${(((_arg instanceof OpenXmlAttribute) || OpenXmlElement.isPrototypeOf(_arg)) && _arg.xpath()) || _arg || \"*\"}`;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region instance properties\r\n\r\n    /**\r\n     * get the prefix name\r\n     */\r\n    get prefix() {\r\n        return this.node.prefix;\r\n    }\r\n\r\n    /**\r\n     * get the local name\r\n     */\r\n    get localName() {\r\n        return this.node.localName;\r\n    }\r\n\r\n    /**\r\n     * get the qualified name\r\n     */\r\n    get qualifiedName() {\r\n        return this.node.nodeName;\r\n    }\r\n\r\n    /**\r\n     * get the text content of this instance\r\n     */\r\n    get textContent() {\r\n        return this.node.textContent;\r\n    }\r\n\r\n    /**\r\n     * set the text content of this instance\r\n     */\r\n    set textContent(_val) {\r\n        this.node.textContent = _val\r\n    }\r\n\r\n    /**\r\n     * get the class name of this instance\r\n     */\r\n    get className() {\r\n        return this.constructor.name;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region instance methods\r\n\r\n    /**\r\n     * search all children matched the parameter\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will match any children by default if ignore this parameter.\r\n     */\r\n    children(_arg) {\r\n        const selectExp = this.constructor.genXPath(\"./\", _arg);\r\n        const nodes = this.node.xpathSelect(selectExp);\r\n        return nodes ? nodes.map(node => OpenXmlElement.instanced((1 !== node.nodeType) ? node.ownerElement : node) || node) : [];\r\n    }\r\n\r\n    /**\r\n     * search all descendants matched the parameter\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will match any descendants by default if ignore this parameter.\r\n     */\r\n    descendants(_arg) {\r\n        const selectExp = this.constructor.genXPath(\".//\", _arg);\r\n        const nodes = this.node.xpathSelect(selectExp);\r\n        return nodes ? nodes.map(node => OpenXmlElement.instanced((1 !== node.nodeType) ? node.ownerElement : node) || node) : [];\r\n    }\r\n\r\n    /**\r\n     * search the first children matched the parameter\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will match any children by default if ignore this parameter.\r\n     */\r\n    childOne(_arg) {\r\n        const selectExp = this.constructor.genXPath(\"./\", _arg);\r\n        const node = this.node.xpathSelect(selectExp, true);\r\n        return node && (OpenXmlElement.instanced((1 !== node.nodeType) ? node.ownerElement : node) || node);\r\n    }\r\n\r\n    /**\r\n     * search the first descendant matched the parameter\r\n     * @param {OpemXmlAttribute|Class|String|undefined} _arg the xpath part, can be insatnce of attribute, class, string.\r\n     *                                                       function will match any descendant by default if ignore this parameter.\r\n     */\r\n    descendantOne(_arg) {\r\n        const selectExp = this.constructor.genXPath(\".//\", _arg);\r\n        const node = this.node.xpathSelect(selectExp, true);\r\n        return node && (OpenXmlElement.instanced((1 !== node.nodeType) ? node.ownerElement : node) || node);\r\n    }\r\n\r\n    /**\r\n     * append a element as the last child of the current element\r\n     * @param {OpenXmlElement} _element the element will be append\r\n     */\r\n    appendChild(_element) {\r\n        assert(_element instanceof OpenXmlElement, error.EXPECT_PARAM(\"_element\"));\r\n\r\n        this.node.appendChild(_element.node);\r\n    }\r\n\r\n    /**\r\n     * insert a element as a child of this element in a special postion\r\n     * @param {OpenXmlElement} _element the element will be inserted\r\n     * @param {Number} _position the index of the element will be inserted in, ignore this parameter will insert the element at the end of this element.\r\n     */\r\n    insertChild(_element, _position) {\r\n        assert(_element instanceof OpenXmlElement, error.EXPECT_PARAM(\"_element\"));\r\n\r\n        const nodeList = this.node.childNodes;\r\n        this.node.insertBefore(_element.node, \r\n                                (nodeList && (typeof _position === \"number\") && (_position >= 0) && (_position < nodeList.length)) \r\n                                    ? nodeList[_position] : null);\r\n    }\r\n\r\n    /**\r\n     * insert a element as the sibling of the current element\r\n     * @param {OpenXmlElement} _element the element will be inserted\r\n     * @param {Boolean} _before true for insert before the current element, false for insert after the current element\r\n     */\r\n    insertAsSibling(_element, _before) {\r\n        assert(_element instanceof OpenXmlElement, error.EXPECT_PARAM(\"_element\"));\r\n\r\n        const refNode = this.node;\r\n        const parent = refNode.parentNode;\r\n        parent && parent.insertBefore(_element.node, _before ? refNode : refNode.nextSibling);\r\n    }\r\n\r\n    /**\r\n     * create a new element of the given class\r\n     * @param {Class} _elementClass the class of the new element\r\n     * @param {*} _options the options for the creation action\r\n     */\r\n    createElement(_elementClass, _options) {\r\n        assert(OpenXmlElement.isPrototypeOf(_elementClass), error.EXPECT_PARAM(\"_elementClass\"));\r\n\r\n        return _elementClass.createElement(this.node.ownerDocument, this, _options);\r\n    }\r\n\r\n    /**\r\n     * remove the current from the DOM\r\n     */\r\n    remove() {\r\n        const parent = this.node.parentNode;\r\n\r\n        parent && parent.removeChild(this.node);\r\n    }\r\n\r\n    /**\r\n     * set a attribute\r\n     * @param {OpenXmlAttribute|String} _attr attribute object or attribute's name\r\n     * @param {*} _val value of the attribute\r\n     */\r\n    setAttribute(_attr, _val) {\r\n        (_attr instanceof OpenXmlAttribute)\r\n            ? _attr.setValue(this.node, _val)\r\n            : this.node.setAttribute(String(_attr), _val);\r\n    }\r\n\r\n    /**\r\n     * get the value of the given attribute\r\n     * @param {OpenXmlAttribute|String} _attr attribute object or attribute's name\r\n     */\r\n    getAttribute(_attr) {\r\n        return (_attr instanceof OpenXmlAttribute)\r\n                    ? _attr.getValue(this.node)\r\n                    : this.node.getAttribute(String(_attr));\r\n    }\r\n\r\n    /**\r\n     * remove the given attribute\r\n     * @param {OpenXmlAttribute|String} _attr attribute object or attribute's name\r\n     */\r\n    removeAttribute(_attr) {\r\n        return (_attr instanceof OpenXmlAttribute)\r\n                    ? _attr.remove(this.node)\r\n                    : this.node.removeAttribute(String(_attr));\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","import { readonly } from \"../../common\";\r\nimport { OpenXmlPart } from \"./openXmlPart\";\r\nimport { OpenXmlElement } from \"./openXmlElement\";\r\nimport { error } from \"../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\n/**\r\n * basic class of all OpenXML part which content is XML\r\n * @extends OpenXmlPart\r\n */\r\nexport class OpenXmlPurePart extends OpenXmlPart {\r\n\r\n    constructor(_opt) {\r\n        super(_opt);\r\n\r\n        readonly(this, {\r\n            contentDom: _opt.package.application.DOM.parse(_opt.content)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get the data of the content\r\n     */\r\n    get content() {\r\n        return this.contentDom.toString();\r\n    }\r\n\r\n    /**\r\n     * get the instance of OpenXmlElement for the primary element in the DOM\r\n     */\r\n    get primaryElement() {\r\n        return OpenXmlElement.instanced(this.contentDom.documentElement);\r\n    }\r\n\r\n    /**\r\n     * create a new element of the given class\r\n     * @param {Class} _elementClass the class of the new element\r\n     * @param {*} _options the options for the creation action\r\n     */\r\n    createElement(_elementClass, _options) {\r\n        const root = this.primaryElement;\r\n        if (root) {\r\n            return root.createElement(_elementClass, _options);\r\n        } else {\r\n            return _elementClass.createElement && _elementClass.createElement(this.contentDom, null, _options);\r\n        }\r\n    }\r\n}","export const relationship = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\";","import { OpenXmlAttribute } from \"../../../basic\";\r\nimport { relationship } from \"./namespaceURI\";\r\n\r\nexport const AttrRelationshipId = new OpenXmlAttribute(\"id\", relationship, \"r\");\r\n","import { OpenXmlAttribute } from \"../../../basic\";\r\nimport { relationship } from \"./namespaceURI\";\r\n\r\nexport const AttrEmbed = new OpenXmlAttribute(\"embed\", relationship, \"r\");\r\n","export const main = \"http://schemas.openxmlformats.org/presentationml/2006/main\";","import { OpenXmlElement } from \"../../../basic\";\r\nimport { main as mainURI } from \"./namespaceURI\";\r\n\r\n/**\r\n * basic class for elements defined in presentation2006\r\n */\r\nexport default class Presentation2006 extends OpenXmlElement {\r\n    //#region override the key information\r\n    static NamespaceUri = mainURI;\r\n    static DefaultPrefix = \"p\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n}\r\n","import Presentations2006 from \"./basic\";\r\nimport { AttrRelationshipId } from \"../../officeDocument\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { genRandId } from \"../../../../common\";\r\n\r\n/**\r\n * class of the slide's id, element with tag \"sldId\"\r\n * @class SlideId\r\n */\r\nexport const SlideId = OpenXmlElement.register(class SlideId extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"sldId\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the relationship ID\r\n     */\r\n    get relationshipId() {\r\n        let id = this.getAttribute(AttrRelationshipId);\r\n        if (!id) {\r\n            id = genRandId(\"R\");\r\n            this.setAttribute(AttrRelationshipId, id);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * set the relationship ID\r\n     */\r\n    set relationshipId(_val) {\r\n        this.setAttribute(AttrRelationshipId, _val || utility.genRandId(\"R\", 16));\r\n    }\r\n\r\n    /**\r\n     * get the ID\r\n     */\r\n    get id() {\r\n        return this.getAttribute(\"id\");\r\n    }\r\n\r\n    /**\r\n     * set the ID\r\n     */\r\n    set id(_val) {\r\n        _val = Number(_val);\r\n        isNaN(_val) || this.setAttribute(\"id\", _val);\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { SlideId } from \"./slideId\";\r\n\r\n/**\r\n * class of the list of the slide's ID, element with tag \"sldIdLst\"\r\n * @class SlideIdList\r\n */\r\nexport const SlideIdList = OpenXmlElement.register(class SlideIdList extends Presentations2006 {\r\n    //#region override the key inforamtion\r\n    static LocalName = \"sldIdLst\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get count of the IDs\r\n     */\r\n    get count() {\r\n        return this.children(SlideId).length;\r\n    }\r\n\r\n    /**\r\n     * get an iterator for enumerating all SlideIds\r\n     */\r\n    *items() {\r\n        const list = this.children(SlideId);\r\n        for (let index in list) {\r\n            yield {\r\n                index,\r\n                slideId: list[index]\r\n            };\r\n        }\r\n    }\r\n\r\n});","import Presentations2006 from \"./basic\";\r\nimport { SlideIdList } from \"./slideIdList\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the presetation, element with tag \"presentation\"\r\n */\r\nexport const Presentation = OpenXmlElement.register(class Presentation extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"presentation\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the list of the slide's id\r\n     */\r\n    get slideIdList() {\r\n        let list = this.children(SlideIdList);\r\n        if (list.length <= 0) {\r\n            list = this.createElement(SlideIdList);\r\n            this.appendChild(list);\r\n        } else {\r\n            list = list[0];\r\n        }\r\n        return list;\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { CommonSlideData } from \"./commonSlideData\";\r\n\r\n/**\r\n * class of element contains the nonvisual information, element with tag \"cNvPr\"\r\n * @class NonVisualDrawingProperties\r\n */\r\nexport const NonVisualDrawingProperties = OpenXmlElement.register(class NonVisualDrawingProperties extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"cNvPr\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the name information\r\n     */\r\n    get name() {\r\n        return this.getAttribute(\"name\")\r\n    }\r\n\r\n    /**\r\n     * set the name information\r\n     */\r\n    set name(_val) {\r\n        this.setAttribute(\"name\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the ID\r\n     */\r\n    get id() {\r\n        return this.getAttribute(\"id\");\r\n    }\r\n\r\n    /**\r\n     * set the ID\r\n     */\r\n    set id(_val) {\r\n        this.setAttribute(\"id\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the description\r\n     */\r\n    get description() {\r\n        return this.getAttribute(\"descr\");\r\n    }\r\n\r\n    /**\r\n     * set the description\r\n     */\r\n    set description(_val) {\r\n        return this.setAttribute(\"descr\", _val);\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualDrawingProperties } from \"./cNvPr\";\r\n\r\n/**\r\n * basic class of the nonvisual properties\r\n * @class NonVisualPropertiesBase\r\n */\r\nexport class NonVisualPropertiesBase extends Presentations2006 {\r\n    \r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the name information\r\n     */\r\n    get name() {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        return pr && pr.name;\r\n    }\r\n\r\n    /**\r\n     * set the name information\r\n     */\r\n    set name(_val) {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        pr && (pr.name = _val);\r\n    }\r\n\r\n    /**\r\n     * get the ID information\r\n     */\r\n    get id() {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        return pr && pr.id;\r\n    }\r\n\r\n    /**\r\n     * set the ID information\r\n     */\r\n    set id(_val) {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        pr && (pr.id = _val);\r\n    }\r\n\r\n    /**\r\n     * get the description\r\n     */\r\n    get description() {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        return pr && pr.description;\r\n    }\r\n\r\n    /**\r\n     * set the description\r\n     */\r\n    set description(_val) {\r\n        const pr = this.childOne(NonVisualDrawingProperties);\r\n        pr && (pr.description = _val);\r\n    }\r\n}","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualPropertiesBase } from \"./nonVisualPropertiesBase\";\r\n\r\n/**\r\n * class of the nonvisual properties of the shape's group, element with tag \"nvGrpSpPr\"\r\n * @class NonVisualGroupShapeProperties\r\n */\r\nexport const NonVisualGroupShapeProperties = OpenXmlElement.register(class NonVisualGroupShapeProperties extends NonVisualPropertiesBase {\r\n    //#region override the key information\r\n    static LocalName = \"nvGrpSpPr\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\n\r\n/**\r\n * basic class of all visual object in the slide\r\n */\r\nexport class VisualSlideObject extends Presentations2006 {\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n}\r\n","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualGroupShapeProperties } from \"./nonVisualGroupShapeProperties\";\r\nimport { VisualSlideObject } from \"./visualSlideObject\";\r\n\r\n/**\r\n * basic class of all element contain a group of shape\r\n * @class GroupShapeBase\r\n */\r\nexport class GroupShapeBase extends VisualSlideObject {\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the nonvisual properties\r\n     */\r\n    get nonVisualProperties() {\r\n        let pr = this.childOne(NonVisualGroupShapeProperties);\r\n        if (!pr) {\r\n            pr = this.createElement(NonVisualGroupShapeProperties);\r\n            pr && this.appendChild(pr);\r\n        }\r\n        return pr;\r\n    }\r\n\r\n    /**\r\n     * get an iterator for enumerating the visual elements\r\n     */\r\n    * visualChildren() {\r\n        let list = this.children(\"*\");\r\n        for (let idx in list) {\r\n            const element = list[idx];\r\n            if (element instanceof VisualSlideObject) {\r\n                yield element;\r\n            }\r\n        };\r\n    }\r\n};","import { GroupShapeBase } from \"./groupShapeBase\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the tree of the shapes, element with tag \"spTree\"\r\n * @class ShapeTree\r\n */\r\nexport const ShapeTree = OpenXmlElement.register(class ShapeTree extends GroupShapeBase {\r\n    //#region override the key information\r\n    static LocalName = \"spTree\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    \r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { ShapeTree } from \"./shapeTree\";\r\n\r\n/**\r\n * class of the common data of the slide, element with tag \"cSld\"\r\n * @class CommonSlideDatas\r\n */\r\nexport const CommonSlideData = OpenXmlElement.register(class CommonSlideData extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"cSld\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the tree of the shapes\r\n     */\r\n    get shapeTree() {\r\n        let tree = this.childOne(ShapeTree);\r\n        if (!tree) {\r\n            tree = this.createElement(ShapeTree);\r\n            tree && this.appendChild(tree);\r\n        }\r\n        return tree;\r\n    }\r\n});","import Presentations2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { CommonSlideData } from \"./commonSlideData\";\r\n\r\n/**\r\n * class of the slide, element with tag \"sld\"\r\n */\r\nexport const Slide = OpenXmlElement.register(class Slide extends Presentations2006 {\r\n    //#region override the key information\r\n    static LocalName = \"sld\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the common data of the slide\r\n     */\r\n    get commonData() {\r\n        let cSld = this.childOne(CommonSlideData);\r\n        if (!cSld) {\r\n            cSld = this.createElement(CommonSlideData);\r\n            cSld && this.appendChild(cSld);\r\n        }\r\n        return cSld;\r\n    }\r\n});","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualPropertiesBase } from \"./nonVisualPropertiesBase\";\r\n\r\n/**\r\n * class of the nonvisual properties of the shape, element with tag \"nvSpPr\"\r\n * @class NonVisualShapeProperties\r\n */\r\nexport const NonVisualShapeProperties = OpenXmlElement.register(class NonVisualShapeProperties extends NonVisualPropertiesBase {\r\n    //#region override the key inforamtion\r\n    static LocalName = \"nvSpPr\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n});","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualPropertiesBase } from \"./nonVisualPropertiesBase\";\r\n\r\n/**\r\n * class of the nonvisual properties of the picture, element with tag \"nvPicPr\"\r\n * @class NonVisualPictureProperties\r\n */\r\nexport const NonVisualPictureProperties = OpenXmlElement.register(class NonVisualPictureProperties extends NonVisualPropertiesBase {\r\n    //#region override the key information\r\n    static LocalName = \"nvPicPr\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n});","import { GroupShapeBase } from \"./groupShapeBase\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the shape's group, element with tag \"grpSp\"\r\n * @class GroupShape\r\n */\r\nexport const GroupShape = OpenXmlElement.register(class GroupShape extends GroupShapeBase {\r\n    //#region override the key information\r\n    static LocalName = \"grpSp\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n    \r\n});","export const main = \"http://schemas.openxmlformats.org/drawingml/2006/main\";","import { OpenXmlElement } from \"../../../basic\";\r\nimport { main as mainURI } from \"./namespaceURI\";\r\n\r\n/**\r\n * basic class of all element defined in drawing2006\r\n */\r\nexport default class Drawing2006 extends OpenXmlElement {\r\n    //#region override the key information\r\n    static NamespaceUri = mainURI;\r\n    static DefaultPrefix = \"a\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n}\r\n","import Drawing2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n//#region a:t\r\n/**\r\n * class of the element with tag \"a:t\"\r\n * @class Text\r\n */\r\nexport const Text = OpenXmlElement.register(class Text extends Drawing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"t\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n});\r\n//#endregion\r\n\r\n//#region a:r\r\n/**\r\n * class of the element with tag \"a:r\"\r\n * @class Run\r\n */\r\nexport const Run = OpenXmlElement.register(class Run extends Drawing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"r\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get all text in the element\r\n     */\r\n    get textContent() {\r\n        const items = this.descendants(Text).map(text => text.textContent);\r\n        \r\n        return items.join(\"\");\r\n    }\r\n});\r\n//#endregion\r\n\r\n//#region a:p\r\n/**\r\n * class of element with tag \"a:p\"\r\n * @class Paragraph\r\n */\r\nexport const Paragraph = OpenXmlElement.register(class Paragraph extends Drawing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"p\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get all text in the element\r\n     */\r\n    get textContent() {\r\n        const items = this.descendants(Text).map(text => text.textContent);\r\n        \r\n        return items.join(\"\");\r\n    }\r\n});\r\n//#endregion\r\n\r\n//#region a:txBody\r\n/**\r\n * class of element with tag \"a:txBody\"\r\n * @class TextBody\r\n */\r\nexport const TextBody = OpenXmlElement.register(class TextBody extends Drawing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"txBody\";\r\n    //#endregion\r\n\r\n    constructor (_node) {\r\n        super(_node);\r\n    }\r\n\r\n    /**\r\n     * get all text in the element\r\n     */\r\n    get textContent() {\r\n        const items = this.descendants(Paragraph).map(p => p.textContent);\r\n        \r\n        return items.join(\"\\r\\n\");\r\n    }\r\n});\r\n//#endregion\r\n","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualShapeProperties } from \"./nonVisualShapeProperties\";\r\nimport { VisualSlideObject } from \"./visualSlideObject\";\r\nimport { TextBody } from \"../../drawing\";\r\n\r\n/**\r\n * class of the shape, element with tag \"sp\"\r\n */\r\nexport const Shape = OpenXmlElement.register(class Shape extends VisualSlideObject {\r\n    //#region override the key information\r\n    static LocalName = \"sp\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the nonvisual properties\r\n     */\r\n    get nonVisualProperties() {\r\n        let pr = this.childOne(NonVisualShapeProperties);\r\n        if (!pr) {\r\n            pr = this.createElement(NonVisualShapeProperties);\r\n            pr && this.appendChild(pr);\r\n        }\r\n        return pr;\r\n    }\r\n\r\n    /**\r\n     * get the text body object\r\n     */\r\n    get textBody() {\r\n        return this.childOne(TextBody);\r\n    }\r\n});","import { OpenXmlElement } from \"../../../basic\";\r\nimport { NonVisualPictureProperties } from \"./nonVisualPictureProperties\";\r\nimport { VisualSlideObject } from \"./visualSlideObject\";\r\n\r\n/**\r\n * class of the picture, element with tag \"pic\"\r\n * @class Picture\r\n */\r\nexport const Picture = OpenXmlElement.register(class Picture extends VisualSlideObject {\r\n    //#region override the key information\r\n    static LocalName = \"pic\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the nonvisual properties\r\n     */\r\n    get nonVisualProperties() {\r\n        let pr = this.childOne(NonVisualPictureProperties);\r\n        if (!pr) {\r\n            pr = this.createElement(NonVisualPictureProperties);\r\n            pr && this.appendChild(pr);\r\n        }\r\n        return pr;\r\n    }\r\n});","export const main = \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\";","import { OpenXmlElement } from \"../../../basic\";\r\nimport { main as mainURI } from \"./namespaceURI\";\r\n\r\n/**\r\n * basic class for elements defined in wordprocessing2006\r\n */\r\nexport default class Wordprocessing2006 extends OpenXmlElement {\r\n    //#region override the key information\r\n    static NamespaceUri = mainURI;\r\n    static DefaultPrefix = \"w\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n}\r\n","import { main as mainURI } from \"./namespaceURI\";\r\nimport Wordprocessing2006 from \"./basic\";\r\nimport { OpenXmlElement, OpenXmlAttribute } from \"../../../basic\";\r\n\r\nexport const AttrValue = new OpenXmlAttribute(\"val\", mainURI, \"w\");\r\n\r\n/**\r\n * class of the paragraph style id, element with tag \"w:pStyle\"\r\n */\r\nexport const ParagraphStyleId = OpenXmlElement.register(class ParagraphStyleId extends Wordprocessing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"pStyle\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the value\r\n     */\r\n    get value() {\r\n        return this.getAttribute(AttrValue);\r\n    }\r\n\r\n    /**\r\n     * set the relationship ID\r\n     */\r\n    set value(_val) {\r\n        if (arguments.length > 0) {\r\n            this.setAttribute(AttrValue, _val);\r\n        } else {\r\n            this.remove();\r\n        }\r\n    }\r\n});","import Wordprocessing2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { ParagraphStyleId } from \"./paragraphStyleId\";\r\n\r\n/**\r\n * class of the table style conditional formatting paragraph properties, element with tag \"w:pPr\"\r\n */\r\nexport const StyleParagraphProperties = OpenXmlElement.register(class StyleParagraphProperties extends Wordprocessing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"pPr\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the paragraph style id\r\n     */\r\n    get paragraphStyleId() {\r\n        const element = this.childOne(ParagraphStyleId);\r\n        return element && element.value;\r\n    }\r\n\r\n    /**\r\n     * set the paragraph style id\r\n     */\r\n    set paragraphStyleId(_val) {\r\n        let element = this.childOne(ParagraphStyleId);\r\n        if ((!element) && (arguments.length > 0)) {\r\n            element = this.createElement(ParagraphStyleId);\r\n            element && this.appendChild(element);\r\n        }\r\n        element && (element.value = _val);\r\n    }\r\n});","import Wordprocessing2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the text, element with tag \"w:t\"\r\n */\r\nexport const Text = OpenXmlElement.register(class Text extends Wordprocessing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"t\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    static createDetail(_text, _options) {\r\n        _text.setAttribute(\"xml:space\", \"preserve\");\r\n        _options && _options.text && (_text.textContent = _options.text);\r\n    }\r\n});","import Wordprocessing2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { Text } from \"./text\";\r\n\r\n/**\r\n * class of the test run, element with tag \"w:r\"\r\n */\r\nexport const Run = OpenXmlElement.register(class Run extends Wordprocessing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"r\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get all text in the element\r\n     */\r\n    get textContent() {\r\n        const items = this.descendants(Text).map(text => text.textContent);\r\n        \r\n        return items.join(\"\");\r\n    }\r\n});","import Wordprocessing2006 from \"./basic\";\r\nimport { OpenXmlElement, OpenXmlAttribute } from \"../../../basic\";\r\nimport { Text } from \"./text\";\r\nimport { StyleParagraphProperties } from \"./styleParagraphProperties\";\r\n\r\n/**\r\n * class of the paragraph, element with tag \"w:p\"\r\n */\r\nexport const Paragraph = OpenXmlElement.register(class Paragraph extends Wordprocessing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"p\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get all text in the element\r\n     */\r\n    get textContent() {\r\n        const items = this.descendants(Text).map(text => text.textContent);\r\n        \r\n        return items.join(\"\");\r\n    }\r\n\r\n    /**\r\n     * get the properties\r\n     */\r\n    get styleProperties() {\r\n        let prop = this.childOne(StyleParagraphProperties);\r\n        if (!prop) {\r\n            prop = this.createElement(StyleParagraphProperties);\r\n            prop && this.insertChild(prop, 0);\r\n        }\r\n        return prop;\r\n    }\r\n});","import Wordprocessing2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the document's body, element with tag \"body\"\r\n */\r\nexport const Body = OpenXmlElement.register(class Body extends Wordprocessing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"body\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n});","import Wordprocessing2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { Body } from \"./body\";\r\n\r\n/**\r\n * class of the document, element with tag \"document\"\r\n */\r\nexport const Document = OpenXmlElement.register(class Document extends Wordprocessing2006 {\r\n    //#region override the key information\r\n    static LocalName = \"document\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the body of the document\r\n     */\r\n    get body() {\r\n        let element = this.childOne(Body);\r\n        if (!element) {\r\n            element = this.createElement(Body);\r\n            element && this.appendChild(element);\r\n        }\r\n        return element;\r\n    }\r\n});","export const main = \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\";","import { OpenXmlElement } from \"../../../basic\";\r\nimport { main as mainURI } from \"./namespaceURI\";\r\n\r\n/**\r\n * basic class for elements defined in spreadsheet2006\r\n */\r\nexport default class Spreadsheet2006 extends OpenXmlElement {\r\n    //#region override the key information\r\n    static NamespaceUri = mainURI;\r\n    static DefaultPrefix = \"x\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n}\r\n","import Spreadsheet2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { AttrRelationshipId } from \"../../officeDocument\";\r\n\r\n/**\r\n * class of the sheet's id in sheet list, element with tag \"sheet\"\r\n */\r\nexport const SheetId = OpenXmlElement.register(class SheetList extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"sheet\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get the id\r\n     */\r\n    get id() {\r\n        return this.getAttribute(\"sheetId\");\r\n    }\r\n\r\n    /**\r\n     * set the id\r\n     */\r\n    set id(_val) {\r\n        this.setAttribute(\"sheetId\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the relationship ID\r\n     */\r\n    get relationshipId() {\r\n        let id = this.getAttribute(AttrRelationshipId);\r\n        if (!id) {\r\n            id = genRandId(\"R\");\r\n            this.setAttribute(AttrRelationshipId, id);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * set the relationship ID\r\n     */\r\n    set relationshipId(_val) {\r\n        this.setAttribute(AttrRelationshipId, _val || utility.genRandId(\"R\", 16));\r\n    }\r\n\r\n    /**\r\n     * get the name of the sheet\r\n     */\r\n    get name() {\r\n        return this.getAttribute(\"name\");\r\n    }\r\n\r\n    /**\r\n     * set the name of the sheet\r\n     */\r\n    set name(_val) {\r\n        this.setAttribute(\"name\", _val);\r\n    }\r\n});\r\n\r\n/**\r\n * class of the list of sheet, element with tag \"sheets\"\r\n */\r\nexport const SheetList = OpenXmlElement.register(class SheetList extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"sheets\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    /**\r\n     * get a sheet id in the given position\r\n     * @param {Number} _pos the given position\r\n     * @return {SheetId}\r\n     */\r\n    getSheetId(_pos) {\r\n        const list = this.descendants(SheetId);\r\n        return (_pos >= 0) && (_pos < list.length) && list[_pos];\r\n    }\r\n\r\n    /**\r\n     * get a sheet id with the given name\r\n     * @param {String} _name the name of the sheet\r\n     * @returns {SheetId}\r\n     */\r\n    getSheetIdByName(_name) {\r\n        for (let item of this.descendants(SheetId)) {\r\n            if (_name === item.name) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get an iterator for enumerating all sheet's ids\r\n     */\r\n    * iterator() {\r\n        for (let item of this.descendants(SheetId)) {\r\n            yield item;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * create a new id in this list\r\n     * @returns {SheetId}\r\n     */\r\n    createId() {\r\n        const id = this.createElement(SheetId);\r\n        id && this.appendChild(id);\r\n        return id;\r\n    }\r\n});","import Spreadsheet2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport { SheetList } from \"./sheetList\";\r\n\r\n/**\r\n * class of the workbook, element with tag \"workbook\"\r\n */\r\nexport const Workbook = OpenXmlElement.register(class Workbook extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"workbook\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    get sheetList() {\r\n        let list = this.childOne(SheetList);\r\n        if (!list) {\r\n            list = this.createElement(SheetList);\r\n            list && this.appendChild(list);\r\n        }\r\n        return list;\r\n    }\r\n});","import Spreadsheet2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the text for share string\r\n * @private\r\n */\r\nclass ShareStringText extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"t\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n}\r\n\r\n/**\r\n * class of the share string item, element with tag \"si\"\r\n */\r\nexport const ShareStringItem = OpenXmlElement.register(class ShareStringItem extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"si\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n    }\r\n\r\n    get text() {\r\n        const text = this.childOne(ShareStringText);\r\n        return text && text.textContent;\r\n    }\r\n\r\n    set text(_val) {\r\n        let text = this.childOne(ShareStringText);\r\n        if (!text) {\r\n            text = this.createElement(ShareStringText);\r\n            text && this.appendChild(text);\r\n        }\r\n        text && (text.textContent = _val);\r\n    }\r\n\r\n    toString() {\r\n        return this.text;\r\n    }\r\n});\r\n\r\nconst $sst = Symbol(\"ShareStringStable.sst\");\r\n\r\n/**\r\n * class of the share string table, element with tag \"sst\"\r\n */\r\nexport const ShareStringTable = OpenXmlElement.register(class ShareStringTable extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"sst\";\r\n    //#endregion\r\n\r\n    constructor (_node, _options) {\r\n        super(_node, _options);\r\n        this.reload();\r\n    }\r\n\r\n    /**\r\n     * get all items of the share strings\r\n     */\r\n    get items() {\r\n        if (0 >= this[$sst].length) {\r\n            this[$sst] = this.children(ShareStringItem);\r\n        }\r\n        return this[$sst];\r\n    }\r\n\r\n    /**\r\n     * add a new share string item\r\n     * if there is already a string with the same value, this function will return the old one instead of insert a new one\r\n     * @param {String} _text the value of the string\r\n     * @return {Number} the index of the string\r\n     */\r\n    add(_text) {\r\n        // return if there is already a string with the same value\r\n        _text = String(_text);\r\n        const items = this.items();\r\n        for (let index in items) {\r\n            const item = items[index];\r\n            if (String(item) === _text) {\r\n                return index;\r\n            }\r\n        }\r\n        // create a new string if the value is not in the table yet\r\n        const item = this.createElement(ShareStringItem);\r\n        if (item) {\r\n            item.text = _text;\r\n            this.appendChild(item);\r\n            this[$sst].push(item);\r\n            return this[$sst].length - 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * reload all the share strings\r\n     */\r\n    reload() {\r\n        this[$sst] = this.children(ShareStringItem);\r\n    }\r\n});","import Spreadsheet2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of column information, element with tag \"col\"\r\n */\r\nexport const ColumnInformation = OpenXmlElement.register(class ColumnInformation extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"col\";\r\n    //#endregion\r\n\r\n    /**\r\n     * get the width information\r\n     */\r\n    get width() {\r\n        const customWidth = this.getAttribute(\"customWidth\");\r\n        return customWidth && Number(this.getAttribute(\"width\"));\r\n    }\r\n\r\n    /**\r\n     * set the width information\r\n     * set as undefined will clear the setting\r\n     */\r\n    set width(_val) {\r\n        if (typeof _val === \"number\") {\r\n            this.setAttribute(\"width\", _val);\r\n            this.setAttribute(\"customWidth\", 1);\r\n        } else if (_val === undefined || _val === null){\r\n            this.removeAttribute(\"width\");\r\n            this.removeAttribute(\"customWidth\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the max index of column affected by this information \r\n     */\r\n    get maxIndex() {\r\n        return Number(this.getAttribute(\"max\"));\r\n    }\r\n\r\n    /**\r\n     * set the max index of the column affected by this information \r\n     */\r\n    set maxIndex(_val) {\r\n        (typeof _val === \"number\") && this.setAttribute(\"max\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the min index of column affected by this information \r\n     */\r\n    get minIndex() {\r\n        return Number(this.getAttribute(\"min\"));\r\n    }\r\n\r\n    /**\r\n     * set the min index of the column affected by this information \r\n     */\r\n    set minIndex(_val) {\r\n        (typeof _val === \"number\") && this.setAttribute(\"min\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the index range of columns affected by this information\r\n     */\r\n    get index() {\r\n        return [this.minIndex, this.maxIndex];\r\n    }\r\n\r\n    /**\r\n     * set the index of colum affected by this information \r\n     * this function will set the maxIndex ans minIndex with a same value\r\n     */\r\n    set index(_val) {\r\n        (typeof _val === \"number\") && (this.maxIndex = _val, this.minIndex = _val);\r\n    }\r\n});\r\n\r\n\r\n/**\r\n * class of the set of column information, element with tag \"cols\"\r\n */\r\nexport const ColumnInformationSet = OpenXmlElement.register(class ColumnInformationSet extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"cols\";\r\n    //#endregion\r\n\r\n    /**\r\n     * get all informations\r\n     */\r\n    get items() {\r\n        return this.children(ColumnInformation);\r\n    }\r\n\r\n    /**\r\n     * get the informations of the column index by the given number\r\n     * @param {Number} _index the index of the column\r\n     * @return {ColumnInformation} the information object, return undefined if the information is net set.\r\n     */\r\n    getInforamtion(_index) {\r\n        for (let item of this.items) {\r\n            if ((_index >= item.minIndex) && (_index <= item.maxIndex)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the informations of the column index by the given number.\r\n     * different from getInformation, this function will create a new information object if the information had been not set.\r\n     * @param {Number} _index the index of the column\r\n     * @return {ColumnInformation} the information object\r\n     */\r\n    acquireInformation(_index) {\r\n        let info = this.getInforamtion(_index);\r\n        if (!info) {\r\n            info = this.createElement(ColumnInformation);\r\n            info && (this.appendChild(info), info.index = _index);\r\n        }\r\n        return info;\r\n    }\r\n});","/**\r\n * convert the id of the column to the index of the column.\r\n * for example: \"A\" is converted to 1, \"BA\" is converted to 53\r\n * @param {String} _id the id of the column\r\n * @returns {Number} the index of the column\r\n */\r\nexport function columnIdToIndex(_id) {\r\n    let index = 0;\r\n    _id = String(_id).toUpperCase();\r\n    for (let pos in _id) {\r\n        let item = _id.charCodeAt(pos) - 64;\r\n        index = index * 26 + item;\r\n    }\r\n    return index;\r\n}\r\n\r\n/**\r\n * convert the index of the column to the id of the column.\r\n * @param {Number} _index the index of the column\r\n * @returns {String} the id of the column\r\n */\r\nexport function columnIndexToId(_index) {\r\n    _index = Number(_index);\r\n    if (!isNaN(_index)) {\r\n        let id = \"\";\r\n        for (; _index > 0; _index = parseInt(_index / 26)) {\r\n            let mod = (--_index) % 26;\r\n            id = String.fromCharCode(65 + mod) + id;\r\n        }\r\n        return id;\r\n    }\r\n}\r\n\r\n/**\r\n * check if the reference id is in correct format\r\n * @param {String} _id the reference id\r\n * @returns {Boolean}\r\n */\r\nexport function isValidReferenceId(_id) {\r\n    return /^[A-Z]+\\d+$/.test(_id);\r\n}\r\n\r\n/**\r\n * decompose the reference id of the cell to column's id and row's index\r\n * @param {String} _id the reference id of the cell\r\n * @returns {Object} { colId: <the id of the column>, rowIndex: <the index of the row> }\r\n */\r\nexport function decomposeReferenceId(_id) {\r\n    const matched = /^([A-Z]+)(\\d+)$/.exec(_id);\r\n    return matched ? { colId: matched[1], rowIndex: Number(matched[2]) } : {};\r\n}","import Spreadsheet2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\nimport * as toolkit from \"./toolkit\";\r\nimport { error } from \"../../../../common\";\r\n\r\nconst assert = error.assert;\r\n\r\n/**\r\n * declared type of the data for value of cell\r\n */\r\nexport const DataType = Object.freeze({\r\n    Boolean: \"b\",\r\n    Number: \"n\",\r\n    Error: \"e\",\r\n    SharedString: \"s\",\r\n    String: \"str\",\r\n    InlineString: \"inlineStr\",\r\n    Date: \"d\"\r\n});\r\n\r\n/**\r\n * class of the value of the cell, element with tag \"v\"\r\n */\r\nexport const CellValue = OpenXmlElement.register(class CellValue extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"v\";\r\n    //#endregion\r\n});\r\n\r\n/**\r\n * class of the formula of the cell, element with tag \"v\"\r\n */\r\nexport const CellFormula = OpenXmlElement.register(class CellFormula extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"f\";\r\n    //#endregion\r\n});\r\n\r\n/**\r\n * class of the cell of the sheet, element with tag \"c\"\r\n */\r\nexport const Cell = OpenXmlElement.register(class Cell extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"c\";\r\n    //#endregion\r\n\r\n    /**\r\n     * get the index of the style\r\n     */\r\n    get styleIndex() {\r\n        return Number(this.getAttribute(\"s\"));\r\n    }\r\n\r\n    /**\r\n     * set the index of the style\r\n     */\r\n    set styleIndex(_val) {\r\n        if (typeof _val === \"number\") {\r\n            this.setAttribute(\"s\", _val);\r\n        } else if (_val === undefined || _val === null) {\r\n            this.removeAttribute(\"s\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the reference name of the cell\r\n     */\r\n    get referenceId() {\r\n        return this.getAttribute(\"r\");\r\n    }\r\n\r\n    /**\r\n     * set the reference name of the cell\r\n     */\r\n    set referenceId(_val) {\r\n        _val && this.setAttribute(\"r\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the type of the data\r\n     */\r\n    get dataType() {\r\n        return this.getAttribute(\"t\");\r\n    }\r\n\r\n    /**\r\n     * set the type of the data\r\n     */\r\n    set dataType(_val) {\r\n        this.setAttribute(\"t\", _val);\r\n    }\r\n\r\n    /**\r\n     * get the value of the cell\r\n     */\r\n    get value() {\r\n        const val = this.childOne(CellValue);\r\n        return val && val.textContent;\r\n    }\r\n\r\n    /**\r\n     * set the value of the cell\r\n     */\r\n    set value(_val) {\r\n        let element = this.childOne(CellValue);\r\n        if (!element) {\r\n            element = this.createElement(CellValue);\r\n            element && this.appendChild(element);\r\n        }\r\n        element && (element.textContent = _val);\r\n    }\r\n\r\n    /**\r\n     * get the formula of the cell\r\n     */\r\n    get formula() {\r\n        const val = this.childOne(CellFormula);\r\n        return val && val.textContent;\r\n    }\r\n\r\n    /**\r\n     * set the formula of the cell\r\n     */\r\n    set formula(_val) {\r\n        let element = this.childOne(CellFormula);\r\n        if (!element) {\r\n            element = this.createElement(CellFormula);\r\n            element && this.appendChild(element);\r\n        }\r\n        element && (element = _val);\r\n    }\r\n});\r\n\r\n/**\r\n * class of the Row of the sheet, element with tag \"row\"\r\n */\r\nexport const Row = OpenXmlElement.register(class Row extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"row\";\r\n    //#endregion\r\n\r\n    /**\r\n     * get the height of the row\r\n     */\r\n    get height() {\r\n        const custom = this.getAttribute(\"customHeight\");\r\n        return custom && Number(this.getAttribute(\"ht\"));\r\n    }\r\n\r\n    /**\r\n     * set the height of the row.\r\n     * set as undefined will clear the setting\r\n     */\r\n    set height(_val) {\r\n        if (typeof _val === \"number\") {\r\n            this.setAttribute(\"ht\", _val);\r\n            this.setAttribute(\"customHeight\", 1);\r\n        } else if (_val === undefined || _val === null){\r\n            this.removeAttribute(\"ht\");\r\n            this.removeAttribute(\"customHeight\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the reference index of the row\r\n     */\r\n    get referenceIndex() {\r\n        return Number(this.getAttribute(\"r\"));\r\n    }\r\n\r\n    /**\r\n     * set the reference index of the row\r\n     */\r\n    set referenceIndex(_val) {\r\n        (typeof _val === \"number\") && this.setAttribute(\"r\", _val);\r\n    }\r\n\r\n    /**\r\n     * get all cells in this row\r\n     */\r\n    get cells() {\r\n        return this.children(Cell);\r\n    }\r\n\r\n    /**\r\n     * acquire a cell with a special reference id.\r\n     * this function will create a new object if the cell had not been set yet\r\n     * @param {String} _colRefenceId the reference id of the column\r\n     * @return {Cell} the instance of the target cell\r\n     */\r\n    acquireCell(_colRefenceId) {\r\n        _colRefenceId = String(_colRefenceId).toUpperCase();\r\n        let cell = this.childOne(Cell.xpath(`and @r='${_colRefenceId}${this.referenceIndex}'`));\r\n        if (!cell) {\r\n            cell = this.createElement(Cell);\r\n            cell && (this.appendChild(cell), cell.referenceId = `${_colRefenceId}${this.referenceIndex}`);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * get a cell with a special reference id.\r\n     * @param {String} _colRefenceId the reference id of the column\r\n     * @return {Cell} the instance of the target cell\r\n     */\r\n    getCell(_colRefenceId) {\r\n        _colRefenceId = String(_colRefenceId).toUpperCase();\r\n        return this.childOne(Cell.xpath(`and @r='${_colRefenceId}${this.referenceIndex}'`));\r\n    }\r\n});\r\n\r\n/**\r\n * class of the data of the sheet, element with tag \"sheetData\"\r\n */\r\nexport const SheetData = OpenXmlElement.register(class SheetData extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"sheetData\";\r\n    //#endregion\r\n\r\n    /**\r\n     * get all rows in the sheet\r\n     */\r\n    get rows() {\r\n        return this.children(Row);\r\n    }\r\n\r\n    /**\r\n     * acquire a row with a special reference index.\r\n     * this function will create a new object if the row had not been set yet\r\n     * @param {Number} _index the reference index\r\n     * @return {Row} the instance of the target row\r\n     */\r\n    acquireRow(_index) {\r\n        _index = Number(_index);\r\n        if ((!isNaN(_index)) && (_index > 0)) {\r\n            let row = this.childOne(Row.xpath(`and @r='${_index}'`));\r\n            if (!row) {\r\n                row = this.createElement(Row);\r\n                row && (this.appendChild(row), row.referenceIndex = _index);\r\n            }\r\n            return row;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get a row with a special reference index\r\n     * @param {Number} _index the reference index\r\n     * @return {Row} the instance of the target row\r\n     */\r\n    getRow(_index) {\r\n        _index = Number(_index);\r\n        return (!isNaN(_index)) && (_index > 0) && this.childOne(Row.xpath(`and @r='${_index}'`));\r\n    }\r\n\r\n    /**\r\n     * acquire a cell with a special reference id.\r\n     * this function will create a new object if the cell had not been set yet\r\n     * @param {String} _refenceId the reference id\r\n     * @return {Cell} the instance of the target cell\r\n     */\r\n    acquireCell(_refenceId) {\r\n        _refenceId = String(_refenceId).toUpperCase();\r\n        let cell = this.descendantOne(Cell.xpath(`and @r='${_refenceId}'`));\r\n        if (!cell) {\r\n            const rowIndex = Number(String(_refenceId).replace(/[^\\d]/, \"\"));\r\n            if (!isNaN(rowIndex)) {\r\n                let row = this.childOne(Row.xpath(`and @r='${rowIndex}'`));\r\n                if (!row) {\r\n                    row = this.createElement(Row);\r\n                    row && (this.appendChild(row), row.referenceIndex = rowIndex);\r\n                }\r\n                if (row) {\r\n                    cell = row.createElement(Cell);\r\n                    cell && (row.appendChild(cell), cell.referenceId = _refenceId);\r\n                }\r\n            }\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * get a cell with a special reference id.\r\n     * @param {String} _refenceId the reference id\r\n     * @return {Cell} the instance of the target cell\r\n     */\r\n    getCell(_refenceId) {\r\n        _refenceId = String(_refenceId).toUpperCase();\r\n        return this.descendantOne(Cell.xpath(`and @r='${_refenceId}'`));\r\n    }\r\n\r\n    /**\r\n     * fill a range with the data of a table\r\n     * @param {String} _startReferenceId the reference id of the start cell\r\n     * @param {Array|Object} _table the data of a table\r\n     */\r\n    fillRangeWithTable(_startReferenceId, _table) {\r\n        assert(_table, error.EXPECT_PARAM(\"_table\"));\r\n        let { colId, rowIndex } = toolkit.decomposeReferenceId(_startReferenceId);\r\n        assert(colId && (rowIndex !== undefined), error.EXPECT_PARAM(\"_startReferenceId in correct format\"));\r\n        const startColIndex = toolkit.columnIdToIndex(colId);\r\n        for (let rowPos in _table) {\r\n            const rowData = assert(_table[rowPos], error.ACQUIRE_RESOURCE_FAIL(`row data of _table[${rowPos}]`));\r\n            const row = assert(this.acquireRow(rowIndex++), error.ACQUIRE_RESOURCE_FAIL(`row element in sheetData for _table[${rowPos}]`));\r\n            let colIndex = startColIndex;\r\n            for (let cellPos in rowData) {\r\n                const cellData = rowData[cellPos];\r\n                const cell = assert(row.acquireCell(toolkit.columnIndexToId(colIndex++)), \r\n                                    error.ACQUIRE_RESOURCE_FAIL(`cell element in sheetData for _table[${rowPos}][${cellPos}]`));\r\n                cell.value = cellData;\r\n                cell.dataType = (isNaN(Number(cellData)) ? DataType.String : DataType.Number);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get a range of data if the SheetData and fill into a table\r\n     * @param {String} _startReferenceId the reference id of the start cell\r\n     * @param {Number} _rowCount the count of the rows\r\n     * @param {Number} _colCount the count of the column\r\n     * @param {ShareStringTable} _shareStringTable  the table of the share string of the workbook, \r\n     *                                              function will not translate the share string if this parameter is ignored\r\n     * @returns {Array<Array>}\r\n     */\r\n    getRangeToTable(_startReferenceId, _rowCount, _colCount, _shareStringTable) {\r\n        assert((_rowCount > 0) && (_colCount > 0), error.EXPECT_PARAM(\"_rowCount and _colCount\"));\r\n        let { colId, rowIndex } = toolkit.decomposeReferenceId(_startReferenceId);\r\n        assert(colId && (rowIndex !== undefined), error.EXPECT_PARAM(\"_startReferenceId in correct format\"));\r\n        const startColIndex = toolkit.columnIdToIndex(colId);\r\n        const maxRowIndex = rowIndex + _rowCount;\r\n        const maxColIndex = startColIndex + _colCount;\r\n        const table = [];\r\n        for (; rowIndex < maxRowIndex; rowIndex++) {\r\n            const row = this.getRow(rowIndex);\r\n            const rowData = [];\r\n            if (row) {\r\n                for (let colIndex = startColIndex; colIndex < maxColIndex; colIndex++) {\r\n                    let cellData = undefined;\r\n                    const cell = row.getCell(toolkit.columnIndexToId(colIndex));\r\n                    if (cell) {\r\n                        cellData = cell.value;\r\n                        if ((DataType.SharedString === cell.dataType) && _shareStringTable) {\r\n                            cellData = _shareStringTable.items[cellData];\r\n                        }\r\n                    }\r\n                    rowData.push(cellData);\r\n                }\r\n            }\r\n            table.push(rowData);\r\n        }\r\n        return table;\r\n    }\r\n});","import Spreadsheet2006 from \"./basic\";\r\nimport { OpenXmlElement } from \"../../../basic\";\r\n\r\n/**\r\n * class of the worksheet, element with tag \"worksheet\"\r\n */\r\nexport const WorkSheet = OpenXmlElement.register(class WorkSheet extends Spreadsheet2006 {\r\n    //#region override the key information\r\n    static LocalName = \"worksheet\";\r\n    //#endregion\r\n});","import { readonly, error, genRandId } from \"../../../common\";\r\nimport { OpenXmlElement, OpenXmlPart, OpenXmlPurePart } from \"../../basic\";\r\nimport { presentation as presentationSchemas, office as officeSchemas }  from \"../../schemas\";\r\nimport path from \"path\";\r\n\r\nconst assert = error.assert;\r\n\r\n//#region inner class\r\n\r\n//#region class of SlideSet\r\nconst $slideAvalidID = Symbol(\"SlideSet.avalidID\");\r\n/**\r\n * Class of operating the set of the slides\r\n */\r\nclass SlideSet {\r\n    /**\r\n     * the minimum ID\r\n     */\r\n    static MIN_ID = 256;\r\n    /**\r\n     * the maximum ID\r\n     */\r\n    static MAX_ID = 0x0ffffffff;\r\n\r\n    /**\r\n     * constructor\r\n     * @param {Presentation} _presentation the presentation part\r\n     */\r\n    constructor (_parent) {\r\n        assert(_parent instanceof PresentationPart, \"_parent(an instance of PresentationPart)\");\r\n        \r\n        readonly(this, \"selfElement\", _parent.presentation.slideIdList);\r\n        readonly(this, \"parent\", _parent);\r\n        this.arrangeId();\r\n    }\r\n\r\n    /**\r\n     * arrange the id of all slides\r\n     * the new set of id will start from MIN_ID\r\n     */\r\n    arrangeId() {\r\n        const rootNode = this.parent.contentDom.documentElement;\r\n        let id = SlideSet.MIN_ID;\r\n        for (let { slideId } of this.selfElement.items()) {\r\n            const oriId = slideId.id;\r\n            const relElements = rootNode.xpathSelect(`.//*[local-name(.)='sldId' and @id='${oriId}']`);\r\n            for (let relIdx in relElements) {\r\n                relElements[relIdx].setAttribute(\"id\", id);\r\n            }\r\n            id++;\r\n        }\r\n        this[$slideAvalidID] = id;\r\n    }\r\n\r\n    /**\r\n     * the count of the slides\r\n     */\r\n    get count() {\r\n        return this.selfElement.count;\r\n    }\r\n\r\n    /**\r\n     * get a slide by the index in the slide set\r\n     * @param {Number} _index the index of the slide in the slide set\r\n     */\r\n    getByIndex(_index) {\r\n        const sldIdNode = this.selfElement.children(presentationSchemas.SlideId)[_index];\r\n        if (sldIdNode) {\r\n            return this.parent.getRelationPart(sldIdNode.relationshipId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get an iterator of all slides\r\n     */\r\n    * slides() {\r\n        const parent = this.parent;\r\n        for (let { index, slideId } of this.selfElement.items()) {\r\n            yield {\r\n                index,\r\n                getter: parent.getRelationPart(slideId.relationshipId),\r\n                id: slideId.id\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * enumerate each slide and pass to the callback function to process\r\n     * @param {Function} _cb the callback function\r\n     */\r\n    async each(_cb) {\r\n        if (typeof _cb === \"function\") {\r\n            const parent = this.parent;\r\n            for (let { index, slideId } of this.selfElement.items()) {\r\n                const slidePart = await parent.getRelationPart(slideId.relationshipId);\r\n                const cbRet = _cb(index, slidePart);\r\n                (cbRet instanceof Promise) && await cbRet;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * insert a slide\r\n     * @param {*} _positionSlide    表示插入位置的胶片，新胶片将插入到此胶片之后，可以是胶片顺序号、胶片关系ID、胶片部件\r\n     *                              如果输入的是undefined，则将新胶片添加到最后\r\n     *                              如果输入的是-1，则表示将新胶片添加到第一张\r\n     * @param {*} _targetSlide      新胶片的部件，如果不输入该参数，则复制_positionSlide表示的胶片为新胶片\r\n     */\r\n    async insert(_positionSlide, _targetSlide) {\r\n        const parent = this.parent;\r\n\r\n        // get a valid id for new slide.\r\n        // if there is no valid id, try once after arranging.\r\n        let useId = this[$slideAvalidID];\r\n        if (useId > SlideSet.MAX_ID) {\r\n            this.arrangeId();\r\n            useId = this[$slideAvalidID];\r\n        }\r\n        assert(useId <= SlideSet.MAX_ID, error.NO_ENOUGH_ID);\r\n\r\n        // check the new slide must be in the same package of the slide set\r\n        assert((!_targetSlide) || parent.inSamePackage(_targetSlide), error.FROM_OTHER_PACKAGE(\"_targetSlide\"));\r\n\r\n        // looking for the relationship ID of the position slide\r\n        let relSlideId = undefined;\r\n        if (typeof _positionSlide === \"number\") {\r\n            const slideIdSet = this.selfElement.children(presentationSchemas.SlideId);\r\n            relSlideId = slideIdSet[_positionSlide < 0 ? 0 : (_positionSlide >= slideIdSet.length ? (slideIdSet.length - 1) : _positionSlide)];\r\n        } else if (typeof _positionSlide === \"string\") {\r\n            relSlideId = this.selfElement.childOne(officeSchemas.AttrRelationshipId, `and string(.)='${_positionSlide}'`);\r\n        } else if (parent.inSamePackage(_positionSlide)) {\r\n            relSlideId = this.selfElement.childOne(officeSchemas.AttrRelationshipId, `and string(.)='${_positionSlide.relationID}'`);\r\n        }\r\n\r\n        if (!_targetSlide) {\r\n            if (relSlideId) {\r\n                // if the target slide is unspecified, duplicate the position slide as a new one\r\n                const refSlidePart = await parent.getRelationPart(relSlideId.relationshipId);\r\n                const fileExtName = path.extname(refSlidePart.path);\r\n                const fileName = path.basename(refSlidePart.path, fileExtName).replace(/\\d$/, \"\") + genRandId() + fileExtName;\r\n                const filePath = path.dirname(refSlidePart.path);\r\n                _targetSlide = await refSlidePart.duplicate(path.join(filePath, fileName));\r\n            } else {\r\n                // if both the target slide and position slide are unspecified, create an empty slide\r\n                // TODO: this is no implementation.\r\n                throw error.NO_IMPLEMENT();\r\n            }\r\n        }\r\n        assert(_targetSlide, error.LOCATE_RESOURCE_FAIL(\"target slide part\"));\r\n\r\n        // insert the target slide\r\n        const rid = parent.insertRelationPart(_targetSlide);\r\n        const newId = this.selfElement.createElement(presentationSchemas.SlideId);\r\n        assert(newId, error.ACQUIRE_RESOURCE_FAIL(\"SlideId Node\"));\r\n        newId.id = useId;\r\n        newId.relationshipId = rid;\r\n        relSlideId\r\n            ? relSlideId.insertAsSibling(newId, (typeof _positionSlide === \"number\") && (_positionSlide < 0))\r\n            : this.selfElement.appendChild(newId);\r\n        this[$slideAvalidID]++;\r\n        parent.commit();\r\n        return rid;\r\n    }\r\n}\r\n//#endregion\r\n\r\n//#endregion\r\n\r\n/**\r\n * Class of operating the presentation part\r\n * @class PresentationPart\r\n */\r\nexport const PresentationPart = OpenXmlPart.register(class PresentationPart extends OpenXmlPurePart {\r\n    //#region override the shemas infomation and so on\r\n    static SchemasURI = \"http://schemas.openxmlformats.org/presentationml/2006/main\";\r\n    static ContentType = \"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\";\r\n    //#endregion\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} _opt \r\n     */\r\n    constructor(_opt) {\r\n        super(_opt);\r\n        readonly(this, \"presentation\", this.primaryElement);\r\n        readonly(this, \"slideSet\", new SlideSet(this));\r\n    }\r\n});","import { readonly, error } from \"../../../common\";\r\nimport { OpenXmlElement, OpenXmlPart, OpenXmlPurePart } from \"../../basic\";\r\nimport { presentation, office, drawing }  from \"../../schemas\";\r\n\r\n/**\r\n * class of the slide part\r\n * @class SlidePart\r\n */\r\nexport const SlidePart = OpenXmlPart.register(class SlidePart extends OpenXmlPurePart {\r\n    //#region override the key information\r\n    static SchemasURI = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/slide\";\r\n    static ContentType = \"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\";\r\n    //#endregion\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} _opt \r\n     */\r\n    constructor(_opt) {\r\n        super(_opt);\r\n        let slideElement = this.primaryElement;\r\n        if (!(slideElement instanceof presentation.Slide)) {\r\n            slideElement = presentation.Slide.createElement(this.dom);\r\n            slideElement && this.dom.appendChild(slideElement.node);\r\n        }\r\n        readonly(this, \"slide\", slideElement);\r\n    }\r\n\r\n});","import { readonly, error, genRandId } from \"../../../common\";\r\nimport { OpenXmlElement, OpenXmlPart, OpenXmlPurePart } from \"../../basic\";\r\n\r\nconst assert = error.assert;\r\n\r\n//#endregion\r\n\r\n/**\r\n * Class of operating the document part\r\n * @class DocumentPart\r\n */\r\nexport const DocumentPart = OpenXmlPart.register(class DocumentPart extends OpenXmlPurePart {\r\n    //#region override the shemas infomation and so on\r\n    static SchemasURI = \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\";\r\n    static ContentType = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\";\r\n    static DefaultPath = \"word/document.xml\";\r\n    //#endregion\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} _opt \r\n     */\r\n    constructor(_opt) {\r\n        super(_opt);\r\n        readonly(this, \"document\", this.primaryElement);\r\n    }\r\n});","import { readonly, error, genRandId } from \"../../../common\";\r\nimport { OpenXmlElement, OpenXmlPart, OpenXmlPurePart, OpenXmlPackage } from \"../../basic\";\r\n\r\nconst assert = error.assert;\r\n\r\nconst EMPTY_SHARESTRING_DOC_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"true\"?><sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"></sst>';\r\n\r\n//#endregion\r\n\r\n/**\r\n * Class of operating the share string part\r\n * @class ShareStringPart\r\n */\r\nexport const ShareStringPart = OpenXmlPart.register(class ShareStringPart extends OpenXmlPurePart {\r\n    //#region override the shemas infomation and so on\r\n    static SchemasURI = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\";\r\n    static ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\";\r\n    //#endregion\r\n\r\n    /**\r\n     * override for creating a new share string part\r\n     * @param {OpenXmlPackage} _package the package store the new part\r\n     * @param {String} _path the path of the share string part\r\n     * @return {Promise<ShareStringPart>} the new part\r\n     */\r\n    static create(_package, _path) {\r\n        assert(OpenXmlPackage.isPackage(_package), error.EXPECT_PARAM(\"_package must be an instance of OpenXmlPackage\"));\r\n        assert(_path, error.EXPECT_PARAM(\"_path\"));\r\n\r\n        _package.setFile(_path, EMPTY_SHARESTRING_DOC_XML, this.ContentFormat);\r\n        return this.load(_package, _path);\r\n    }\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} _opt \r\n     */\r\n    constructor(_opt) {\r\n        super(_opt);\r\n        readonly(this, \"table\", this.primaryElement);\r\n    }\r\n\r\n    get items() {\r\n        return this.table.items;\r\n    }\r\n\r\n    add(_text) {\r\n        return this.table.add(_text);\r\n    }\r\n});","import { readonly, error, genRandId } from \"../../../common\";\r\nimport { OpenXmlElement, OpenXmlPart, OpenXmlPurePart } from \"../../basic\";\r\nimport { ShareStringPart } from \"./shareStringPart\";\r\n\r\nimport path from \"path\";\r\n\r\nconst assert = error.assert;\r\n\r\n//#endregion\r\n\r\n/**\r\n * Class of operating the workbook part\r\n * @class WorkbookPart\r\n */\r\nexport const WorkbookPart = OpenXmlPart.register(class WorkbookPart extends OpenXmlPurePart {\r\n    //#region override the shemas infomation and so on\r\n    static SchemasURI = \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\";\r\n    static ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\";\r\n    static DefaultPath = \"xl/workbook.xml\";\r\n    //#endregion\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} _opt \r\n     */\r\n    constructor(_opt) {\r\n        super(_opt);\r\n        readonly(this, \"data\", this.primaryElement);\r\n    }\r\n\r\n    /**\r\n     * get the share string part;\r\n     */\r\n    async getShareStringPart() {\r\n        let part = await this.getRelationPart(ShareStringPart);\r\n        if (!part) {\r\n            part = await ShareStringPart.create(this.package, path.join(path.dirname(this.path), \"sharedStrings.xml\"));\r\n            part && this.insertRelationPart(part);\r\n        }\r\n        return part;\r\n    }\r\n\r\n    /**\r\n     * get a share string in the given position\r\n     * @param {Number} _index the position of the string\r\n     * @return {ShareStringItem}\r\n     */\r\n    async getShareString(_index) {\r\n        const part = await this.getShareStringPart();\r\n        const list = part && part.items;\r\n        return list && list[_index];\r\n    }\r\n\r\n    /**\r\n     * add a share string\r\n     * @param {String} _text the value of the string\r\n     */\r\n    async addShareString(_text) {\r\n        const part = await this.getShareStringPart();\r\n        return part && part.add(_text);\r\n    }\r\n\r\n    /**\r\n     * get a sheet part by the index of the sheet\r\n     * @param {Number} _index the index of the sheet\r\n     * @return {SheetPart}\r\n     */\r\n    async getSheetByIndex(_index) {\r\n        const id = this.data.sheetList.getSheetId(Number(_index));\r\n        return id && await this.getRelationPart(id.relationshipId);\r\n    }\r\n\r\n    /**\r\n     * get a sheet part by the name of the sheet\r\n     * @param {String} _name the name of the sheet\r\n     * @return {SheetPart}\r\n     */\r\n    async getSheetByName(_name) {\r\n        const id = this.data.sheetList.getSheetIdByName(_name);\r\n        return id && await this.getRelationPart(id.relationshipId);\r\n    }\r\n});","import { readonly, error, genRandId } from \"../../../common\";\r\nimport { OpenXmlElement, OpenXmlPart, OpenXmlPurePart } from \"../../basic\";\r\n\r\nimport { SheetData, ColumnInformationSet } from \"../../schemas/spreadsheet\";\r\n\r\nconst assert = error.assert;\r\n\r\n//#endregion\r\n\r\n/**\r\n * Class of operating the sheet part\r\n * @class SheetPart\r\n */\r\nexport const SheetPart = OpenXmlPart.register(class SheetPart extends OpenXmlPurePart {\r\n    //#region override the shemas infomation and so on\r\n    static SchemasURI = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\";\r\n    static ContentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\";\r\n    //#endregion\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} _opt \r\n     */\r\n    constructor(_opt) {\r\n        super(_opt);\r\n        readonly(this, \"workSheet\", this.primaryElement);\r\n    }\r\n\r\n    /**\r\n     * get the data of the sheet\r\n     */\r\n    get data() {\r\n        let data = this.workSheet.childOne(SheetData);\r\n        if (!data) {\r\n            data = this.workSheet.createElement(SheetData);\r\n            data && this.workSheet.appendChild(data);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * get the informations of the column\r\n     */\r\n    get columnInformations() {\r\n        let cols = this.workSheet.childOne(ColumnInformationSet);\r\n        if (!cols) {\r\n            cols = this.workSheet.createElement(ColumnInformationSet);\r\n            cols && this.workSheet.appendChild(cols);\r\n        }\r\n        return cols;\r\n    }\r\n});"],"names":["setPrototypeOf","assertThisInitialized","isNativeReflectConstruct","isNativeFunction","construct","getPrototypeOf","$errorId","Symbol","OxjsError","_id","_msg","Number","Error","Exception","_message","NO_IMPLEMENT","_tip","EXPECT_PARAM","XML_PARSE_FAIL","NO_ENOUGH_ID","FROM_OTHER_PACKAGE","LOCATE_NODE_FAIL","LOCATE_RESOURCE_FAIL","ACQUIRE_RESOURCE_FAIL","assert","_cond","_error","NaN","NoImplemented","tip","readonly","_obj","_keyOrMap","_value","arguments","length","Object","defineProperty","value","writable","key","genRandId","_prefix","_radix","Date","now","toString","Math","random","substr","IDom","_expression","_isSingle","error","_xmlString","require$$0","IZip","_file","_format","_content","IApplication","CONTENTTYPE_PATH","EMPTY_CONTENTTYPE_XML","OpenXmlPackage","application","zip","_contentTypeXML","contentTypes","DOM","parse","setFile","save","_path","_data","_contentType","dom","partName","replace","xpathSelect","typeDesc","setAttribute","newItem","createElement","appendChild","getFile","_extension","_type","open","_app","_package","isPrototypeOf","ZIP","load","contentTypeXML","isPackage","extern","item","prototype","registedParts","EMPTY_RELATIONSHRIP_XML","OpenXmlPart","_partPath","partDir","path","dirname","partFileName","basename","join","_opt","OpenPackage","String","DefaultPath","relationshipPath","getRelationshipPath","ContentFormat","content","relationshipXML","opt","assign","_part","name","_partClass","SchemasURI","relationshipDom","pkg","constructor","ContentType","targetPackage","_idOrClass","rels","nodeSel","typeAttr","getAttribute","targetPath","isAbsolute","ctor","part","relationshipId","targetRelPath","relative","rid","relNode","documentElement","_class","nodeList","curDir","index","node","type","target","undefined","OpenXmlBinaryPart","OpenXmlAttribute","_localName","_nsURI","_defPrefix","defineProperties","localName","defaultPrefix","namespaceUri","options","_node","prefix","lookupPrefix","_val","fn","checker","ns","getAttributeNS","qualifiedName","adjustValue","setAttributeNS","removeAttributeNS","removeAttribute","registedElements","OpenXmlElement","_options","children","_arg","selectExp","genXPath","nodes","map","instanced","nodeType","ownerElement","_element","_position","childNodes","insertBefore","_before","refNode","parent","parentNode","nextSibling","_elementClass","ownerDocument","removeChild","_attr","setValue","getValue","remove","nodeName","textContent","NamespaceUri","LocalName","DefaultPrefix","singleTagName","prefixName","namespaceURI","_dom","_parentElement","createElementNS","element","createDetail","_custom","xpath","OpenXmlPurePart","contentDom","root","primaryElement","relationship","AttrRelationshipId","AttrEmbed","main","Presentation2006","mainURI","SlideId","register","id","utility","isNaN","Presentations2006","SlideIdList","list","slideId","Presentation","NonVisualDrawingProperties","NonVisualPropertiesBase","pr","childOne","description","NonVisualGroupShapeProperties","VisualSlideObject","GroupShapeBase","idx","ShapeTree","CommonSlideData","tree","Slide","cSld","NonVisualShapeProperties","NonVisualPictureProperties","GroupShape","Drawing2006","Text","Run","items","descendants","text","Paragraph","TextBody","p","Shape","Picture","Wordprocessing2006","AttrValue","ParagraphStyleId","StyleParagraphProperties","_text","prop","insertChild","Body","Document","Spreadsheet2006","SheetId","SheetList","_pos","_name","Workbook","ShareStringText","ShareStringItem","$sst","ShareStringTable","reload","push","ColumnInformation","customWidth","minIndex","maxIndex","ColumnInformationSet","_index","info","getInforamtion","columnIdToIndex","toUpperCase","pos","charCodeAt","columnIndexToId","parseInt","mod","fromCharCode","isValidReferenceId","test","decomposeReferenceId","matched","exec","colId","rowIndex","DataType","freeze","Boolean","SharedString","InlineString","CellValue","CellFormula","Cell","val","Row","_colRefenceId","cell","referenceIndex","referenceId","custom","SheetData","row","_refenceId","descendantOne","_startReferenceId","_table","toolkit","startColIndex","rowPos","rowData","acquireRow","colIndex","cellPos","cellData","acquireCell","dataType","_rowCount","_colCount","_shareStringTable","maxRowIndex","maxColIndex","table","getRow","getCell","WorkSheet","$slideAvalidID","SlideSet","_parent","PresentationPart","presentation","slideIdList","arrangeId","rootNode","MIN_ID","selfElement","oriId","relElements","relIdx","sldIdNode","presentationSchemas","getRelationPart","getter","_cb","slidePart","cbRet","Promise","_positionSlide","_targetSlide","useId","MAX_ID","inSamePackage","relSlideId","slideIdSet","officeSchemas","relationID","refSlidePart","fileExtName","extname","fileName","filePath","duplicate","insertRelationPart","newId","insertAsSibling","commit","count","SlidePart","slideElement","DocumentPart","EMPTY_SHARESTRING_DOC_XML","ShareStringPart","add","WorkbookPart","create","getShareStringPart","data","sheetList","getSheetId","getSheetIdByName","SheetPart","workSheet","cols"],"mappings":"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"}